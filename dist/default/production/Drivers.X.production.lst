

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Feb 18 13:34:14 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36   000000                     
    37                           ; Generated 23/03/2023 GMT
    38                           ; 
    39                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71   000000                     
    72                           	psect	idataCOMRAM
    73   001550                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _port_registers
    77   001550  80                 	db	128
    78   001551  0F                 	db	15
    79   001552  81                 	db	129
    80   001553  0F                 	db	15
    81   001554  82                 	db	130
    82   001555  0F                 	db	15
    83   001556  83                 	db	131
    84   001557  0F                 	db	15
    85   001558  84                 	db	132
    86   001559  0F                 	db	15
    87                           
    88                           ;initializer for _lat_registers
    89   00155A  89                 	db	137
    90   00155B  0F                 	db	15
    91   00155C  8A                 	db	138
    92   00155D  0F                 	db	15
    93   00155E  8B                 	db	139
    94   00155F  0F                 	db	15
    95   001560  8C                 	db	140
    96   001561  0F                 	db	15
    97   001562  8D                 	db	141
    98   001563  0F                 	db	15
    99                           
   100                           ;initializer for _tris_registers
   101   001564  92                 	db	146
   102   001565  0F                 	db	15
   103   001566  93                 	db	147
   104   001567  0F                 	db	15
   105   001568  94                 	db	148
   106   001569  0F                 	db	15
   107   00156A  95                 	db	149
   108   00156B  0F                 	db	15
   109   00156C  96                 	db	150
   110   00156D  0F                 	db	15
   111                           
   112                           ;initializer for _ret
   113   00156E  01                 	db	1
   114                           
   115                           ;initializer for _RB7_f
   116   00156F  01                 	db	1
   117                           
   118                           ;initializer for _RB6_f
   119   001570  01                 	db	1
   120                           
   121                           ;initializer for _RB5_f
   122   001571  01                 	db	1
   123                           
   124                           ;initializer for _RB4_f
   125   001572  01                 	db	1
   126                           
   127                           ;initializer for _adc_4
   128   001573  00                 	db	0
   129   001574  00                 	db	0
   130   001575  05                 	db	5
   131   001576  05                 	db	5
   132   001577  03                 	db	3
   133   001578  02                 	db	2
   134                           
   135                           ;initializer for _adc_3
   136   001579  00                 	db	0
   137   00157A  00                 	db	0
   138   00157B  05                 	db	5
   139   00157C  05                 	db	5
   140   00157D  02                 	db	2
   141   00157E  02                 	db	2
   142                           
   143                           ;initializer for _adc_2
   144   00157F  00                 	db	0
   145   001580  00                 	db	0
   146   001581  05                 	db	5
   147   001582  05                 	db	5
   148   001583  01                 	db	1
   149   001584  02                 	db	2
   150                           
   151                           ;initializer for _adc_1
   152   001585  00                 	db	0
   153   001586  00                 	db	0
   154   001587  05                 	db	5
   155   001588  05                 	db	5
   156   001589  00                 	db	0
   157   00158A  02                 	db	2
   158                           
   159                           	psect	smallconst
   160   001000                     __psmallconst:
   161                           	callstack 0
   162   001000  00                 	db	0
   163   001001                     _btn_values:
   164                           	callstack 0
   165   001001  37                 	db	55
   166   001002  38                 	db	56
   167   001003  39                 	db	57
   168   001004  2F                 	db	47
   169   001005  34                 	db	52
   170   001006  35                 	db	53
   171   001007  36                 	db	54
   172   001008  2A                 	db	42
   173   001009  31                 	db	49
   174   00100A  32                 	db	50
   175   00100B  33                 	db	51
   176   00100C  2D                 	db	45
   177   00100D  23                 	db	35
   178   00100E  30                 	db	48
   179   00100F  3D                 	db	61
   180   001010  2B                 	db	43
   181   001011                     __end_of_btn_values:
   182                           	callstack 0
   183   000000                     _INTCON2bits	set	4081
   184   000000                     _EECON2	set	4007
   185   000000                     _ADCON1bits	set	4033
   186   000000                     _ADRESL	set	4035
   187   000000                     _ADRESH	set	4036
   188   000000                     _TRISD	set	3989
   189   000000                     _TRISC	set	3988
   190   000000                     _TRISB	set	3987
   191   000000                     _TRISE	set	3990
   192   000000                     _PORTBbits	set	3969
   193   000000                     _ADCON2bits	set	4032
   194   000000                     _ADCON0bits	set	4034
   195   000000                     _PORTE	set	3972
   196   000000                     _PORTD	set	3971
   197   000000                     _PORTC	set	3970
   198   000000                     _PORTB	set	3969
   199   000000                     _PORTA	set	3968
   200   000000                     _LATA	set	3977
   201   000000                     _TRISA	set	3986
   202   000000                     _INTCON3bits	set	4080
   203   000000                     _INTCONbits	set	4082
   204   000000                     _EECON1bits	set	4006
   205   000000                     _EEDATA	set	4008
   206   000000                     _EEADR	set	4009
   207   000000                     _EEADRH	set	4010
   208   000000                     _LATE	set	3981
   209   000000                     _LATD	set	3980
   210   000000                     _LATC	set	3979
   211   000000                     _LATB	set	3978
   212   001011                     STR_1:
   213   001011  25                 	db	37
   214   001012  69                 	db	105	;'i'
   215   001013  00                 	db	0
   216   001014  00                 	db	0	; dummy byte at the end
   217   000000                     
   218                           ; #config settings
   219                           
   220                           	psect	cinit
   221   0015C4                     __pcinit:
   222                           	callstack 0
   223   0015C4                     start_initialization:
   224                           	callstack 0
   225   0015C4                     __initialization:
   226                           	callstack 0
   227                           
   228                           ; Initialize objects allocated to COMRAM (59 bytes)
   229                           ; load TBLPTR registers with __pidataCOMRAM
   230   0015C4  0E50               	movlw	low __pidataCOMRAM
   231   0015C6  6EF6               	movwf	tblptrl,c
   232   0015C8  0E15               	movlw	high __pidataCOMRAM
   233   0015CA  6EF7               	movwf	tblptrh,c
   234   0015CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   235   0015CE  6EF8               	movwf	tblptru,c
   236   0015D0  EE00  F001         	lfsr	0,__pdataCOMRAM
   237   0015D4  EE10 F03B          	lfsr	1,59
   238   0015D8                     copy_data0:
   239   0015D8  0009               	tblrd		*+
   240   0015DA  CFF5 FFEE          	movff	tablat,postinc0
   241   0015DE  50E5               	movf	postdec1,w,c
   242   0015E0  50E1               	movf	fsr1l,w,c
   243   0015E2  E1FA               	bnz	copy_data0
   244                           
   245                           ; Clear objects allocated to COMRAM (37 bytes)
   246   0015E4  EE00  F03C         	lfsr	0,__pbssCOMRAM
   247   0015E8  0E25               	movlw	37
   248   0015EA                     clear_0:
   249   0015EA  6AEE               	clrf	postinc0,c
   250   0015EC  06E8               	decf	wreg,f,c
   251   0015EE  E1FD               	bnz	clear_0
   252   0015F0                     end_of_initialization:
   253                           	callstack 0
   254   0015F0                     __end_of__initialization:
   255                           	callstack 0
   256   0015F0  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   257   0015F2  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   258   0015F4  0100               	movlb	0
   259   0015F6  EF36  F00A         	goto	_main	;jump to C main() function
   260                           
   261                           	psect	bssCOMRAM
   262   00003C                     __pbssCOMRAM:
   263                           	callstack 0
   264   00003C                     _RB7_Interrupt_Handler_Low:
   265                           	callstack 0
   266   00003C                     	ds	2
   267   00003E                     _RB7_Interrupt_Handler_High:
   268                           	callstack 0
   269   00003E                     	ds	2
   270   000040                     _RB6_Interrupt_Handler_Low:
   271                           	callstack 0
   272   000040                     	ds	2
   273   000042                     _RB6_Interrupt_Handler_High:
   274                           	callstack 0
   275   000042                     	ds	2
   276   000044                     _RB5_Interrupt_Handler_Low:
   277                           	callstack 0
   278   000044                     	ds	2
   279   000046                     _RB5_Interrupt_Handler_High:
   280                           	callstack 0
   281   000046                     	ds	2
   282   000048                     _RB4_Interrupt_Handler_Low:
   283                           	callstack 0
   284   000048                     	ds	2
   285   00004A                     _RB4_Interrupt_Handler_High:
   286                           	callstack 0
   287   00004A                     	ds	2
   288   00004C                     _INT2_Interrupt_Handler:
   289                           	callstack 0
   290   00004C                     	ds	2
   291   00004E                     _INT1_Interrupt_Handler:
   292                           	callstack 0
   293   00004E                     	ds	2
   294   000050                     _INT0_Interrupt_Handler:
   295                           	callstack 0
   296   000050                     	ds	2
   297   000052                     Relay_off@F3490:
   298                           	callstack 0
   299   000052                     	ds	1
   300   000053                     Relay_on@F3485:
   301                           	callstack 0
   302   000053                     	ds	1
   303   000054                     Relay_initialize@F3480:
   304                           	callstack 0
   305   000054                     	ds	1
   306   000055                     led_toggle_status@F3497:
   307                           	callstack 0
   308   000055                     	ds	1
   309   000056                     led_turn_off@F3492:
   310                           	callstack 0
   311   000056                     	ds	1
   312   000057                     led_turn_on@F3487:
   313                           	callstack 0
   314   000057                     	ds	1
   315   000058                     led_intialize@F3482:
   316                           	callstack 0
   317   000058                     	ds	1
   318   000059                     _re_4:
   319                           	callstack 0
   320   000059                     	ds	2
   321   00005B                     _re_3:
   322                           	callstack 0
   323   00005B                     	ds	2
   324   00005D                     _re_2:
   325                           	callstack 0
   326   00005D                     	ds	2
   327   00005F                     _re_1:
   328                           	callstack 0
   329   00005F                     	ds	2
   330                           
   331                           	psect	dataCOMRAM
   332   000001                     __pdataCOMRAM:
   333                           	callstack 0
   334   000001                     _port_registers:
   335                           	callstack 0
   336   000001                     	ds	10
   337   00000B                     _lat_registers:
   338                           	callstack 0
   339   00000B                     	ds	10
   340   000015                     _tris_registers:
   341                           	callstack 0
   342   000015                     	ds	10
   343   00001F                     _ret:
   344                           	callstack 0
   345   00001F                     	ds	1
   346   000020                     _RB7_f:
   347                           	callstack 0
   348   000020                     	ds	1
   349   000021                     _RB6_f:
   350                           	callstack 0
   351   000021                     	ds	1
   352   000022                     _RB5_f:
   353                           	callstack 0
   354   000022                     	ds	1
   355   000023                     _RB4_f:
   356                           	callstack 0
   357   000023                     	ds	1
   358   000024                     _adc_4:
   359                           	callstack 0
   360   000024                     	ds	6
   361   00002A                     _adc_3:
   362                           	callstack 0
   363   00002A                     	ds	6
   364   000030                     _adc_2:
   365                           	callstack 0
   366   000030                     	ds	6
   367   000036                     _adc_1:
   368                           	callstack 0
   369   000036                     	ds	6
   370                           
   371                           	psect	cstackCOMRAM
   372   000061                     __pcstackCOMRAM:
   373                           	callstack 0
   374   000061                     RB4_ISR@source:
   375                           	callstack 0
   376   000061                     RB5_ISR@source:
   377                           	callstack 0
   378   000061                     RB6_ISR@source:
   379                           	callstack 0
   380   000061                     RB7_ISR@source:
   381                           	callstack 0
   382                           
   383                           ; 1 bytes @ 0x0
   384   000061                     	ds	1
   385   000062                     ??_adc_input_channel_port_configure:
   386   000062                     ADC_Start_Conversion@adc:
   387                           	callstack 0
   388   000062                     ADC_Is_Conversion_Done@adc:
   389                           	callstack 0
   390   000062                     ADC_Get_Conversion_Result@adc:
   391                           	callstack 0
   392   000062                     adc_select_result_format@adc:
   393                           	callstack 0
   394   000062                     adc_select_voltage_ref@adc:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0x1
   398   000062                     	ds	1
   399   000063                     ADC_Start_Conversion@ret:
   400                           	callstack 0
   401   000063                     ADC_Is_Conversion_Done@conversion_status:
   402                           	callstack 0
   403   000063                     ADC_Get_Conversion_Result@result:
   404                           	callstack 0
   405                           
   406                           ; 1 bytes @ 0x2
   407   000063                     	ds	1
   408   000064                     ??_ADC_Get_Conversion_Result:
   409   000064                     ADC_Is_Conversion_Done@ret:
   410                           	callstack 0
   411   000064                     adc_input_channel_port_configure@channel:
   412                           	callstack 0
   413                           
   414                           ; 1 bytes @ 0x3
   415   000064                     	ds	1
   416   000065                     ADC_Init@adc:
   417                           	callstack 0
   418   000065                     ADC_Select_Channel@adc:
   419                           	callstack 0
   420                           
   421                           ; 1 bytes @ 0x4
   422   000065                     	ds	1
   423   000066                     ??_ADC_Init:
   424   000066                     ADC_Select_Channel@channel:
   425                           	callstack 0
   426   000066                     ADC_Get_Conversion_Result@ret:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0x5
   430   000066                     	ds	1
   431   000067                     ??_ADC_Select_Channel:
   432   000067                     ADC_Init@ret:
   433                           	callstack 0
   434                           
   435                           ; 1 bytes @ 0x6
   436   000067                     	ds	1
   437   000068                     ADC_Select_Channel@ret:
   438                           	callstack 0
   439                           
   440                           ; 1 bytes @ 0x7
   441   000068                     	ds	1
   442   000069                     ADC_Get_Conversion_Blocking@adc:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x8
   446   000069                     	ds	1
   447   00006A                     ADC_Get_Conversion_Blocking@channel:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x9
   451   00006A                     	ds	1
   452   00006B                     ADC_Get_Conversion_Blocking@result:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0xA
   456   00006B                     	ds	1
   457   00006C                     ADC_Get_Conversion_Blocking@conversion_status:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0xB
   461   00006C                     	ds	1
   462   00006D                     ADC_Get_Conversion_Blocking@ret:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0xC
   466   00006D                     	ds	1
   467   00006E                     
   468                           ; 1 bytes @ 0xD
   469 ;;
   470 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   471 ;;
   472 ;; *************** function _main *****************
   473 ;; Defined at:
   474 ;;		line 42 in file "app.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  2  836[None  ] int 
   481 ;; Registers used:
   482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   492 ;;Total ram usage:        0 bytes
   493 ;; Hardware stack levels required when called: 5
   494 ;; This function calls:
   495 ;;		_ADC_Get_Conversion_Blocking
   496 ;;		_Application_initialize
   497 ;; This function is called by:
   498 ;;		Startup code after reset
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text0
   503   00146C                     __ptext0:
   504                           	callstack 0
   505   00146C                     _main:
   506                           	callstack 26
   507   00146C                     
   508                           ;app.c: 44:     Application_initialize();
   509   00146C  ECFD  F00A         	call	_Application_initialize	;wreg free
   510   001470                     l837:
   511                           
   512                           ;app.c: 47:         ret = ADC_Get_Conversion_Blocking(&adc_1, ADC_CHANNEL_AN0, &re_1);
   513   001470  0E36               	movlw	low _adc_1
   514   001472  6E69               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   515   001474  0E00               	movlw	0
   516   001476  6E6A               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   517   001478  0E5F               	movlw	low _re_1
   518   00147A  6E6B               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   519   00147C  ECFD  F009         	call	_ADC_Get_Conversion_Blocking	;wreg free
   520   001480  6E1F               	movwf	_ret^0,c
   521                           
   522                           ;app.c: 48:         ret = ADC_Get_Conversion_Blocking(&adc_2, ADC_CHANNEL_AN1, &re_2);
   523   001482  0E30               	movlw	low _adc_2
   524   001484  6E69               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   525   001486  0E01               	movlw	1
   526   001488  6E6A               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   527   00148A  0E5D               	movlw	low _re_2
   528   00148C  6E6B               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   529   00148E  ECFD  F009         	call	_ADC_Get_Conversion_Blocking	;wreg free
   530   001492  6E1F               	movwf	_ret^0,c
   531                           
   532                           ;app.c: 49:         ret = ADC_Get_Conversion_Blocking(&adc_3, ADC_CHANNEL_AN2, &re_3);
   533   001494  0E2A               	movlw	low _adc_3
   534   001496  6E69               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   535   001498  0E02               	movlw	2
   536   00149A  6E6A               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   537   00149C  0E5B               	movlw	low _re_3
   538   00149E  6E6B               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   539   0014A0  ECFD  F009         	call	_ADC_Get_Conversion_Blocking	;wreg free
   540   0014A4  6E1F               	movwf	_ret^0,c
   541                           
   542                           ;app.c: 50:         ret = ADC_Get_Conversion_Blocking(&adc_4, ADC_CHANNEL_AN3, &re_4);
   543   0014A6  0E24               	movlw	low _adc_4
   544   0014A8  6E69               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   545   0014AA  0E03               	movlw	3
   546   0014AC  6E6A               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   547   0014AE  0E59               	movlw	low _re_4
   548   0014B0  6E6B               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   549   0014B2  ECFD  F009         	call	_ADC_Get_Conversion_Blocking	;wreg free
   550   0014B6  6E1F               	movwf	_ret^0,c
   551   0014B8  EF38  F00A         	goto	l837
   552   0014BC  EF07  F000         	goto	start
   553   0014C0                     __end_of_main:
   554                           	callstack 0
   555                           
   556 ;; *************** function _Application_initialize *****************
   557 ;; Defined at:
   558 ;;		line 56 in file "app.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;		None
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;Total ram usage:        0 bytes
   577 ;; Hardware stack levels used: 1
   578 ;; Hardware stack levels required when called: 4
   579 ;; This function calls:
   580 ;;		_ADC_Init
   581 ;;		_ecu_layer_initialize
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text1
   588   0015FA                     __ptext1:
   589                           	callstack 0
   590   0015FA                     _Application_initialize:
   591                           	callstack 26
   592   0015FA                     
   593                           ;app.c: 57:     ecu_layer_initialize();
   594   0015FA  EC70  F00B         	call	_ecu_layer_initialize	;wreg free
   595   0015FE                     
   596                           ;app.c: 58:     ret = ADC_Init(&adc_1);
   597   0015FE  0E36               	movlw	low _adc_1
   598   001600  6E65               	movwf	ADC_Init@adc^0,c
   599   001602  ECB2  F009         	call	_ADC_Init	;wreg free
   600   001606  6E1F               	movwf	_ret^0,c
   601   001608                     
   602                           ;app.c: 59:     ret = ADC_Init(&adc_2);
   603   001608  0E30               	movlw	low _adc_2
   604   00160A  6E65               	movwf	ADC_Init@adc^0,c
   605   00160C  ECB2  F009         	call	_ADC_Init	;wreg free
   606   001610  6E1F               	movwf	_ret^0,c
   607   001612                     
   608                           ;app.c: 60:     ret = ADC_Init(&adc_3);
   609   001612  0E2A               	movlw	low _adc_3
   610   001614  6E65               	movwf	ADC_Init@adc^0,c
   611   001616  ECB2  F009         	call	_ADC_Init	;wreg free
   612   00161A  6E1F               	movwf	_ret^0,c
   613   00161C                     
   614                           ;app.c: 61:     ret = ADC_Init(&adc_4);
   615   00161C  0E24               	movlw	low _adc_4
   616   00161E  6E65               	movwf	ADC_Init@adc^0,c
   617   001620  ECB2  F009         	call	_ADC_Init	;wreg free
   618   001624  6E1F               	movwf	_ret^0,c
   619   001626  0012               	return		;funcret
   620   001628                     __end_of_Application_initialize:
   621                           	callstack 0
   622                           
   623 ;; *************** function _ecu_layer_initialize *****************
   624 ;; Defined at:
   625 ;;		line 11 in file "ECU_LAYER/ecu_layer_init.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  ret             1    0        unsigned char 
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg, status,2
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   643 ;;Total ram usage:        0 bytes
   644 ;; Hardware stack levels used: 1
   645 ;; Hardware stack levels required when called: 2
   646 ;; This function calls:
   647 ;;		Nothing
   648 ;; This function is called by:
   649 ;;		_Application_initialize
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text2
   654   0016E0                     __ptext2:
   655                           	callstack 0
   656   0016E0                     _ecu_layer_initialize:
   657                           	callstack 27
   658   0016E0  0012               	return		;funcret
   659   0016E2                     __end_of_ecu_layer_initialize:
   660                           	callstack 0
   661                           
   662 ;; *************** function _ADC_Init *****************
   663 ;; Defined at:
   664 ;;		line 21 in file "MCAL_LAYER/ADC/hal_adc.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  adc             1    4[COMRAM] PTR const struct .
   667 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  ret             1    6[COMRAM] unsigned char 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      unsigned char 
   672 ;; Registers used:
   673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   679 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;Total ram usage:        3 bytes
   684 ;; Hardware stack levels used: 1
   685 ;; Hardware stack levels required when called: 3
   686 ;; This function calls:
   687 ;;		_adc_input_channel_port_configure
   688 ;;		_adc_select_result_format
   689 ;;		_adc_select_voltage_ref
   690 ;; This function is called by:
   691 ;;		_Application_initialize
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text3
   696   001364                     __ptext3:
   697                           	callstack 0
   698   001364                     _ADC_Init:
   699                           	callstack 26
   700   001364                     
   701                           ;MCAL_LAYER/ADC/hal_adc.c: 22:     Std_ReturnType ret = (Std_ReturnType)0X01;
   702   001364  0E01               	movlw	1
   703   001366  6E67               	movwf	ADC_Init@ret^0,c
   704                           
   705                           ;MCAL_LAYER/ADC/hal_adc.c: 25:     if (((void*)0) == adc) {
   706   001368  5065               	movf	ADC_Init@adc^0,w,c
   707   00136A  A4D8               	btfss	status,2,c
   708   00136C  EFBA  F009         	goto	u1671
   709   001370  EFBC  F009         	goto	u1670
   710   001374                     u1671:
   711   001374  EFC0  F009         	goto	l345
   712   001378                     u1670:
   713   001378                     
   714                           ;MCAL_LAYER/ADC/hal_adc.c: 26:         ret = (Std_ReturnType)0X00;
   715   001378  0E00               	movlw	0
   716   00137A  6E67               	movwf	ADC_Init@ret^0,c
   717                           
   718                           ;MCAL_LAYER/ADC/hal_adc.c: 27:     } else {
   719   00137C  EFFB  F009         	goto	l2978
   720   001380                     l345:
   721                           
   722                           ;MCAL_LAYER/ADC/hal_adc.c: 29:         (ADCON0bits.ADON = 0);
   723   001380  90C2               	bcf	194,0,c	;volatile
   724   001382                     
   725                           ;MCAL_LAYER/ADC/hal_adc.c: 32:         ADCON2bits.ACQT = adc->adc_acquisition;
   726   001382  5065               	movf	ADC_Init@adc^0,w,c
   727   001384  6ED9               	movwf	fsr2l,c
   728   001386  6ADA               	clrf	fsr2h,c
   729   001388  0E02               	movlw	2
   730   00138A  26D9               	addwf	fsr2l,f,c
   731   00138C  50DF               	movf	indf2,w,c
   732   00138E  6E66               	movwf	??_ADC_Init^0,c
   733   001390  4666               	rlncf	??_ADC_Init^0,f,c
   734   001392  4666               	rlncf	??_ADC_Init^0,f,c
   735   001394  4666               	rlncf	??_ADC_Init^0,f,c
   736   001396  50C0               	movf	192,w,c	;volatile
   737   001398  1866               	xorwf	??_ADC_Init^0,w,c
   738   00139A  0BC7               	andlw	-57
   739   00139C  1866               	xorwf	??_ADC_Init^0,w,c
   740   00139E  6EC0               	movwf	192,c	;volatile
   741                           
   742                           ;MCAL_LAYER/ADC/hal_adc.c: 33:         ADCON2bits.ADCS = adc->adc_conversion_clock;
   743   0013A0  5065               	movf	ADC_Init@adc^0,w,c
   744   0013A2  6ED9               	movwf	fsr2l,c
   745   0013A4  6ADA               	clrf	fsr2h,c
   746   0013A6  0E03               	movlw	3
   747   0013A8  26D9               	addwf	fsr2l,f,c
   748   0013AA  50DF               	movf	indf2,w,c
   749   0013AC  6E66               	movwf	??_ADC_Init^0,c
   750   0013AE  50C0               	movf	192,w,c	;volatile
   751   0013B0  1866               	xorwf	??_ADC_Init^0,w,c
   752   0013B2  0BF8               	andlw	-8
   753   0013B4  1866               	xorwf	??_ADC_Init^0,w,c
   754   0013B6  6EC0               	movwf	192,c	;volatile
   755                           
   756                           ;MCAL_LAYER/ADC/hal_adc.c: 36:         ADCON0bits.CHS = adc->adc_channel;
   757   0013B8  5065               	movf	ADC_Init@adc^0,w,c
   758   0013BA  6ED9               	movwf	fsr2l,c
   759   0013BC  6ADA               	clrf	fsr2h,c
   760   0013BE  0E04               	movlw	4
   761   0013C0  26D9               	addwf	fsr2l,f,c
   762   0013C2  50DF               	movf	indf2,w,c
   763   0013C4  6E66               	movwf	??_ADC_Init^0,c
   764   0013C6  4666               	rlncf	??_ADC_Init^0,f,c
   765   0013C8  4666               	rlncf	??_ADC_Init^0,f,c
   766   0013CA  50C2               	movf	194,w,c	;volatile
   767   0013CC  1866               	xorwf	??_ADC_Init^0,w,c
   768   0013CE  0BC3               	andlw	-61
   769   0013D0  1866               	xorwf	??_ADC_Init^0,w,c
   770   0013D2  6EC2               	movwf	194,c	;volatile
   771   0013D4                     
   772                           ;MCAL_LAYER/ADC/hal_adc.c: 37:         adc_input_channel_port_configure(adc->adc_channel
      +                          );
   773   0013D4  5065               	movf	ADC_Init@adc^0,w,c
   774   0013D6  6ED9               	movwf	fsr2l,c
   775   0013D8  6ADA               	clrf	fsr2h,c
   776   0013DA  0E04               	movlw	4
   777   0013DC  26D9               	addwf	fsr2l,f,c
   778   0013DE  50DF               	movf	indf2,w,c
   779   0013E0  ECEC  F008         	call	_adc_input_channel_port_configure
   780   0013E4                     
   781                           ;MCAL_LAYER/ADC/hal_adc.c: 40:         adc_select_result_format(adc);
   782   0013E4  C065  F062         	movff	ADC_Init@adc,adc_select_result_format@adc
   783   0013E8  EC14  F00B         	call	_adc_select_result_format	;wreg free
   784   0013EC                     
   785                           ;MCAL_LAYER/ADC/hal_adc.c: 41:         adc_select_voltage_ref(adc);
   786   0013EC  C065  F062         	movff	ADC_Init@adc,adc_select_voltage_ref@adc
   787   0013F0  EC85  F00A         	call	_adc_select_voltage_ref	;wreg free
   788   0013F4                     
   789                           ;MCAL_LAYER/ADC/hal_adc.c: 44:         (ADCON0bits.ADON = 1);
   790   0013F4  80C2               	bsf	194,0,c	;volatile
   791   0013F6                     l2978:
   792                           
   793                           ;MCAL_LAYER/ADC/hal_adc.c: 47:     return ret;
   794   0013F6  5067               	movf	ADC_Init@ret^0,w,c
   795   0013F8  0012               	return		;funcret
   796   0013FA                     __end_of_ADC_Init:
   797                           	callstack 0
   798                           
   799 ;; *************** function _adc_select_voltage_ref *****************
   800 ;; Defined at:
   801 ;;		line 249 in file "MCAL_LAYER/ADC/hal_adc.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  adc             1    1[COMRAM] PTR const struct .
   804 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   816 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;Total ram usage:        1 bytes
   821 ;; Hardware stack levels used: 1
   822 ;; Hardware stack levels required when called: 2
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_ADC_Init
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text4
   831   00150A                     __ptext4:
   832                           	callstack 0
   833   00150A                     _adc_select_voltage_ref:
   834                           	callstack 26
   835   00150A                     
   836                           ;MCAL_LAYER/ADC/hal_adc.c: 250:     if (0X01U == adc->voltage_ref) {
   837   00150A  5062               	movf	adc_select_voltage_ref@adc^0,w,c
   838   00150C  6ED9               	movwf	fsr2l,c
   839   00150E  6ADA               	clrf	fsr2h,c
   840   001510  0E05               	movlw	5
   841   001512  26D9               	addwf	fsr2l,f,c
   842   001514  A0DF               	btfss	indf2,0,c
   843   001516  EF8F  F00A         	goto	u1651
   844   00151A  EF91  F00A         	goto	u1650
   845   00151E                     u1651:
   846   00151E  EF95  F00A         	goto	l2962
   847   001522                     u1650:
   848   001522  8AC1               	bsf	193,5,c	;volatile
   849   001524  88C1               	bsf	193,4,c	;volatile
   850   001526  EFA7  F00A         	goto	l427
   851   00152A                     l2962:
   852   00152A  5062               	movf	adc_select_voltage_ref@adc^0,w,c
   853   00152C  6ED9               	movwf	fsr2l,c
   854   00152E  6ADA               	clrf	fsr2h,c
   855   001530  0E05               	movlw	5
   856   001532  26D9               	addwf	fsr2l,f,c
   857   001534  B0DF               	btfsc	indf2,0,c
   858   001536  EF9F  F00A         	goto	u1661
   859   00153A  EFA1  F00A         	goto	u1660
   860   00153E                     u1661:
   861   00153E  EFA5  F00A         	goto	l425
   862   001542                     u1660:
   863   001542  9AC1               	bcf	193,5,c	;volatile
   864   001544  98C1               	bcf	193,4,c	;volatile
   865   001546  EFA7  F00A         	goto	l427
   866   00154A                     l425:
   867   00154A  9AC1               	bcf	193,5,c	;volatile
   868   00154C  98C1               	bcf	193,4,c	;volatile
   869   00154E                     l427:
   870   00154E  0012               	return		;funcret
   871   001550                     __end_of_adc_select_voltage_ref:
   872                           	callstack 0
   873                           
   874 ;; *************** function _adc_select_result_format *****************
   875 ;; Defined at:
   876 ;;		line 235 in file "MCAL_LAYER/ADC/hal_adc.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  adc             1    1[COMRAM] PTR const struct .
   879 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   891 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;Total ram usage:        1 bytes
   896 ;; Hardware stack levels used: 1
   897 ;; Hardware stack levels required when called: 2
   898 ;; This function calls:
   899 ;;		Nothing
   900 ;; This function is called by:
   901 ;;		_ADC_Init
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text5
   906   001628                     __ptext5:
   907                           	callstack 0
   908   001628                     _adc_select_result_format:
   909                           	callstack 26
   910   001628                     
   911                           ;MCAL_LAYER/ADC/hal_adc.c: 236:     if (adc->result_format) {
   912   001628  5062               	movf	adc_select_result_format@adc^0,w,c
   913   00162A  6ED9               	movwf	fsr2l,c
   914   00162C  6ADA               	clrf	fsr2h,c
   915   00162E  0E05               	movlw	5
   916   001630  26D9               	addwf	fsr2l,f,c
   917   001632  A2DF               	btfss	indf2,1,c
   918   001634  EF1E  F00B         	goto	u1641
   919   001638  EF20  F00B         	goto	u1640
   920   00163C                     u1641:
   921   00163C  EF23  F00B         	goto	l412
   922   001640                     u1640:
   923   001640                     
   924                           ;MCAL_LAYER/ADC/hal_adc.c: 237:         (ADCON2bits.ADFM=1);
   925   001640  8EC0               	bsf	192,7,c	;volatile
   926                           
   927                           ;MCAL_LAYER/ADC/hal_adc.c: 238:     } else {
   928   001642  EF24  F00B         	goto	l414
   929   001646                     l412:
   930                           
   931                           ;MCAL_LAYER/ADC/hal_adc.c: 239:         (ADCON2bits.ADFM=0);
   932   001646  9EC0               	bcf	192,7,c	;volatile
   933   001648                     l414:
   934   001648  0012               	return		;funcret
   935   00164A                     __end_of_adc_select_result_format:
   936                           	callstack 0
   937                           
   938 ;; *************** function _ADC_Get_Conversion_Blocking *****************
   939 ;; Defined at:
   940 ;;		line 168 in file "MCAL_LAYER/ADC/hal_adc.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  adc             1    8[COMRAM] PTR const struct .
   943 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
   944 ;;  channel         1    9[COMRAM] enum E3462
   945 ;;  result          1   10[COMRAM] PTR unsigned short 
   946 ;;		 -> re_4(2), re_3(2), re_2(2), re_1(2), 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;  ret             1   12[COMRAM] unsigned char 
   949 ;;  conversion_s    1   11[COMRAM] unsigned char 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      unsigned char 
   952 ;; Registers used:
   953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   959 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;Total ram usage:        5 bytes
   964 ;; Hardware stack levels used: 1
   965 ;; Hardware stack levels required when called: 4
   966 ;; This function calls:
   967 ;;		_ADC_Get_Conversion_Result
   968 ;;		_ADC_Is_Conversion_Done
   969 ;;		_ADC_Select_Channel
   970 ;;		_ADC_Start_Conversion
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text6
   977   0013FA                     __ptext6:
   978                           	callstack 0
   979   0013FA                     _ADC_Get_Conversion_Blocking:
   980                           	callstack 26
   981   0013FA                     
   982                           ;MCAL_LAYER/ADC/hal_adc.c: 169:     Std_ReturnType ret = (Std_ReturnType)0X01;
   983   0013FA  0E01               	movlw	1
   984   0013FC  6E6D               	movwf	ADC_Get_Conversion_Blocking@ret^0,c
   985                           
   986                           ;MCAL_LAYER/ADC/hal_adc.c: 170:     uint8_t conversion_status;;MCAL_LAYER/ADC/hal_adc.c:
      +                           173:     if (((void*)0) == adc || ((void*)0) == result) {
   987   0013FE  5069               	movf	ADC_Get_Conversion_Blocking@adc^0,w,c
   988   001400  B4D8               	btfsc	status,2,c
   989   001402  EF05  F00A         	goto	u1781
   990   001406  EF07  F00A         	goto	u1780
   991   00140A                     u1781:
   992   00140A  EF0F  F00A         	goto	l3038
   993   00140E                     u1780:
   994   00140E  506B               	movf	ADC_Get_Conversion_Blocking@result^0,w,c
   995   001410  A4D8               	btfss	status,2,c
   996   001412  EF0D  F00A         	goto	u1791
   997   001416  EF0F  F00A         	goto	u1790
   998   00141A                     u1791:
   999   00141A  EF13  F00A         	goto	l3040
  1000   00141E                     u1790:
  1001   00141E                     l3038:
  1002                           
  1003                           ;MCAL_LAYER/ADC/hal_adc.c: 174:         ret = (Std_ReturnType)0X00;
  1004   00141E  0E00               	movlw	0
  1005   001420  6E6D               	movwf	ADC_Get_Conversion_Blocking@ret^0,c
  1006                           
  1007                           ;MCAL_LAYER/ADC/hal_adc.c: 175:     } else {
  1008   001422  EF34  F00A         	goto	l3046
  1009   001426                     l3040:
  1010                           
  1011                           ;MCAL_LAYER/ADC/hal_adc.c: 177:         ret &= ADC_Select_Channel(adc, channel);
  1012   001426  C069  F065         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Select_Channel@adc
  1013   00142A  C06A  F066         	movff	ADC_Get_Conversion_Blocking@channel,ADC_Select_Channel@channel
  1014   00142E  ECC6  F00A         	call	_ADC_Select_Channel	;wreg free
  1015   001432  166D               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1016                           
  1017                           ;MCAL_LAYER/ADC/hal_adc.c: 178:         ret &= ADC_Start_Conversion(adc);
  1018   001434  C069  F062         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Start_Conversion@adc
  1019   001438  EC25  F00B         	call	_ADC_Start_Conversion	;wreg free
  1020   00143C  166D               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1021   00143E                     
  1022                           ;MCAL_LAYER/ADC/hal_adc.c: 179:         ret &= ADC_Is_Conversion_Done(adc, &conversion_s
      +                          tatus);
  1023   00143E  C069  F062         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Is_Conversion_Done@adc
  1024   001442  0E6C               	movlw	low ADC_Get_Conversion_Blocking@conversion_status
  1025   001444  6E63               	movwf	ADC_Is_Conversion_Done@conversion_status^0,c
  1026   001446  EC60  F00A         	call	_ADC_Is_Conversion_Done	;wreg free
  1027   00144A  166D               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1028   00144C                     l387:
  1029   00144C  B2C2               	btfsc	194,1,c	;volatile
  1030   00144E  EF2B  F00A         	goto	u1801
  1031   001452  EF2D  F00A         	goto	u1800
  1032   001456                     u1801:
  1033   001456  EF26  F00A         	goto	l387
  1034   00145A                     u1800:
  1035   00145A                     
  1036                           ;MCAL_LAYER/ADC/hal_adc.c: 185:         ret &= ADC_Get_Conversion_Result(adc, result);
  1037   00145A  C069  F062         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Get_Conversion_Result@adc
  1038   00145E  C06B  F063         	movff	ADC_Get_Conversion_Blocking@result,ADC_Get_Conversion_Result@result
  1039   001462  EC58  F009         	call	_ADC_Get_Conversion_Result	;wreg free
  1040   001466  166D               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1041   001468                     l3046:
  1042                           
  1043                           ;MCAL_LAYER/ADC/hal_adc.c: 188:     return ret;
  1044   001468  506D               	movf	ADC_Get_Conversion_Blocking@ret^0,w,c
  1045   00146A  0012               	return		;funcret
  1046   00146C                     __end_of_ADC_Get_Conversion_Blocking:
  1047                           	callstack 0
  1048                           
  1049 ;; *************** function _ADC_Start_Conversion *****************
  1050 ;; Defined at:
  1051 ;;		line 98 in file "MCAL_LAYER/ADC/hal_adc.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  adc             1    1[COMRAM] PTR const struct .
  1054 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  ret             1    2[COMRAM] unsigned char 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      unsigned char 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1066 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;Total ram usage:        2 bytes
  1071 ;; Hardware stack levels used: 1
  1072 ;; Hardware stack levels required when called: 2
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		_ADC_Get_Conversion_Blocking
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text7
  1081   00164A                     __ptext7:
  1082                           	callstack 0
  1083   00164A                     _ADC_Start_Conversion:
  1084                           	callstack 27
  1085   00164A                     
  1086                           ;MCAL_LAYER/ADC/hal_adc.c: 99:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1087   00164A  0E01               	movlw	1
  1088   00164C  6E63               	movwf	ADC_Start_Conversion@ret^0,c
  1089                           
  1090                           ;MCAL_LAYER/ADC/hal_adc.c: 102:     if (((void*)0) == adc) {
  1091   00164E  5062               	movf	ADC_Start_Conversion@adc^0,w,c
  1092   001650  A4D8               	btfss	status,2,c
  1093   001652  EF2D  F00B         	goto	u1691
  1094   001656  EF2F  F00B         	goto	u1690
  1095   00165A                     u1691:
  1096   00165A  EF33  F00B         	goto	l360
  1097   00165E                     u1690:
  1098   00165E                     
  1099                           ;MCAL_LAYER/ADC/hal_adc.c: 103:         ret = (Std_ReturnType)0X00;
  1100   00165E  0E00               	movlw	0
  1101   001660  6E63               	movwf	ADC_Start_Conversion@ret^0,c
  1102                           
  1103                           ;MCAL_LAYER/ADC/hal_adc.c: 104:     } else {
  1104   001662  EF34  F00B         	goto	l2998
  1105   001666                     l360:
  1106                           
  1107                           ;MCAL_LAYER/ADC/hal_adc.c: 106:         (ADCON0bits.GO_nDONE=1);
  1108   001666  82C2               	bsf	194,1,c	;volatile
  1109   001668                     l2998:
  1110                           
  1111                           ;MCAL_LAYER/ADC/hal_adc.c: 109:     return ret;
  1112   001668  5063               	movf	ADC_Start_Conversion@ret^0,w,c
  1113   00166A  0012               	return		;funcret
  1114   00166C                     __end_of_ADC_Start_Conversion:
  1115                           	callstack 0
  1116                           
  1117 ;; *************** function _ADC_Select_Channel *****************
  1118 ;; Defined at:
  1119 ;;		line 77 in file "MCAL_LAYER/ADC/hal_adc.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  adc             1    4[COMRAM] PTR const struct .
  1122 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
  1123 ;;  channel         1    5[COMRAM] enum E3462
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  ret             1    7[COMRAM] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      unsigned char 
  1128 ;; Registers used:
  1129 ;;		wreg, status,2, status,0, cstack
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;Total ram usage:        4 bytes
  1140 ;; Hardware stack levels used: 1
  1141 ;; Hardware stack levels required when called: 3
  1142 ;; This function calls:
  1143 ;;		_adc_input_channel_port_configure
  1144 ;; This function is called by:
  1145 ;;		_ADC_Get_Conversion_Blocking
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text8
  1150   00158C                     __ptext8:
  1151                           	callstack 0
  1152   00158C                     _ADC_Select_Channel:
  1153                           	callstack 26
  1154   00158C                     
  1155                           ;MCAL_LAYER/ADC/hal_adc.c: 78:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1156   00158C  0E01               	movlw	1
  1157   00158E  6E68               	movwf	ADC_Select_Channel@ret^0,c
  1158                           
  1159                           ;MCAL_LAYER/ADC/hal_adc.c: 81:     if (((void*)0) == adc) {
  1160   001590  5065               	movf	ADC_Select_Channel@adc^0,w,c
  1161   001592  A4D8               	btfss	status,2,c
  1162   001594  EFCE  F00A         	goto	u1681
  1163   001598  EFD0  F00A         	goto	u1680
  1164   00159C                     u1681:
  1165   00159C  EFD4  F00A         	goto	l2986
  1166   0015A0                     u1680:
  1167   0015A0                     
  1168                           ;MCAL_LAYER/ADC/hal_adc.c: 82:         ret = (Std_ReturnType)0X00;
  1169   0015A0  0E00               	movlw	0
  1170   0015A2  6E68               	movwf	ADC_Select_Channel@ret^0,c
  1171                           
  1172                           ;MCAL_LAYER/ADC/hal_adc.c: 83:     } else {
  1173   0015A4  EFE0  F00A         	goto	l2990
  1174   0015A8                     l2986:
  1175                           
  1176                           ;MCAL_LAYER/ADC/hal_adc.c: 85:         ADCON0bits.CHS = channel;
  1177   0015A8  C066  F067         	movff	ADC_Select_Channel@channel,??_ADC_Select_Channel
  1178   0015AC  4667               	rlncf	??_ADC_Select_Channel^0,f,c
  1179   0015AE  4667               	rlncf	??_ADC_Select_Channel^0,f,c
  1180   0015B0  50C2               	movf	194,w,c	;volatile
  1181   0015B2  1867               	xorwf	??_ADC_Select_Channel^0,w,c
  1182   0015B4  0BC3               	andlw	-61
  1183   0015B6  1867               	xorwf	??_ADC_Select_Channel^0,w,c
  1184   0015B8  6EC2               	movwf	194,c	;volatile
  1185   0015BA                     
  1186                           ;MCAL_LAYER/ADC/hal_adc.c: 86:         adc_input_channel_port_configure(channel);
  1187   0015BA  5066               	movf	ADC_Select_Channel@channel^0,w,c
  1188   0015BC  ECEC  F008         	call	_adc_input_channel_port_configure
  1189   0015C0                     l2990:
  1190                           
  1191                           ;MCAL_LAYER/ADC/hal_adc.c: 89:     return ret;
  1192   0015C0  5068               	movf	ADC_Select_Channel@ret^0,w,c
  1193   0015C2  0012               	return		;funcret
  1194   0015C4                     __end_of_ADC_Select_Channel:
  1195                           	callstack 0
  1196                           
  1197 ;; *************** function _adc_input_channel_port_configure *****************
  1198 ;; Defined at:
  1199 ;;		line 197 in file "MCAL_LAYER/ADC/hal_adc.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  channel         1    wreg     enum E3462
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  channel         1    3[COMRAM] enum E3462
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;Total ram usage:        3 bytes
  1218 ;; Hardware stack levels used: 1
  1219 ;; Hardware stack levels required when called: 2
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_ADC_Init
  1224 ;;		_ADC_Select_Channel
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text9
  1229   0011D8                     __ptext9:
  1230                           	callstack 0
  1231   0011D8                     _adc_input_channel_port_configure:
  1232                           	callstack 26
  1233                           
  1234                           ;incstack = 0
  1235                           ;adc_input_channel_port_configure@channel stored from wreg
  1236   0011D8  6E64               	movwf	adc_input_channel_port_configure@channel^0,c
  1237   0011DA                     
  1238                           ;MCAL_LAYER/ADC/hal_adc.c: 198:     switch (channel) {
  1239   0011DA  EF16  F009         	goto	l1560
  1240   0011DE                     l1534:
  1241   0011DE  8092               	bsf	146,0,c	;volatile
  1242                           
  1243                           ;MCAL_LAYER/ADC/hal_adc.c: 200:             break;
  1244   0011E0  EF57  F009         	goto	l409
  1245   0011E4                     l1536:
  1246   0011E4  8292               	bsf	146,1,c	;volatile
  1247                           
  1248                           ;MCAL_LAYER/ADC/hal_adc.c: 202:             break;
  1249   0011E6  EF57  F009         	goto	l409
  1250   0011EA                     l1538:
  1251   0011EA  8492               	bsf	146,2,c	;volatile
  1252                           
  1253                           ;MCAL_LAYER/ADC/hal_adc.c: 204:             break;
  1254   0011EC  EF57  F009         	goto	l409
  1255   0011F0                     l1540:
  1256   0011F0  8692               	bsf	146,3,c	;volatile
  1257                           
  1258                           ;MCAL_LAYER/ADC/hal_adc.c: 206:             break;
  1259   0011F2  EF57  F009         	goto	l409
  1260   0011F6                     l1542:
  1261   0011F6  8A92               	bsf	146,5,c	;volatile
  1262                           
  1263                           ;MCAL_LAYER/ADC/hal_adc.c: 208:             break;
  1264   0011F8  EF57  F009         	goto	l409
  1265   0011FC                     l1544:
  1266   0011FC  8096               	bsf	150,0,c	;volatile
  1267                           
  1268                           ;MCAL_LAYER/ADC/hal_adc.c: 210:             break;
  1269   0011FE  EF57  F009         	goto	l409
  1270   001202                     l1546:
  1271   001202  8296               	bsf	150,1,c	;volatile
  1272                           
  1273                           ;MCAL_LAYER/ADC/hal_adc.c: 212:             break;
  1274   001204  EF57  F009         	goto	l409
  1275   001208                     l1548:
  1276   001208  8496               	bsf	150,2,c	;volatile
  1277                           
  1278                           ;MCAL_LAYER/ADC/hal_adc.c: 214:             break;
  1279   00120A  EF57  F009         	goto	l409
  1280   00120E                     l1550:
  1281   00120E  8493               	bsf	147,2,c	;volatile
  1282                           
  1283                           ;MCAL_LAYER/ADC/hal_adc.c: 216:             break;
  1284   001210  EF57  F009         	goto	l409
  1285   001214                     l1552:
  1286   001214  8693               	bsf	147,3,c	;volatile
  1287                           
  1288                           ;MCAL_LAYER/ADC/hal_adc.c: 218:             break;
  1289   001216  EF57  F009         	goto	l409
  1290   00121A                     l1554:
  1291   00121A  8293               	bsf	147,1,c	;volatile
  1292                           
  1293                           ;MCAL_LAYER/ADC/hal_adc.c: 220:             break;
  1294   00121C  EF57  F009         	goto	l409
  1295   001220                     l1556:
  1296   001220  8893               	bsf	147,4,c	;volatile
  1297                           
  1298                           ;MCAL_LAYER/ADC/hal_adc.c: 222:             break;
  1299   001222  EF57  F009         	goto	l409
  1300   001226                     l1558:
  1301   001226  8093               	bsf	147,0,c	;volatile
  1302                           
  1303                           ;MCAL_LAYER/ADC/hal_adc.c: 224:             break;
  1304   001228  EF57  F009         	goto	l409
  1305   00122C                     l1560:
  1306   00122C  5064               	movf	adc_input_channel_port_configure@channel^0,w,c
  1307   00122E  6E62               	movwf	??_adc_input_channel_port_configure^0,c
  1308   001230  6A63               	clrf	(??_adc_input_channel_port_configure+1)^0,c
  1309                           
  1310                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1311                           ; Switch size 1, requested type "simple"
  1312                           ; Number of cases is 1, Range of values is 0 to 0
  1313                           ; switch strategies available:
  1314                           ; Name         Instructions Cycles
  1315                           ; simple_byte            4     3 (average)
  1316                           ;	Chosen strategy is simple_byte
  1317   001232  5063               	movf	(??_adc_input_channel_port_configure+1)^0,w,c
  1318   001234  0A00               	xorlw	0	; case 0
  1319   001236  B4D8               	btfsc	status,2,c
  1320   001238  EF20  F009         	goto	l3066
  1321   00123C  EF57  F009         	goto	l409
  1322   001240                     l3066:
  1323                           
  1324                           ; Switch size 1, requested type "simple"
  1325                           ; Number of cases is 13, Range of values is 0 to 12
  1326                           ; switch strategies available:
  1327                           ; Name         Instructions Cycles
  1328                           ; simple_byte           40    21 (average)
  1329                           ;	Chosen strategy is simple_byte
  1330   001240  5062               	movf	??_adc_input_channel_port_configure^0,w,c
  1331   001242  0A00               	xorlw	0	; case 0
  1332   001244  B4D8               	btfsc	status,2,c
  1333   001246  EFEF  F008         	goto	l1534
  1334   00124A  0A01               	xorlw	1	; case 1
  1335   00124C  B4D8               	btfsc	status,2,c
  1336   00124E  EFF2  F008         	goto	l1536
  1337   001252  0A03               	xorlw	3	; case 2
  1338   001254  B4D8               	btfsc	status,2,c
  1339   001256  EFF5  F008         	goto	l1538
  1340   00125A  0A01               	xorlw	1	; case 3
  1341   00125C  B4D8               	btfsc	status,2,c
  1342   00125E  EFF8  F008         	goto	l1540
  1343   001262  0A07               	xorlw	7	; case 4
  1344   001264  B4D8               	btfsc	status,2,c
  1345   001266  EFFB  F008         	goto	l1542
  1346   00126A  0A01               	xorlw	1	; case 5
  1347   00126C  B4D8               	btfsc	status,2,c
  1348   00126E  EFFE  F008         	goto	l1544
  1349   001272  0A03               	xorlw	3	; case 6
  1350   001274  B4D8               	btfsc	status,2,c
  1351   001276  EF01  F009         	goto	l1546
  1352   00127A  0A01               	xorlw	1	; case 7
  1353   00127C  B4D8               	btfsc	status,2,c
  1354   00127E  EF04  F009         	goto	l1548
  1355   001282  0A0F               	xorlw	15	; case 8
  1356   001284  B4D8               	btfsc	status,2,c
  1357   001286  EF07  F009         	goto	l1550
  1358   00128A  0A01               	xorlw	1	; case 9
  1359   00128C  B4D8               	btfsc	status,2,c
  1360   00128E  EF0A  F009         	goto	l1552
  1361   001292  0A03               	xorlw	3	; case 10
  1362   001294  B4D8               	btfsc	status,2,c
  1363   001296  EF0D  F009         	goto	l1554
  1364   00129A  0A01               	xorlw	1	; case 11
  1365   00129C  B4D8               	btfsc	status,2,c
  1366   00129E  EF10  F009         	goto	l1556
  1367   0012A2  0A07               	xorlw	7	; case 12
  1368   0012A4  B4D8               	btfsc	status,2,c
  1369   0012A6  EF13  F009         	goto	l1558
  1370   0012AA  EF57  F009         	goto	l409
  1371   0012AE                     l409:
  1372   0012AE  0012               	return		;funcret
  1373   0012B0                     __end_of_adc_input_channel_port_configure:
  1374                           	callstack 0
  1375                           
  1376 ;; *************** function _ADC_Is_Conversion_Done *****************
  1377 ;; Defined at:
  1378 ;;		line 119 in file "MCAL_LAYER/ADC/hal_adc.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  adc             1    1[COMRAM] PTR const struct .
  1381 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
  1382 ;;  conversion_s    1    2[COMRAM] PTR unsigned char 
  1383 ;;		 -> ADC_Get_Conversion_Blocking@conversion_status(1), 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  ret             1    3[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      unsigned char 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr2l, fsr2h, status,2
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;Total ram usage:        3 bytes
  1400 ;; Hardware stack levels used: 1
  1401 ;; Hardware stack levels required when called: 2
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_ADC_Get_Conversion_Blocking
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           	psect	text10
  1410   0014C0                     __ptext10:
  1411                           	callstack 0
  1412   0014C0                     _ADC_Is_Conversion_Done:
  1413                           	callstack 27
  1414   0014C0                     
  1415                           ;MCAL_LAYER/ADC/hal_adc.c: 120:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1416   0014C0  0E01               	movlw	1
  1417   0014C2  6E64               	movwf	ADC_Is_Conversion_Done@ret^0,c
  1418                           
  1419                           ;MCAL_LAYER/ADC/hal_adc.c: 123:     if (((void*)0) == adc || ((void*)0) == conversion_st
      +                          atus) {
  1420   0014C4  5062               	movf	ADC_Is_Conversion_Done@adc^0,w,c
  1421   0014C6  B4D8               	btfsc	status,2,c
  1422   0014C8  EF68  F00A         	goto	u1701
  1423   0014CC  EF6A  F00A         	goto	u1700
  1424   0014D0                     u1701:
  1425   0014D0  EF72  F00A         	goto	l3006
  1426   0014D4                     u1700:
  1427   0014D4  5063               	movf	ADC_Is_Conversion_Done@conversion_status^0,w,c
  1428   0014D6  A4D8               	btfss	status,2,c
  1429   0014D8  EF70  F00A         	goto	u1711
  1430   0014DC  EF72  F00A         	goto	u1710
  1431   0014E0                     u1711:
  1432   0014E0  EF76  F00A         	goto	l3008
  1433   0014E4                     u1710:
  1434   0014E4                     l3006:
  1435                           
  1436                           ;MCAL_LAYER/ADC/hal_adc.c: 124:         ret = (Std_ReturnType)0X00;
  1437   0014E4  0E00               	movlw	0
  1438   0014E6  6E64               	movwf	ADC_Is_Conversion_Done@ret^0,c
  1439                           
  1440                           ;MCAL_LAYER/ADC/hal_adc.c: 125:     } else {
  1441   0014E8  EF83  F00A         	goto	l3010
  1442   0014EC                     l3008:
  1443                           
  1444                           ;MCAL_LAYER/ADC/hal_adc.c: 127:         *conversion_status = !(uint8) (ADCON0bits.GO_nDO
      +                          NE);
  1445   0014EC  5063               	movf	ADC_Is_Conversion_Done@conversion_status^0,w,c
  1446   0014EE  6ED9               	movwf	fsr2l,c
  1447   0014F0  6ADA               	clrf	fsr2h,c
  1448   0014F2  A2C2               	btfss	194,1,c	;volatile
  1449   0014F4  EF7E  F00A         	goto	u1721
  1450   0014F8  EF81  F00A         	goto	u1720
  1451   0014FC                     u1721:
  1452   0014FC  0E01               	movlw	1
  1453   0014FE  EF82  F00A         	goto	u1730
  1454   001502                     u1720:
  1455   001502  0E00               	movlw	0
  1456   001504                     u1730:
  1457   001504  6EDF               	movwf	indf2,c
  1458   001506                     l3010:
  1459                           
  1460                           ;MCAL_LAYER/ADC/hal_adc.c: 130:     return ret;
  1461   001506  5064               	movf	ADC_Is_Conversion_Done@ret^0,w,c
  1462   001508  0012               	return		;funcret
  1463   00150A                     __end_of_ADC_Is_Conversion_Done:
  1464                           	callstack 0
  1465                           
  1466 ;; *************** function _ADC_Get_Conversion_Result *****************
  1467 ;; Defined at:
  1468 ;;		line 140 in file "MCAL_LAYER/ADC/hal_adc.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  adc             1    1[COMRAM] PTR const struct .
  1471 ;;		 -> adc_4(6), adc_3(6), adc_2(6), adc_1(6), 
  1472 ;;  result          1    2[COMRAM] PTR unsigned short 
  1473 ;;		 -> re_4(2), re_3(2), re_2(2), re_1(2), 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  ret             1    5[COMRAM] unsigned char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      unsigned char 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        5 bytes
  1490 ;; Hardware stack levels used: 1
  1491 ;; Hardware stack levels required when called: 2
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_ADC_Get_Conversion_Blocking
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text11
  1500   0012B0                     __ptext11:
  1501                           	callstack 0
  1502   0012B0                     _ADC_Get_Conversion_Result:
  1503                           	callstack 27
  1504   0012B0                     
  1505                           ;MCAL_LAYER/ADC/hal_adc.c: 141:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1506   0012B0  0E01               	movlw	1
  1507   0012B2  6E66               	movwf	ADC_Get_Conversion_Result@ret^0,c
  1508                           
  1509                           ;MCAL_LAYER/ADC/hal_adc.c: 144:     if (((void*)0) == adc || ((void*)0) == result) {
  1510   0012B4  5062               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1511   0012B6  B4D8               	btfsc	status,2,c
  1512   0012B8  EF60  F009         	goto	u1741
  1513   0012BC  EF62  F009         	goto	u1740
  1514   0012C0                     u1741:
  1515   0012C0  EF6A  F009         	goto	l3018
  1516   0012C4                     u1740:
  1517   0012C4  5063               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1518   0012C6  A4D8               	btfss	status,2,c
  1519   0012C8  EF68  F009         	goto	u1751
  1520   0012CC  EF6A  F009         	goto	u1750
  1521   0012D0                     u1751:
  1522   0012D0  EF6E  F009         	goto	l3020
  1523   0012D4                     u1750:
  1524   0012D4                     l3018:
  1525                           
  1526                           ;MCAL_LAYER/ADC/hal_adc.c: 145:         ret = (Std_ReturnType)0X00;
  1527   0012D4  0E00               	movlw	0
  1528   0012D6  6E66               	movwf	ADC_Get_Conversion_Result@ret^0,c
  1529                           
  1530                           ;MCAL_LAYER/ADC/hal_adc.c: 146:     } else {
  1531   0012D8  EFB0  F009         	goto	l3030
  1532   0012DC                     l3020:
  1533                           
  1534                           ;MCAL_LAYER/ADC/hal_adc.c: 148:         if (0X01U == adc->result_format) {
  1535   0012DC  5062               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1536   0012DE  6ED9               	movwf	fsr2l,c
  1537   0012E0  6ADA               	clrf	fsr2h,c
  1538   0012E2  0E05               	movlw	5
  1539   0012E4  26D9               	addwf	fsr2l,f,c
  1540   0012E6  A2DF               	btfss	indf2,1,c
  1541   0012E8  EF78  F009         	goto	u1761
  1542   0012EC  EF7A  F009         	goto	u1760
  1543   0012F0                     u1761:
  1544   0012F0  EF8D  F009         	goto	l3024
  1545   0012F4                     u1760:
  1546   0012F4                     l3022:
  1547                           
  1548                           ;MCAL_LAYER/ADC/hal_adc.c: 149:             *result = (uint16_t) ((ADRESH << 8) + ADRESL
      +                          );
  1549   0012F4  50C3               	movf	195,w,c	;volatile
  1550   0012F6  CFC4 F064          	movff	4036,??_ADC_Get_Conversion_Result	;volatile
  1551   0012FA  6A65               	clrf	(??_ADC_Get_Conversion_Result+1)^0,c
  1552   0012FC  C064  F065         	movff	??_ADC_Get_Conversion_Result,??_ADC_Get_Conversion_Result+1
  1553   001300  6A64               	clrf	??_ADC_Get_Conversion_Result^0,c
  1554   001302  2664               	addwf	??_ADC_Get_Conversion_Result^0,f,c
  1555   001304  0E00               	movlw	0
  1556   001306  2265               	addwfc	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1557   001308  5063               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1558   00130A  6ED9               	movwf	fsr2l,c
  1559   00130C  6ADA               	clrf	fsr2h,c
  1560   00130E  C064  FFDE         	movff	??_ADC_Get_Conversion_Result,postinc2
  1561   001312  C065  FFDD         	movff	??_ADC_Get_Conversion_Result+1,postdec2
  1562                           
  1563                           ;MCAL_LAYER/ADC/hal_adc.c: 150:         } else if (0X00 == adc->result_format) {
  1564   001316  EFB0  F009         	goto	l3030
  1565   00131A                     l3024:
  1566   00131A  5062               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1567   00131C  6ED9               	movwf	fsr2l,c
  1568   00131E  6ADA               	clrf	fsr2h,c
  1569   001320  0E05               	movlw	5
  1570   001322  26D9               	addwf	fsr2l,f,c
  1571   001324  B2DF               	btfsc	indf2,1,c
  1572   001326  EF97  F009         	goto	u1771
  1573   00132A  EF99  F009         	goto	u1770
  1574   00132E                     u1771:
  1575   00132E  EF7A  F009         	goto	l3022
  1576   001332                     u1770:
  1577   001332                     
  1578                           ;MCAL_LAYER/ADC/hal_adc.c: 151:             *result = (uint16_t) (((ADRESH << 8) + ADRES
      +                          L) >> 2);
  1579   001332  50C3               	movf	195,w,c	;volatile
  1580   001334  CFC4 F064          	movff	4036,??_ADC_Get_Conversion_Result	;volatile
  1581   001338  6A65               	clrf	(??_ADC_Get_Conversion_Result+1)^0,c
  1582   00133A  C064  F065         	movff	??_ADC_Get_Conversion_Result,??_ADC_Get_Conversion_Result+1
  1583   00133E  6A64               	clrf	??_ADC_Get_Conversion_Result^0,c
  1584   001340  2664               	addwf	??_ADC_Get_Conversion_Result^0,f,c
  1585   001342  0E00               	movlw	0
  1586   001344  2265               	addwfc	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1587   001346  3465               	rlcf	(??_ADC_Get_Conversion_Result+1)^0,w,c
  1588   001348  3265               	rrcf	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1589   00134A  3264               	rrcf	??_ADC_Get_Conversion_Result^0,f,c
  1590   00134C  3465               	rlcf	(??_ADC_Get_Conversion_Result+1)^0,w,c
  1591   00134E  3265               	rrcf	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1592   001350  3264               	rrcf	??_ADC_Get_Conversion_Result^0,f,c
  1593   001352  5063               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1594   001354  6ED9               	movwf	fsr2l,c
  1595   001356  6ADA               	clrf	fsr2h,c
  1596   001358  C064  FFDE         	movff	??_ADC_Get_Conversion_Result,postinc2
  1597   00135C  C065  FFDD         	movff	??_ADC_Get_Conversion_Result+1,postdec2
  1598   001360                     l3030:
  1599                           
  1600                           ;MCAL_LAYER/ADC/hal_adc.c: 157:     return ret;
  1601   001360  5066               	movf	ADC_Get_Conversion_Result@ret^0,w,c
  1602   001362  0012               	return		;funcret
  1603   001364                     __end_of_ADC_Get_Conversion_Result:
  1604                           	callstack 0
  1605                           
  1606 ;; *************** function _Interrupt_Manager_High *****************
  1607 ;; Defined at:
  1608 ;;		line 36 in file "MCAL_LAYER/Interrupt/mcal_interrupt_manager.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;Total ram usage:        0 bytes
  1627 ;; Hardware stack levels used: 1
  1628 ;; Hardware stack levels required when called: 1
  1629 ;; This function calls:
  1630 ;;		_INT0_ISR
  1631 ;;		_INT1_ISR
  1632 ;;		_INT2_ISR
  1633 ;;		_RB4_ISR
  1634 ;;		_RB5_ISR
  1635 ;;		_RB6_ISR
  1636 ;;		_RB7_ISR
  1637 ;; This function is called by:
  1638 ;;		Interrupt level 2
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           	psect	intcode
  1643   000008                     __pintcode:
  1644                           	callstack 0
  1645   000008                     _Interrupt_Manager_High:
  1646                           	callstack 26
  1647                           
  1648                           ;incstack = 0
  1649   000008  826E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1650   00000A  ED0B  F008         	call	int_func,f	;refresh shadow registers
  1651                           
  1652                           	psect	intcode_body
  1653   001016                     __pintcode_body:
  1654                           	callstack 26
  1655   001016                     int_func:
  1656                           	callstack 26
  1657   001016  0006               	pop		; remove dummy address from shadow register refresh
  1658   001018                     
  1659                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 38:     if ((INTCONbits.INT0IE == 1) && 
      +                          (INTCONbits.INT0IF == 1)) {
  1660   001018  A8F2               	btfss	242,4,c	;volatile
  1661   00101A  EF11  F008         	goto	i2u140_41
  1662   00101E  EF13  F008         	goto	i2u140_40
  1663   001022                     i2u140_41:
  1664   001022  EF1C  F008         	goto	i2l2870
  1665   001026                     i2u140_40:
  1666   001026  A2F2               	btfss	242,1,c	;volatile
  1667   001028  EF18  F008         	goto	i2u141_41
  1668   00102C  EF1A  F008         	goto	i2u141_40
  1669   001030                     i2u141_41:
  1670   001030  EF1C  F008         	goto	i2l2870
  1671   001034                     i2u141_40:
  1672   001034                     
  1673                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 39:         INT0_ISR();
  1674   001034  EC6E  F00B         	call	_INT0_ISR	;wreg free
  1675   001038                     i2l2870:
  1676                           
  1677                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 42:     if ((INTCON3bits.INT1IE == 1) &&
      +                           (INTCON3bits.INT1IF == 1)) {
  1678   001038  A6F0               	btfss	240,3,c	;volatile
  1679   00103A  EF21  F008         	goto	i2u142_41
  1680   00103E  EF23  F008         	goto	i2u142_40
  1681   001042                     i2u142_41:
  1682   001042  EF2C  F008         	goto	i2l2876
  1683   001046                     i2u142_40:
  1684   001046  A0F0               	btfss	240,0,c	;volatile
  1685   001048  EF28  F008         	goto	i2u143_41
  1686   00104C  EF2A  F008         	goto	i2u143_40
  1687   001050                     i2u143_41:
  1688   001050  EF2C  F008         	goto	i2l2876
  1689   001054                     i2u143_40:
  1690   001054                     
  1691                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 43:         INT1_ISR();
  1692   001054  EC6C  F00B         	call	_INT1_ISR	;wreg free
  1693   001058                     i2l2876:
  1694                           
  1695                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 46:     if ((INTCON3bits.INT2IE == 1) &&
      +                           (INTCON3bits.INT2IF == 1)) {
  1696   001058  A8F0               	btfss	240,4,c	;volatile
  1697   00105A  EF31  F008         	goto	i2u144_41
  1698   00105E  EF33  F008         	goto	i2u144_40
  1699   001062                     i2u144_41:
  1700   001062  EF3C  F008         	goto	i2l2882
  1701   001066                     i2u144_40:
  1702   001066  A2F0               	btfss	240,1,c	;volatile
  1703   001068  EF38  F008         	goto	i2u145_41
  1704   00106C  EF3A  F008         	goto	i2u145_40
  1705   001070                     i2u145_41:
  1706   001070  EF3C  F008         	goto	i2l2882
  1707   001074                     i2u145_40:
  1708   001074                     
  1709                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 47:         INT2_ISR();
  1710   001074  EC6A  F00B         	call	_INT2_ISR	;wreg free
  1711   001078                     i2l2882:
  1712                           
  1713                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 51:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1)) {
  1714   001078  A6F2               	btfss	242,3,c	;volatile
  1715   00107A  EF41  F008         	goto	i2u146_41
  1716   00107E  EF43  F008         	goto	i2u146_40
  1717   001082                     i2u146_41:
  1718   001082  EFEA  F008         	goto	i2l806
  1719   001086                     i2u146_40:
  1720   001086  A0F2               	btfss	242,0,c	;volatile
  1721   001088  EF48  F008         	goto	i2u147_41
  1722   00108C  EF4A  F008         	goto	i2u147_40
  1723   001090                     i2u147_41:
  1724   001090  EFEA  F008         	goto	i2l806
  1725   001094                     i2u147_40:
  1726   001094                     
  1727                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 55:         if ((PORTBbits.RB4 == GPIO_H
      +                          IGH) && RB4_f == 1) {
  1728   001094  A881               	btfss	129,4,c	;volatile
  1729   001096  EF4F  F008         	goto	i2u148_41
  1730   00109A  EF51  F008         	goto	i2u148_40
  1731   00109E                     i2u148_41:
  1732   00109E  EF5E  F008         	goto	i2l2894
  1733   0010A2                     i2u148_40:
  1734   0010A2  0423               	decf	_RB4_f^0,w,c	;volatile
  1735   0010A4  A4D8               	btfss	status,2,c
  1736   0010A6  EF57  F008         	goto	i2u149_41
  1737   0010AA  EF59  F008         	goto	i2u149_40
  1738   0010AE                     i2u149_41:
  1739   0010AE  EF5E  F008         	goto	i2l2894
  1740   0010B2                     i2u149_40:
  1741   0010B2                     
  1742                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 56:             RB4_f = 0;
  1743   0010B2  0E00               	movlw	0
  1744   0010B4  6E23               	movwf	_RB4_f^0,c	;volatile
  1745   0010B6                     
  1746                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 57:             RB4_ISR(0);
  1747   0010B6  0E00               	movlw	0
  1748   0010B8  EC5D  F00B         	call	_RB4_ISR
  1749   0010BC                     i2l2894:
  1750                           
  1751                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 59:         if ((PORTBbits.RB4 == GPIO_L
      +                          OW) && RB4_f == 0) {
  1752   0010BC  B881               	btfsc	129,4,c	;volatile
  1753   0010BE  EF63  F008         	goto	i2u150_41
  1754   0010C2  EF65  F008         	goto	i2u150_40
  1755   0010C6                     i2u150_41:
  1756   0010C6  EF72  F008         	goto	i2l2902
  1757   0010CA                     i2u150_40:
  1758   0010CA  5023               	movf	_RB4_f^0,w,c	;volatile
  1759   0010CC  A4D8               	btfss	status,2,c
  1760   0010CE  EF6B  F008         	goto	i2u151_41
  1761   0010D2  EF6D  F008         	goto	i2u151_40
  1762   0010D6                     i2u151_41:
  1763   0010D6  EF72  F008         	goto	i2l2902
  1764   0010DA                     i2u151_40:
  1765   0010DA                     
  1766                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 60:             RB4_f = 1;
  1767   0010DA  0E01               	movlw	1
  1768   0010DC  6E23               	movwf	_RB4_f^0,c	;volatile
  1769   0010DE                     
  1770                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 61:             RB4_ISR(1);
  1771   0010DE  0E01               	movlw	1
  1772   0010E0  EC5D  F00B         	call	_RB4_ISR
  1773   0010E4                     i2l2902:
  1774                           
  1775                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 64:         if ((PORTBbits.RB5 == GPIO_H
      +                          IGH) && RB5_f == 1) {
  1776   0010E4  AA81               	btfss	129,5,c	;volatile
  1777   0010E6  EF77  F008         	goto	i2u152_41
  1778   0010EA  EF79  F008         	goto	i2u152_40
  1779   0010EE                     i2u152_41:
  1780   0010EE  EF86  F008         	goto	i2l2910
  1781   0010F2                     i2u152_40:
  1782   0010F2  0422               	decf	_RB5_f^0,w,c	;volatile
  1783   0010F4  A4D8               	btfss	status,2,c
  1784   0010F6  EF7F  F008         	goto	i2u153_41
  1785   0010FA  EF81  F008         	goto	i2u153_40
  1786   0010FE                     i2u153_41:
  1787   0010FE  EF86  F008         	goto	i2l2910
  1788   001102                     i2u153_40:
  1789   001102                     
  1790                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 65:             RB5_f = 0;
  1791   001102  0E00               	movlw	0
  1792   001104  6E22               	movwf	_RB5_f^0,c	;volatile
  1793   001106                     
  1794                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 66:             RB5_ISR(0);
  1795   001106  0E00               	movlw	0
  1796   001108  EC50  F00B         	call	_RB5_ISR
  1797   00110C                     i2l2910:
  1798                           
  1799                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 68:         if ((PORTBbits.RB5 == GPIO_L
      +                          OW) && RB5_f == 0) {
  1800   00110C  BA81               	btfsc	129,5,c	;volatile
  1801   00110E  EF8B  F008         	goto	i2u154_41
  1802   001112  EF8D  F008         	goto	i2u154_40
  1803   001116                     i2u154_41:
  1804   001116  EF9A  F008         	goto	i2l2918
  1805   00111A                     i2u154_40:
  1806   00111A  5022               	movf	_RB5_f^0,w,c	;volatile
  1807   00111C  A4D8               	btfss	status,2,c
  1808   00111E  EF93  F008         	goto	i2u155_41
  1809   001122  EF95  F008         	goto	i2u155_40
  1810   001126                     i2u155_41:
  1811   001126  EF9A  F008         	goto	i2l2918
  1812   00112A                     i2u155_40:
  1813   00112A                     
  1814                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 69:             RB5_f = 1;
  1815   00112A  0E01               	movlw	1
  1816   00112C  6E22               	movwf	_RB5_f^0,c	;volatile
  1817   00112E                     
  1818                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 70:             RB5_ISR(1);
  1819   00112E  0E01               	movlw	1
  1820   001130  EC50  F00B         	call	_RB5_ISR
  1821   001134                     i2l2918:
  1822                           
  1823                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 73:         if ((PORTBbits.RB6 == GPIO_H
      +                          IGH) && RB6_f == 1) {
  1824   001134  AC81               	btfss	129,6,c	;volatile
  1825   001136  EF9F  F008         	goto	i2u156_41
  1826   00113A  EFA1  F008         	goto	i2u156_40
  1827   00113E                     i2u156_41:
  1828   00113E  EFAE  F008         	goto	i2l2926
  1829   001142                     i2u156_40:
  1830   001142  0421               	decf	_RB6_f^0,w,c	;volatile
  1831   001144  A4D8               	btfss	status,2,c
  1832   001146  EFA7  F008         	goto	i2u157_41
  1833   00114A  EFA9  F008         	goto	i2u157_40
  1834   00114E                     i2u157_41:
  1835   00114E  EFAE  F008         	goto	i2l2926
  1836   001152                     i2u157_40:
  1837   001152                     
  1838                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 74:             RB6_f = 0;
  1839   001152  0E00               	movlw	0
  1840   001154  6E21               	movwf	_RB6_f^0,c	;volatile
  1841   001156                     
  1842                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 75:             RB6_ISR(0);
  1843   001156  0E00               	movlw	0
  1844   001158  EC43  F00B         	call	_RB6_ISR
  1845   00115C                     i2l2926:
  1846                           
  1847                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 77:         if ((PORTBbits.RB6 == GPIO_L
      +                          OW) && RB6_f == 0) {
  1848   00115C  BC81               	btfsc	129,6,c	;volatile
  1849   00115E  EFB3  F008         	goto	i2u158_41
  1850   001162  EFB5  F008         	goto	i2u158_40
  1851   001166                     i2u158_41:
  1852   001166  EFC2  F008         	goto	i2l2934
  1853   00116A                     i2u158_40:
  1854   00116A  5021               	movf	_RB6_f^0,w,c	;volatile
  1855   00116C  A4D8               	btfss	status,2,c
  1856   00116E  EFBB  F008         	goto	i2u159_41
  1857   001172  EFBD  F008         	goto	i2u159_40
  1858   001176                     i2u159_41:
  1859   001176  EFC2  F008         	goto	i2l2934
  1860   00117A                     i2u159_40:
  1861   00117A                     
  1862                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 78:             RB6_f = 1;
  1863   00117A  0E01               	movlw	1
  1864   00117C  6E21               	movwf	_RB6_f^0,c	;volatile
  1865   00117E                     
  1866                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 79:             RB6_ISR(1);
  1867   00117E  0E01               	movlw	1
  1868   001180  EC43  F00B         	call	_RB6_ISR
  1869   001184                     i2l2934:
  1870                           
  1871                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 82:         if ((PORTBbits.RB7 == GPIO_H
      +                          IGH) && RB7_f == 1) {
  1872   001184  AE81               	btfss	129,7,c	;volatile
  1873   001186  EFC7  F008         	goto	i2u160_41
  1874   00118A  EFC9  F008         	goto	i2u160_40
  1875   00118E                     i2u160_41:
  1876   00118E  EFD6  F008         	goto	i2l2942
  1877   001192                     i2u160_40:
  1878   001192  0420               	decf	_RB7_f^0,w,c	;volatile
  1879   001194  A4D8               	btfss	status,2,c
  1880   001196  EFCF  F008         	goto	i2u161_41
  1881   00119A  EFD1  F008         	goto	i2u161_40
  1882   00119E                     i2u161_41:
  1883   00119E  EFD6  F008         	goto	i2l2942
  1884   0011A2                     i2u161_40:
  1885   0011A2                     
  1886                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 83:             RB7_f = 0;
  1887   0011A2  0E00               	movlw	0
  1888   0011A4  6E20               	movwf	_RB7_f^0,c	;volatile
  1889   0011A6                     
  1890                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 84:             RB7_ISR(0);
  1891   0011A6  0E00               	movlw	0
  1892   0011A8  EC36  F00B         	call	_RB7_ISR
  1893   0011AC                     i2l2942:
  1894                           
  1895                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 86:         if ((PORTBbits.RB7 == GPIO_L
      +                          OW) && RB7_f == 0) {
  1896   0011AC  BE81               	btfsc	129,7,c	;volatile
  1897   0011AE  EFDB  F008         	goto	i2u162_41
  1898   0011B2  EFDD  F008         	goto	i2u162_40
  1899   0011B6                     i2u162_41:
  1900   0011B6  EFEA  F008         	goto	i2l806
  1901   0011BA                     i2u162_40:
  1902   0011BA  5020               	movf	_RB7_f^0,w,c	;volatile
  1903   0011BC  A4D8               	btfss	status,2,c
  1904   0011BE  EFE3  F008         	goto	i2u163_41
  1905   0011C2  EFE5  F008         	goto	i2u163_40
  1906   0011C6                     i2u163_41:
  1907   0011C6  EFEA  F008         	goto	i2l806
  1908   0011CA                     i2u163_40:
  1909   0011CA                     
  1910                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 87:             RB7_f = 1;
  1911   0011CA  0E01               	movlw	1
  1912   0011CC  6E20               	movwf	_RB7_f^0,c	;volatile
  1913   0011CE                     
  1914                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 88:             RB7_ISR(1);
  1915   0011CE  0E01               	movlw	1
  1916   0011D0  EC36  F00B         	call	_RB7_ISR
  1917   0011D4                     i2l806:
  1918   0011D4  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1919   0011D6  0011               	retfie		f
  1920   0011D8                     __end_of_Interrupt_Manager_High:
  1921                           	callstack 0
  1922                           
  1923 ;; *************** function _RB7_ISR *****************
  1924 ;; Defined at:
  1925 ;;		line 514 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  source          1    wreg     unsigned char 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  source          1    0[COMRAM] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;Total ram usage:        1 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_Interrupt_Manager_High
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text13
  1953   00166C                     __ptext13:
  1954                           	callstack 0
  1955   00166C                     _RB7_ISR:
  1956                           	callstack 26
  1957                           
  1958                           ;incstack = 0
  1959                           ;RB7_ISR@source stored from wreg
  1960   00166C  6E61               	movwf	RB7_ISR@source^0,c
  1961   00166E                     
  1962                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 515:     (INTCONbits.RBIF = 1);
  1963   00166E  80F2               	bsf	242,0,c	;volatile
  1964   001670                     
  1965                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 517:     if (0 == source) {
  1966   001670  5061               	movf	RB7_ISR@source^0,w,c
  1967   001672  A4D8               	btfss	status,2,c
  1968   001674  EF3E  F00B         	goto	i2u52_41
  1969   001678  EF40  F00B         	goto	i2u52_40
  1970   00167C                     i2u52_41:
  1971   00167C  EF42  F00B         	goto	i2l1984
  1972   001680                     i2u52_40:
  1973   001680  EF42  F00B         	goto	i2l761
  1974   001684                     i2l1984:
  1975   001684                     i2l761:
  1976   001684  0012               	return		;funcret
  1977   001686                     __end_of_RB7_ISR:
  1978                           	callstack 0
  1979                           
  1980 ;; *************** function _RB6_ISR *****************
  1981 ;; Defined at:
  1982 ;;		line 500 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;  source          1    wreg     unsigned char 
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  source          1    0[COMRAM] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, status,2, status,0
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;Total ram usage:        1 bytes
  2001 ;; Hardware stack levels used: 1
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_Interrupt_Manager_High
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	text14
  2010   001686                     __ptext14:
  2011                           	callstack 0
  2012   001686                     _RB6_ISR:
  2013                           	callstack 26
  2014                           
  2015                           ;incstack = 0
  2016                           ;RB6_ISR@source stored from wreg
  2017   001686  6E61               	movwf	RB6_ISR@source^0,c
  2018   001688                     
  2019                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 501:     (INTCONbits.RBIF = 1);
  2020   001688  80F2               	bsf	242,0,c	;volatile
  2021   00168A                     
  2022                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 503:     if (0 == source) {
  2023   00168A  5061               	movf	RB6_ISR@source^0,w,c
  2024   00168C  A4D8               	btfss	status,2,c
  2025   00168E  EF4B  F00B         	goto	i2u51_41
  2026   001692  EF4D  F00B         	goto	i2u51_40
  2027   001696                     i2u51_41:
  2028   001696  EF4F  F00B         	goto	i2l1974
  2029   00169A                     i2u51_40:
  2030   00169A  EF4F  F00B         	goto	i2l753
  2031   00169E                     i2l1974:
  2032   00169E                     i2l753:
  2033   00169E  0012               	return		;funcret
  2034   0016A0                     __end_of_RB6_ISR:
  2035                           	callstack 0
  2036                           
  2037 ;; *************** function _RB5_ISR *****************
  2038 ;; Defined at:
  2039 ;;		line 486 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  source          1    wreg     unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  source          1    0[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2, status,0
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;Total ram usage:        1 bytes
  2058 ;; Hardware stack levels used: 1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_Interrupt_Manager_High
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text15
  2067   0016A0                     __ptext15:
  2068                           	callstack 0
  2069   0016A0                     _RB5_ISR:
  2070                           	callstack 26
  2071                           
  2072                           ;incstack = 0
  2073                           ;RB5_ISR@source stored from wreg
  2074   0016A0  6E61               	movwf	RB5_ISR@source^0,c
  2075   0016A2                     
  2076                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 487:     (INTCONbits.RBIF = 1);
  2077   0016A2  80F2               	bsf	242,0,c	;volatile
  2078   0016A4                     
  2079                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 489:     if (0 == source) {
  2080   0016A4  5061               	movf	RB5_ISR@source^0,w,c
  2081   0016A6  A4D8               	btfss	status,2,c
  2082   0016A8  EF58  F00B         	goto	i2u50_41
  2083   0016AC  EF5A  F00B         	goto	i2u50_40
  2084   0016B0                     i2u50_41:
  2085   0016B0  EF5C  F00B         	goto	i2l1964
  2086   0016B4                     i2u50_40:
  2087   0016B4  EF5C  F00B         	goto	i2l745
  2088   0016B8                     i2l1964:
  2089   0016B8                     i2l745:
  2090   0016B8  0012               	return		;funcret
  2091   0016BA                     __end_of_RB5_ISR:
  2092                           	callstack 0
  2093                           
  2094 ;; *************** function _RB4_ISR *****************
  2095 ;; Defined at:
  2096 ;;		line 472 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  source          1    wreg     unsigned char 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  source          1    0[COMRAM] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;Total ram usage:        1 bytes
  2115 ;; Hardware stack levels used: 1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_Interrupt_Manager_High
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text16
  2124   0016BA                     __ptext16:
  2125                           	callstack 0
  2126   0016BA                     _RB4_ISR:
  2127                           	callstack 26
  2128                           
  2129                           ;incstack = 0
  2130                           ;RB4_ISR@source stored from wreg
  2131   0016BA  6E61               	movwf	RB4_ISR@source^0,c
  2132   0016BC                     
  2133                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 473:     (INTCONbits.RBIF = 1);
  2134   0016BC  80F2               	bsf	242,0,c	;volatile
  2135   0016BE                     
  2136                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 475:     if (0 == source) {
  2137   0016BE  5061               	movf	RB4_ISR@source^0,w,c
  2138   0016C0  A4D8               	btfss	status,2,c
  2139   0016C2  EF65  F00B         	goto	i2u49_41
  2140   0016C6  EF67  F00B         	goto	i2u49_40
  2141   0016CA                     i2u49_41:
  2142   0016CA  EF69  F00B         	goto	i2l1954
  2143   0016CE                     i2u49_40:
  2144   0016CE  EF69  F00B         	goto	i2l737
  2145   0016D2                     i2l1954:
  2146   0016D2                     i2l737:
  2147   0016D2  0012               	return		;funcret
  2148   0016D4                     __end_of_RB4_ISR:
  2149                           	callstack 0
  2150                           
  2151 ;; *************** function _INT2_ISR *****************
  2152 ;; Defined at:
  2153 ;;		line 466 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		None
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2171 ;;Total ram usage:        0 bytes
  2172 ;; Hardware stack levels used: 1
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_Interrupt_Manager_High
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text17
  2181   0016D4                     __ptext17:
  2182                           	callstack 0
  2183   0016D4                     _INT2_ISR:
  2184                           	callstack 26
  2185   0016D4                     
  2186                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 467:     (INTCON3bits.INT2IF = 0);
  2187   0016D4  92F0               	bcf	240,1,c	;volatile
  2188   0016D6  0012               	return		;funcret
  2189   0016D8                     __end_of_INT2_ISR:
  2190                           	callstack 0
  2191                           
  2192 ;; *************** function _INT1_ISR *****************
  2193 ;; Defined at:
  2194 ;;		line 460 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;		None
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;		None
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  1    wreg      void 
  2201 ;; Registers used:
  2202 ;;		None
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;Total ram usage:        0 bytes
  2213 ;; Hardware stack levels used: 1
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_Interrupt_Manager_High
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text18
  2222   0016D8                     __ptext18:
  2223                           	callstack 0
  2224   0016D8                     _INT1_ISR:
  2225                           	callstack 26
  2226   0016D8                     
  2227                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 461:     (INTCON3bits.INT1IF = 0);
  2228   0016D8  90F0               	bcf	240,0,c	;volatile
  2229   0016DA  0012               	return		;funcret
  2230   0016DC                     __end_of_INT1_ISR:
  2231                           	callstack 0
  2232                           
  2233 ;; *************** function _INT0_ISR *****************
  2234 ;; Defined at:
  2235 ;;		line 454 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		None
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used: 1
  2255 ;; This function calls:
  2256 ;;		Nothing
  2257 ;; This function is called by:
  2258 ;;		_Interrupt_Manager_High
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text19
  2263   0016DC                     __ptext19:
  2264                           	callstack 0
  2265   0016DC                     _INT0_ISR:
  2266                           	callstack 26
  2267   0016DC                     
  2268                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 455:     (INTCONbits.INT0IF = 0);
  2269   0016DC  92F2               	bcf	242,1,c	;volatile
  2270   0016DE  0012               	return		;funcret
  2271   0016E0                     __end_of_INT0_ISR:
  2272                           	callstack 0
  2273                           
  2274                           	psect	rparam
  2275   000000                     
  2276                           	psect	temp
  2277   00006E                     btemp:
  2278                           	callstack 0
  2279   00006E                     	ds	1
  2280   000000                     int$flags	set	btemp
  2281   000000                     wtemp8	set	btemp+1
  2282   000000                     ttemp5	set	btemp+1
  2283   000000                     ttemp6	set	btemp+4
  2284   000000                     ttemp7	set	btemp+8
  2285                           
  2286                           	psect	config
  2287                           
  2288                           ; Padding undefined space
  2289   300000                     	org	3145728
  2290   300000  FF                 	db	255
  2291                           
  2292                           ;Config register CONFIG1H @ 0x300001
  2293                           ;	Oscillator Selection bits
  2294                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  2295                           ;	Fail-Safe Clock Monitor Enable bit
  2296                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2297                           ;	Internal/External Oscillator Switchover bit
  2298                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2299   300001                     	org	3145729
  2300   300001  07                 	db	7
  2301                           
  2302                           ;Config register CONFIG2L @ 0x300002
  2303                           ;	Power-up Timer Enable bit
  2304                           ;	PWRT = OFF, PWRT disabled
  2305                           ;	Brown-out Reset Enable bits
  2306                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2307                           ;	Brown Out Reset Voltage bits
  2308                           ;	BORV = 3, Minimum setting
  2309   300002                     	org	3145730
  2310   300002  1F                 	db	31
  2311                           
  2312                           ;Config register CONFIG2H @ 0x300003
  2313                           ;	Watchdog Timer Enable bit
  2314                           ;	WDT = ON, WDT enabled
  2315                           ;	Watchdog Timer Postscale Select bits
  2316                           ;	WDTPS = 32768, 1:32768
  2317   300003                     	org	3145731
  2318   300003  1F                 	db	31
  2319                           
  2320                           ; Padding undefined space
  2321   300004                     	org	3145732
  2322   300004  FF                 	db	255
  2323                           
  2324                           ;Config register CONFIG3H @ 0x300005
  2325                           ;	CCP2 MUX bit
  2326                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2327                           ;	PORTB A/D Enable bit
  2328                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2329                           ;	Low-Power Timer1 Oscillator Enable bit
  2330                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2331                           ;	MCLR Pin Enable bit
  2332                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2333   300005                     	org	3145733
  2334   300005  81                 	db	129
  2335                           
  2336                           ;Config register CONFIG4L @ 0x300006
  2337                           ;	Stack Full/Underflow Reset Enable bit
  2338                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2339                           ;	Single-Supply ICSP Enable bit
  2340                           ;	LVP = ON, Single-Supply ICSP enabled
  2341                           ;	Extended Instruction Set Enable bit
  2342                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2343                           ;	Background Debugger Enable bit
  2344                           ;	DEBUG = 0x1, unprogrammed default
  2345   300006                     	org	3145734
  2346   300006  85                 	db	133
  2347                           
  2348                           ; Padding undefined space
  2349   300007                     	org	3145735
  2350   300007  FF                 	db	255
  2351                           
  2352                           ;Config register CONFIG5L @ 0x300008
  2353                           ;	Code Protection bit
  2354                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2355                           ;	Code Protection bit
  2356                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2357                           ;	Code Protection bit
  2358                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2359                           ;	Code Protection bit
  2360                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2361   300008                     	org	3145736
  2362   300008  0F                 	db	15
  2363                           
  2364                           ;Config register CONFIG5H @ 0x300009
  2365                           ;	Boot Block Code Protection bit
  2366                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2367                           ;	Data EEPROM Code Protection bit
  2368                           ;	CPD = OFF, Data EEPROM not code-protected
  2369   300009                     	org	3145737
  2370   300009  C0                 	db	192
  2371                           
  2372                           ;Config register CONFIG6L @ 0x30000A
  2373                           ;	Write Protection bit
  2374                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2375                           ;	Write Protection bit
  2376                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2377                           ;	Write Protection bit
  2378                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2379                           ;	Write Protection bit
  2380                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2381   30000A                     	org	3145738
  2382   30000A  0F                 	db	15
  2383                           
  2384                           ;Config register CONFIG6H @ 0x30000B
  2385                           ;	Configuration Register Write Protection bit
  2386                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2387                           ;	Boot Block Write Protection bit
  2388                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2389                           ;	Data EEPROM Write Protection bit
  2390                           ;	WRTD = OFF, Data EEPROM not write-protected
  2391   30000B                     	org	3145739
  2392   30000B  E0                 	db	224
  2393                           
  2394                           ;Config register CONFIG7L @ 0x30000C
  2395                           ;	Table Read Protection bit
  2396                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2397                           ;	Table Read Protection bit
  2398                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2399                           ;	Table Read Protection bit
  2400                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2401                           ;	Table Read Protection bit
  2402                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2403   30000C                     	org	3145740
  2404   30000C  0F                 	db	15
  2405                           
  2406                           ;Config register CONFIG7H @ 0x30000D
  2407                           ;	Boot Block Table Read Protection bit
  2408                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2409   30000D                     	org	3145741
  2410   30000D  40                 	db	64
  2411                           tosu	equ	0xFFF
  2412                           tosh	equ	0xFFE
  2413                           tosl	equ	0xFFD
  2414                           stkptr	equ	0xFFC
  2415                           pclatu	equ	0xFFB
  2416                           pclath	equ	0xFFA
  2417                           pcl	equ	0xFF9
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           prodh	equ	0xFF4
  2423                           prodl	equ	0xFF3
  2424                           indf0	equ	0xFEF
  2425                           postinc0	equ	0xFEE
  2426                           postdec0	equ	0xFED
  2427                           preinc0	equ	0xFEC
  2428                           plusw0	equ	0xFEB
  2429                           fsr0h	equ	0xFEA
  2430                           fsr0l	equ	0xFE9
  2431                           wreg	equ	0xFE8
  2432                           indf1	equ	0xFE7
  2433                           postinc1	equ	0xFE6
  2434                           postdec1	equ	0xFE5
  2435                           preinc1	equ	0xFE4
  2436                           plusw1	equ	0xFE3
  2437                           fsr1h	equ	0xFE2
  2438                           fsr1l	equ	0xFE1
  2439                           bsr	equ	0xFE0
  2440                           indf2	equ	0xFDF
  2441                           postinc2	equ	0xFDE
  2442                           postdec2	equ	0xFDD
  2443                           preinc2	equ	0xFDC
  2444                           plusw2	equ	0xFDB
  2445                           fsr2h	equ	0xFDA
  2446                           fsr2l	equ	0xFD9
  2447                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    16
    Data        59
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     13     109
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    adc_1$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_2$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_3$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_4$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Get_Conversion_Blocking@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    ADC_Get_Conversion_Blocking@result	PTR unsigned short  size(1) Largest target is 2
		 -> re_1(COMRAM[2]), re_2(COMRAM[2]), re_3(COMRAM[2]), re_4(COMRAM[2]), 

    ADC_Get_Conversion_Result@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    ADC_Get_Conversion_Result@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Get_Conversion_Result@result	PTR unsigned short  size(1) Largest target is 2
		 -> re_1(COMRAM[2]), re_2(COMRAM[2]), re_3(COMRAM[2]), re_4(COMRAM[2]), 

    ADC_Init@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    ADC_Init@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Is_Conversion_Done@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    ADC_Is_Conversion_Done@conversion_status	PTR unsigned char  size(1) Largest target is 1
		 -> ADC_Get_Conversion_Blocking@conversion_status(COMRAM[1]), 

    ADC_Select_Channel@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    adc_select_result_format@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    adc_select_result_format@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_select_voltage_ref@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    adc_select_voltage_ref@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Start_Conversion@adc	PTR const struct . size(1) Largest target is 6
		 -> adc_1(COMRAM[6]), adc_2(COMRAM[6]), adc_3(COMRAM[6]), adc_4(COMRAM[6]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    INT0_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT1_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT2_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    Interrupt_INTx_Clear_Flag@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Disable@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Edge_Init@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Enable@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Pin_Init@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@obj$External_CallBack_High	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@obj$External_CallBack_Low	PTR FTN()void  size(2) Largest target is 0

    Interrupt_Set_Interrupt_Handler@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    lat_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRllll[1]), LATB(BITBIGSFRlllh[1]), LATC(BITBIGSFRlllh[1]), LATD(BITBIGSFRlllh[1]), 
		 -> LATE(BITBIGSFRlllh[1]), 

    port_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRllll[1]), PORTB(BITBIGSFRllll[1]), PORTC(BITBIGSFRllll[1]), PORTD(BITBIGSFRllll[1]), 
		 -> PORTE(BITBIGSFRllll[1]), 

    RB4_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB4_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S1152$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    S1185$External_CallBack_High	PTR FTN()void  size(2) Largest target is 0

    S1185$External_CallBack_Low	PTR FTN()void  size(2) Largest target is 0

    S2174$buffer	PTR unsigned char  size(2) Largest target is 0

    S2174$source	PTR const unsigned char  size(2) Largest target is 0

    S658$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    sp__memset	PTR void  size(2) Largest target is 0

    tris_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRllll[1]), TRISB(ABS[1]), TRISC(ABS[1]), TRISD(ABS[1]), 
		 -> TRISE(ABS[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ADC_Get_Conversion_Blocking
    _Application_initialize->_ADC_Init
    _ADC_Init->_adc_input_channel_port_configure
    _ADC_Get_Conversion_Blocking->_ADC_Select_Channel
    _ADC_Select_Channel->_adc_input_channel_port_configure

Critical Paths under _Interrupt_Manager_High in COMRAM

    _Interrupt_Manager_High->_RB4_ISR
    _Interrupt_Manager_High->_RB5_ISR
    _Interrupt_Manager_High->_RB6_ISR
    _Interrupt_Manager_High->_RB7_ISR

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrupt_Manager_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt_Manager_High in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt_Manager_High in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt_Manager_High in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt_Manager_High in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt_Manager_High in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt_Manager_High in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt_Manager_High in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Interrupt_Manager_High in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Interrupt_Manager_High in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Interrupt_Manager_High in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Interrupt_Manager_High in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Interrupt_Manager_High in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Interrupt_Manager_High in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Interrupt_Manager_High in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Interrupt_Manager_High in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2806
        _ADC_Get_Conversion_Blocking
             _Application_initialize
 ---------------------------------------------------------------------------------
 (1) _Application_initialize                               0     0      0     715
                           _ADC_Init
               _ecu_layer_initialize
 ---------------------------------------------------------------------------------
 (2) _ecu_layer_initialize                                 1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     2      1     715
                                              4 COMRAM     3     2      1
   _adc_input_channel_port_configure
           _adc_select_result_format
             _adc_select_voltage_ref
 ---------------------------------------------------------------------------------
 (3) _adc_select_voltage_ref                               1     0      1     120
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _adc_select_result_format                             1     0      1      98
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _ADC_Get_Conversion_Blocking                          5     2      3    2091
                                              8 COMRAM     5     2      3
          _ADC_Get_Conversion_Result
             _ADC_Is_Conversion_Done
                 _ADC_Select_Channel
               _ADC_Start_Conversion
 ---------------------------------------------------------------------------------
 (2) _ADC_Start_Conversion                                 2     1      1     122
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC_Select_Channel                                   4     2      2     257
                                              4 COMRAM     4     2      2
   _adc_input_channel_port_configure
 ---------------------------------------------------------------------------------
 (3) _adc_input_channel_port_configure                     3     3      0      15
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Is_Conversion_Done                               3     1      2     242
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Get_Conversion_Result                            5     3      2     330
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupt_Manager_High                               0     0      0     120
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (5) _RB7_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB6_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB5_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB4_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Get_Conversion_Blocking
     _ADC_Get_Conversion_Result
     _ADC_Is_Conversion_Done
     _ADC_Select_Channel
       _adc_input_channel_port_configure
     _ADC_Start_Conversion
   _Application_initialize
     _ADC_Init
       _adc_input_channel_port_configure
       _adc_select_result_format
       _adc_select_voltage_ref
     _ecu_layer_initialize

 _Interrupt_Manager_High (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      43        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      D      6D       1       86.5%
BITBIGSFRhhll       2B      0       0      37        0.0%
BITBIGSFRllhhh      15      0       0      38        0.0%
BITBIGSFRllhhll      F      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      36        0.0%
BITBIGSFRlllh        4      0       0      40        0.0%
BITBIGSFRllll        4      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D      42        0.0%
DATA                 0      0      6D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Feb 18 13:34:14 2024

                ADC_Get_Conversion_Result@adc 0062                  ADC_Get_Conversion_Result@ret 0066  
                     ?_Interrupt_Manager_High 0061                                           l320 16E0  
                                         l412 1646                                           l414 1648  
                                         l422 1542                                           l360 1666  
                                         l409 12AE                                           l425 154A  
                                         l345 1380                                           l362 166A  
                                         l418 1522                                           l427 154E  
                                         l347 13F8                                           l380 1362  
                                         l357 15C2                                           l390 146A  
                                         l369 1508                                           l387 144C  
                                         l843 1626                                           l837 1470  
                     ?_ADC_Is_Conversion_Done 0062                                           _ret 001F  
                                         wreg 0FE8                               __end_of_RB4_ISR 16D4  
                             __end_of_RB5_ISR 16BA                               __end_of_RB6_ISR 16A0  
                             __end_of_RB7_ISR 1686                                          l3010 1506  
                                        l3002 14C0                                          l3020 12DC  
                                        l3004 14D4                                          l3022 12F4  
                                        l3030 1360                                          l3014 12B0  
                                        l3006 14E4                                          l3024 131A  
                                        l3016 12C4                                          l3008 14EC  
                                        l3040 1426                                          l3026 1332  
                                        l3018 12D4                                          l3042 143E  
                                        l3034 13FA                                          l3050 15FA  
                                        l1540 11F0                                          l1532 11DA  
                                        l3044 145A                                          l3036 140E  
                                        l3052 15FE                                          l3060 146C  
                                        l1550 120E                                          l1542 11F6  
                                        l1534 11DE                                          l3046 1468  
                                        l3038 141E                                          l3054 1608  
                                        l1552 1214                                          l1544 11FC  
                                        l1536 11E4                                          l1560 122C  
                                        l3056 1612                                          l3066 1240  
                                        l1554 121A                                          l1546 1202  
                                        l1538 11EA                                          l3058 161C  
                                        l1556 1220                                          l1548 1208  
                                        l1558 1226                                          l1680 16E0  
                                        l2960 150A                                          l2962 152A  
                                        l2970 13D4                                          l2956 1628  
                                        l2972 13E4                                          l2964 1364  
                                        l2990 15C0                                          l2982 158C  
                                        l2958 1640                                          l2974 13EC  
                                        l2966 1378                                          l2984 15A0  
                                        l2976 13F4                                          l2968 1382  
                                        l2986 15A8                                          l2994 164A  
                                        l2978 13F6                                          l2988 15BA  
                                        l2996 165E                                          l2998 1668  
                                        STR_1 1011                                          _LATA 0F89  
                                        _LATB 0F8A                                          _LATC 0F8B  
                                        _LATD 0F8C                                          _LATE 0F8D  
                                        u1700 14D4                                          u1701 14D0  
                                        u1710 14E4                                          u1711 14E0  
                                        u1720 1502                                          u1800 145A  
                                        u1640 1640                                          u1721 14FC  
                                        u1801 1456                                          u1641 163C  
                                        u1730 1504                                          u1650 1522  
                                        u1651 151E                                          u1740 12C4  
                                        u1660 1542                                          u1741 12C0  
                                        u1661 153E                                          u1750 12D4  
                                        u1670 1378                                          u1751 12D0  
                                        u1671 1374                                          u1760 12F4  
                                        u1680 15A0                                          u1761 12F0  
                                        u1681 159C                                          u1770 1332  
                                        u1690 165E                                          u1771 132E  
                                        u1691 165A                                          u1780 140E  
                                        u1781 140A                                          u1790 141E  
                                        u1791 141A                                          _re_1 005F  
                                        _re_2 005D                                          _re_3 005B  
                                        _re_4 0059                                          _main 146C  
                                        fsr2h 0FDA                                          indf2 0FDF  
                                        fsr1l 0FE1                                          fsr2l 0FD9  
                                        btemp 006E                              __end_of_ADC_Init 13FA  
                                        start 000E                __end_of_Interrupt_Manager_High 11D8  
                                ___param_bank 0000                    __end_of_ADC_Select_Channel 15C4  
     ADC_Is_Conversion_Done@conversion_status 0063                              __end_of_INT0_ISR 16E0  
                            __end_of_INT1_ISR 16DC                              __end_of_INT2_ISR 16D8  
              __end_of_ADC_Is_Conversion_Done 150A                                 Relay_on@F3485 0053  
                                       ?_main 0061                                         _EEADR 0FA9  
                                       _RB4_f 0023                                         _RB5_f 0022  
                                       _RB6_f 0021                                         _RB7_f 0020  
                                       i2l721 16DE                                         i2l725 16DA  
                                       i2l806 11D4                                         i2l729 16D6  
                                       i2l737 16D2                                         i2l745 16B8  
                                       i2l753 169E                                         i2l761 1684  
                                       _PORTA 0F80                                         _PORTB 0F81  
                                       _PORTC 0F82                                         _PORTD 0F83  
                                       _PORTE 0F84                                         _TRISA 0F92  
                                       _TRISB 0F93                                         _TRISC 0F94  
                                       _TRISD 0F95                                         _TRISE 0F96  
                                       _adc_1 0036                                         _adc_2 0030  
                                       _adc_3 002A                                         _adc_4 0024  
                        _ADC_Start_Conversion 164A                                         tablat 0FF5  
                                       ttemp5 006F                                         ttemp6 0072  
                                       ttemp7 0076                                         status 0FD8  
                                       wtemp8 006F                               __initialization 15C4  
                   ADC_Is_Conversion_Done@adc 0062                     ADC_Is_Conversion_Done@ret 0064  
                                __end_of_main 14C0                                 _lat_registers 000B  
                                      ??_main 006E                                 __activetblptr 0003  
                            led_turn_on@F3487 0057                                     ??_RB4_ISR 0061  
                                   ??_RB5_ISR 0061                                     ??_RB6_ISR 0061  
                                   ??_RB7_ISR 0061                     ?_adc_select_result_format 0062  
                       ?_ADC_Start_Conversion 0062                                        _ADRESH 0FC4  
                                      _EEADRH 0FAA                                        _ADRESL 0FC3  
                                      _EEDATA 0FA8                                        _EECON2 0FA7  
                                      i2l1940 16D8                                        i2l2900 10DE  
                                      i2l1950 16BE                                        i2l2910 110C  
                                      i2l2902 10E4                                        i2l1936 16DC  
                                      i2l1944 16D4                                        i2l1960 16A4  
                                      i2l2920 1142                                        i2l2912 111A  
                                      i2l2904 10F2                                        i2l1954 16D2  
                                      i2l1970 168A                                        i2l2930 117A  
                                      i2l2922 1152                                        i2l2914 112A  
                                      i2l2906 1102                                        i2l1948 16BC  
                                      i2l1964 16B8                                        i2l1980 1670  
                                      i2l2940 11A6                                        i2l2932 117E  
                                      i2l2924 1156                                        i2l2916 112E  
                                      i2l2908 1106                                        i2l1958 16A2  
                                      i2l1974 169E                                        i2l2942 11AC  
                                      i2l2934 1184                                        i2l2926 115C  
                                      i2l2918 1134                                        i2l2870 1038  
                                      i2l1968 1688                                        i2l1984 1684  
                                      i2l2944 11BA                                        i2l2936 1192  
                                      i2l2928 116A                                        i2l2880 1074  
                                      i2l2872 1046                                        i2l2864 1018  
                                      i2l1978 166E                                        i2l2946 11CA  
                                      i2l2938 11A2                                        i2l2890 10B2  
                                      i2l2882 1078                                        i2l2874 1054  
                                      i2l2866 1026                                        i2l2948 11CE  
                                      i2l2892 10B6                                        i2l2884 1086  
                                      i2l2876 1058                                        i2l2868 1034  
                                      i2l2894 10BC                                        i2l2886 1094  
                                      i2l2878 1066                                        i2l2896 10CA  
                                      i2l2888 10A2                                        i2l2898 10DA  
                              Relay_off@F3490 0052                       ?_Application_initialize 0061  
                                      clear_0 15EA                                        isa$std 0001  
                                __pdataCOMRAM 0001                                     ?_ADC_Init 0065  
                                __mediumconst 0000                                        tblptrh 0FF7  
                                      tblptrl 0FF6                                        tblptru 0FF8  
         __end_of_ADC_Get_Conversion_Blocking 146C                   _ADC_Get_Conversion_Blocking 13FA  
                     ADC_Start_Conversion@adc 0062                       ADC_Start_Conversion@ret 0063  
                                  __accesstop 0080                       __end_of__initialization 15F0  
                                   ?_INT0_ISR 0061                                     ?_INT1_ISR 0061  
                                   ?_INT2_ISR 0061                      ??_adc_select_voltage_ref 0063  
               ??_ADC_Get_Conversion_Blocking 006C                                 ___rparam_used 0001  
                              __pcstackCOMRAM 0061                __end_of_Application_initialize 1628  
                               RB4_ISR@source 0061                    _RB6_Interrupt_Handler_High 0042  
                                  ??_ADC_Init 0066                        ??_ADC_Start_Conversion 0063  
                  ?_ADC_Get_Conversion_Result 0062                                 RB5_ISR@source 0061  
                   _RB5_Interrupt_Handler_Low 0044                                    ??_INT0_ISR 0061  
                                  ??_INT1_ISR 0061                                    ??_INT2_ISR 0061  
                      _INT2_Interrupt_Handler 004C                                 RB6_ISR@source 0061  
                           led_turn_off@F3492 0056                   adc_select_result_format@adc 0062  
                                     _RB4_ISR 16BA                                       _RB5_ISR 16A0  
                                     _RB6_ISR 1686                                       _RB7_ISR 166C  
                          _ADC_Select_Channel 158C                                       i2u50_40 16B4  
                                     i2u50_41 16B0                                       i2u51_40 169A  
                                     i2u51_41 1696                                       i2u52_40 1680  
                                     i2u52_41 167C                                       i2u49_40 16CE  
                                     i2u49_41 16CA                                 RB7_ISR@source 0061  
           __end_of_ADC_Get_Conversion_Result 1364                           ?_ADC_Select_Channel 0065  
                                  _btn_values 1001                                _tris_registers 0015  
                                     __Hparam 0000                                       __Lparam 0000  
                        ??_ADC_Select_Channel 0067                                  __psmallconst 1000  
                                     __pcinit 15C4                                       __ramtop 1000  
                                     __ptext0 146C                                       __ptext1 15FA  
                                     __ptext2 16E0                                       __ptext3 1364  
                                     __ptext4 150A                                       __ptext5 1628  
                                     __ptext6 13FA                                       __ptext7 164A  
                                     __ptext8 158C                                       __ptext9 11D8  
                              __pintcode_body 1016                          end_of_initialization 15F0  
ADC_Get_Conversion_Blocking@conversion_status 006C                                       int_func 1016  
                                     postdec1 0FE5                                       postdec2 0FDD  
                                     postinc0 0FEE                                       postinc2 0FDE  
                                   _PORTBbits 0F81                        _adc_select_voltage_ref 150A  
                   ADC_Select_Channel@channel 0066                      ??_Interrupt_Manager_High 0062  
                    ??_ADC_Is_Conversion_Done 0064                                 __pidataCOMRAM 1550  
                    _adc_select_result_format 1628       adc_input_channel_port_configure@channel 0064  
                         start_initialization 15C4                   ??_ADC_Get_Conversion_Result 0064  
                  _RB5_Interrupt_Handler_High 0046                  __end_of_ecu_layer_initialize 16E2  
                                    ?_RB4_ISR 0061                                      ?_RB5_ISR 0061  
                                    ?_RB6_ISR 0061                                      ?_RB7_ISR 0061  
                                 __pbssCOMRAM 003C                     _RB6_Interrupt_Handler_Low 0040  
                      _INT0_Interrupt_Handler 0050                ADC_Get_Conversion_Blocking@adc 0069  
              ADC_Get_Conversion_Blocking@ret 006D                         Relay_initialize@F3480 0054  
                   _ADC_Get_Conversion_Result 12B0                                     __pintcode 0008  
    __end_of_adc_input_channel_port_configure 12B0            ??_adc_input_channel_port_configure 0062  
           ?_adc_input_channel_port_configure 0061              _adc_input_channel_port_configure 11D8  
           ADC_Get_Conversion_Blocking@result 006B                     adc_select_voltage_ref@adc 0062  
                                 __smallconst 1000                                      _ADC_Init 1364  
                                 ADC_Init@adc 0065                                   ADC_Init@ret 0067  
                                    _INT0_ISR 16DC                                      _INT1_ISR 16D8  
                                    _INT2_ISR 16D4                      ??_Application_initialize 0068  
                                    i2u140_40 1026                                      i2u140_41 1022  
                                    i2u141_40 1034                                      i2u141_41 1030  
                                    i2u150_40 10CA                                      i2u142_40 1046  
                                    i2u150_41 10C6                                      i2u142_41 1042  
                                    i2u151_40 10DA                                      i2u143_40 1054  
                                    i2u151_41 10D6                                      i2u143_41 1050  
                                    i2u160_40 1192                                      i2u152_40 10F2  
                                    i2u144_40 1066                                      i2u160_41 118E  
                                    i2u152_41 10EE                                      i2u144_41 1062  
                                    i2u161_40 11A2                                      i2u153_40 1102  
                                    i2u145_40 1074                                      i2u161_41 119E  
                                    i2u153_41 10FE                                      i2u145_41 1070  
                                    i2u162_40 11BA                                      i2u154_40 111A  
                                    i2u146_40 1086                                      i2u162_41 11B6  
                                    i2u154_41 1116                                      i2u146_41 1082  
                                    i2u163_40 11CA                                      i2u155_40 112A  
                                    i2u147_40 1094                                      i2u163_41 11C6  
                                    i2u155_41 1126                                      i2u147_41 1090  
                                    i2u156_40 1142                                      i2u148_40 10A2  
                                    i2u156_41 113E                                      i2u148_41 109E  
                                    i2u157_40 1152                                      i2u149_40 10B2  
                                    i2u157_41 114E                                      i2u149_41 10AE  
                                    i2u158_40 116A                                      i2u158_41 1166  
                                    i2u159_40 117A                                      i2u159_41 1176  
                     ?_adc_select_voltage_ref 0062                        _Interrupt_Manager_High 0008  
                                  _ADCON0bits 0FC2                                    _ADCON1bits 0FC1  
                                  _ADCON2bits 0FC0                        _ADC_Is_Conversion_Done 14C0  
                ?_ADC_Get_Conversion_Blocking 0069                                   _INTCON2bits 0FF1  
                                 _INTCON3bits 0FF0                                     copy_data0 15D8  
                        _ecu_layer_initialize 16E0                                    _EECON1bits 0FA6  
                                    __Hrparam 0000                    ??_adc_select_result_format 0063  
                                    __Lrparam 0000                __end_of_adc_select_voltage_ref 1550  
                          __end_of_btn_values 1011                            led_intialize@F3482 0058  
                                    __ptext10 14C0                                      __ptext11 12B0  
                                    __ptext13 166C                                      __ptext14 1686  
                                    __ptext15 16A0                                      __ptext16 16BA  
                                    __ptext17 16D4                                      __ptext18 16D8  
                                    __ptext19 16DC                         ?_ecu_layer_initialize 0061  
                                    isa$xinst 0000                                      int$flags 006E  
                                  _INTCONbits 0FF2                                      intlevel2 0000  
          ADC_Get_Conversion_Blocking@channel 006A                        led_toggle_status@F3497 0055  
                       ADC_Select_Channel@adc 0065                  __end_of_ADC_Start_Conversion 166C  
                       ADC_Select_Channel@ret 0068                    _RB4_Interrupt_Handler_High 004A  
                      _Application_initialize 15FA                    _RB7_Interrupt_Handler_High 003E  
                              _port_registers 0001                     _RB4_Interrupt_Handler_Low 0048  
                   _RB7_Interrupt_Handler_Low 003C                        ??_ecu_layer_initialize 0062  
             ADC_Get_Conversion_Result@result 0063                        _INT1_Interrupt_Handler 004E  
            __end_of_adc_select_result_format 164A  
