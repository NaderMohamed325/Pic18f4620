

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Feb 18 17:47:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Generated 23/03/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72   000000                     
    73                           	psect	idataCOMRAM
    74   001586                     __pidataCOMRAM:
    75                           	callstack 0
    76                           
    77                           ;initializer for _port_registers
    78   001586  80                 	db	128
    79   001587  0F                 	db	15
    80   001588  81                 	db	129
    81   001589  0F                 	db	15
    82   00158A  82                 	db	130
    83   00158B  0F                 	db	15
    84   00158C  83                 	db	131
    85   00158D  0F                 	db	15
    86   00158E  84                 	db	132
    87   00158F  0F                 	db	15
    88                           
    89                           ;initializer for _lat_registers
    90   001590  89                 	db	137
    91   001591  0F                 	db	15
    92   001592  8A                 	db	138
    93   001593  0F                 	db	15
    94   001594  8B                 	db	139
    95   001595  0F                 	db	15
    96   001596  8C                 	db	140
    97   001597  0F                 	db	15
    98   001598  8D                 	db	141
    99   001599  0F                 	db	15
   100                           
   101                           ;initializer for _tris_registers
   102   00159A  92                 	db	146
   103   00159B  0F                 	db	15
   104   00159C  93                 	db	147
   105   00159D  0F                 	db	15
   106   00159E  94                 	db	148
   107   00159F  0F                 	db	15
   108   0015A0  95                 	db	149
   109   0015A1  0F                 	db	15
   110   0015A2  96                 	db	150
   111   0015A3  0F                 	db	15
   112                           
   113                           ;initializer for _ret
   114   0015A4  01                 	db	1
   115                           
   116                           ;initializer for _RB7_f
   117   0015A5  01                 	db	1
   118                           
   119                           ;initializer for _RB6_f
   120   0015A6  01                 	db	1
   121                           
   122                           ;initializer for _RB5_f
   123   0015A7  01                 	db	1
   124                           
   125                           ;initializer for _RB4_f
   126   0015A8  01                 	db	1
   127                           
   128                           ;initializer for _adc_4
   129   0015A9  00                 	db	0
   130   0015AA  00                 	db	0
   131   0015AB  05                 	db	5
   132   0015AC  05                 	db	5
   133   0015AD  03                 	db	3
   134   0015AE  00                 	db	0
   135   0015AF  02                 	db	2
   136                           
   137                           ;initializer for _adc_3
   138   0015B0  00                 	db	0
   139   0015B1  00                 	db	0
   140   0015B2  05                 	db	5
   141   0015B3  05                 	db	5
   142   0015B4  02                 	db	2
   143   0015B5  00                 	db	0
   144   0015B6  02                 	db	2
   145                           
   146                           ;initializer for _adc_2
   147   0015B7  00                 	db	0
   148   0015B8  00                 	db	0
   149   0015B9  05                 	db	5
   150   0015BA  05                 	db	5
   151   0015BB  01                 	db	1
   152   0015BC  00                 	db	0
   153   0015BD  02                 	db	2
   154                           
   155                           ;initializer for _adc_1
   156   0015BE  00                 	db	0
   157   0015BF  00                 	db	0
   158   0015C0  05                 	db	5
   159   0015C1  05                 	db	5
   160   0015C2  00                 	db	0
   161   0015C3  00                 	db	0
   162   0015C4  02                 	db	2
   163                           
   164                           	psect	smallconst
   165   001000                     __psmallconst:
   166                           	callstack 0
   167   001000  00                 	db	0
   168   001001                     _btn_values:
   169                           	callstack 0
   170   001001  37                 	db	55
   171   001002  38                 	db	56
   172   001003  39                 	db	57
   173   001004  2F                 	db	47
   174   001005  34                 	db	52
   175   001006  35                 	db	53
   176   001007  36                 	db	54
   177   001008  2A                 	db	42
   178   001009  31                 	db	49
   179   00100A  32                 	db	50
   180   00100B  33                 	db	51
   181   00100C  2D                 	db	45
   182   00100D  23                 	db	35
   183   00100E  30                 	db	48
   184   00100F  3D                 	db	61
   185   001010  2B                 	db	43
   186   001011                     __end_of_btn_values:
   187                           	callstack 0
   188   000000                     _INTCON2bits	set	4081
   189   000000                     _EECON2	set	4007
   190   000000                     _ADCON1bits	set	4033
   191   000000                     _ADRESL	set	4035
   192   000000                     _ADRESH	set	4036
   193   000000                     _INTCONbits	set	4082
   194   000000                     _TRISD	set	3989
   195   000000                     _TRISC	set	3988
   196   000000                     _TRISB	set	3987
   197   000000                     _TRISE	set	3990
   198   000000                     _PORTBbits	set	3969
   199   000000                     _PIE1bits	set	3997
   200   000000                     _ADCON2bits	set	4032
   201   000000                     _ADCON0bits	set	4034
   202   000000                     _PORTE	set	3972
   203   000000                     _PORTD	set	3971
   204   000000                     _PORTC	set	3970
   205   000000                     _PORTB	set	3969
   206   000000                     _PORTA	set	3968
   207   000000                     _LATA	set	3977
   208   000000                     _TRISA	set	3986
   209   000000                     _EECON1bits	set	4006
   210   000000                     _EEDATA	set	4008
   211   000000                     _EEADR	set	4009
   212   000000                     _EEADRH	set	4010
   213   000000                     _PIR1bits	set	3998
   214   000000                     _INTCON3bits	set	4080
   215   000000                     _LATE	set	3981
   216   000000                     _LATD	set	3980
   217   000000                     _LATC	set	3979
   218   000000                     _LATB	set	3978
   219   001011                     STR_1:
   220   001011  25                 	db	37
   221   001012  69                 	db	105	;'i'
   222   001013  00                 	db	0
   223   001014  00                 	db	0	; dummy byte at the end
   224   000000                     
   225                           ; #config settings
   226                           
   227                           	psect	cinit
   228   0015FE                     __pcinit:
   229                           	callstack 0
   230   0015FE                     start_initialization:
   231                           	callstack 0
   232   0015FE                     __initialization:
   233                           	callstack 0
   234                           
   235                           ; Initialize objects allocated to COMRAM (63 bytes)
   236                           ; load TBLPTR registers with __pidataCOMRAM
   237   0015FE  0E86               	movlw	low __pidataCOMRAM
   238   001600  6EF6               	movwf	tblptrl,c
   239   001602  0E15               	movlw	high __pidataCOMRAM
   240   001604  6EF7               	movwf	tblptrh,c
   241   001606  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   242   001608  6EF8               	movwf	tblptru,c
   243   00160A  EE00  F001         	lfsr	0,__pdataCOMRAM
   244   00160E  EE10 F03F          	lfsr	1,63
   245   001612                     copy_data0:
   246   001612  0009               	tblrd		*+
   247   001614  CFF5 FFEE          	movff	tablat,postinc0
   248   001618  50E5               	movf	postdec1,w,c
   249   00161A  50E1               	movf	fsr1l,w,c
   250   00161C  E1FA               	bnz	copy_data0
   251                           
   252                           ; Clear objects allocated to COMRAM (39 bytes)
   253   00161E  EE00  F040         	lfsr	0,__pbssCOMRAM
   254   001622  0E27               	movlw	39
   255   001624                     clear_0:
   256   001624  6AEE               	clrf	postinc0,c
   257   001626  06E8               	decf	wreg,f,c
   258   001628  E1FD               	bnz	clear_0
   259   00162A                     end_of_initialization:
   260                           	callstack 0
   261   00162A                     __end_of__initialization:
   262                           	callstack 0
   263   00162A  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   264   00162C  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   265   00162E  0100               	movlb	0
   266   001630  EF51  F00A         	goto	_main	;jump to C main() function
   267                           
   268                           	psect	bssCOMRAM
   269   000040                     __pbssCOMRAM:
   270                           	callstack 0
   271   000040                     _RB7_Interrupt_Handler_Low:
   272                           	callstack 0
   273   000040                     	ds	2
   274   000042                     _RB7_Interrupt_Handler_High:
   275                           	callstack 0
   276   000042                     	ds	2
   277   000044                     _RB6_Interrupt_Handler_Low:
   278                           	callstack 0
   279   000044                     	ds	2
   280   000046                     _RB6_Interrupt_Handler_High:
   281                           	callstack 0
   282   000046                     	ds	2
   283   000048                     _RB5_Interrupt_Handler_Low:
   284                           	callstack 0
   285   000048                     	ds	2
   286   00004A                     _RB5_Interrupt_Handler_High:
   287                           	callstack 0
   288   00004A                     	ds	2
   289   00004C                     _RB4_Interrupt_Handler_Low:
   290                           	callstack 0
   291   00004C                     	ds	2
   292   00004E                     _RB4_Interrupt_Handler_High:
   293                           	callstack 0
   294   00004E                     	ds	2
   295   000050                     _INT2_Interrupt_Handler:
   296                           	callstack 0
   297   000050                     	ds	2
   298   000052                     _INT1_Interrupt_Handler:
   299                           	callstack 0
   300   000052                     	ds	2
   301   000054                     _INT0_Interrupt_Handler:
   302                           	callstack 0
   303   000054                     	ds	2
   304   000056                     __ADC_Interrupt_Handler:
   305                           	callstack 0
   306   000056                     	ds	2
   307   000058                     Relay_off@F3490:
   308                           	callstack 0
   309   000058                     	ds	1
   310   000059                     Relay_on@F3485:
   311                           	callstack 0
   312   000059                     	ds	1
   313   00005A                     Relay_initialize@F3480:
   314                           	callstack 0
   315   00005A                     	ds	1
   316   00005B                     led_toggle_status@F3497:
   317                           	callstack 0
   318   00005B                     	ds	1
   319   00005C                     led_turn_off@F3492:
   320                           	callstack 0
   321   00005C                     	ds	1
   322   00005D                     led_turn_on@F3487:
   323                           	callstack 0
   324   00005D                     	ds	1
   325   00005E                     led_intialize@F3482:
   326                           	callstack 0
   327   00005E                     	ds	1
   328   00005F                     _re_4:
   329                           	callstack 0
   330   00005F                     	ds	2
   331   000061                     _re_3:
   332                           	callstack 0
   333   000061                     	ds	2
   334   000063                     _re_2:
   335                           	callstack 0
   336   000063                     	ds	2
   337   000065                     _re_1:
   338                           	callstack 0
   339   000065                     	ds	2
   340                           
   341                           	psect	dataCOMRAM
   342   000001                     __pdataCOMRAM:
   343                           	callstack 0
   344   000001                     _port_registers:
   345                           	callstack 0
   346   000001                     	ds	10
   347   00000B                     _lat_registers:
   348                           	callstack 0
   349   00000B                     	ds	10
   350   000015                     _tris_registers:
   351                           	callstack 0
   352   000015                     	ds	10
   353   00001F                     _ret:
   354                           	callstack 0
   355   00001F                     	ds	1
   356   000020                     _RB7_f:
   357                           	callstack 0
   358   000020                     	ds	1
   359   000021                     _RB6_f:
   360                           	callstack 0
   361   000021                     	ds	1
   362   000022                     _RB5_f:
   363                           	callstack 0
   364   000022                     	ds	1
   365   000023                     _RB4_f:
   366                           	callstack 0
   367   000023                     	ds	1
   368   000024                     _adc_4:
   369                           	callstack 0
   370   000024                     	ds	7
   371   00002B                     _adc_3:
   372                           	callstack 0
   373   00002B                     	ds	7
   374   000032                     _adc_2:
   375                           	callstack 0
   376   000032                     	ds	7
   377   000039                     _adc_1:
   378                           	callstack 0
   379   000039                     	ds	7
   380                           
   381                           	psect	cstackCOMRAM
   382   000067                     __pcstackCOMRAM:
   383                           	callstack 0
   384   000067                     RB4_ISR@source:
   385                           	callstack 0
   386   000067                     RB5_ISR@source:
   387                           	callstack 0
   388   000067                     RB6_ISR@source:
   389                           	callstack 0
   390   000067                     RB7_ISR@source:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0x0
   394   000067                     	ds	1
   395   000068                     ??_adc_input_channel_port_configure:
   396   000068                     ADC_Start_Conversion@adc:
   397                           	callstack 0
   398   000068                     ADC_Is_Conversion_Done@adc:
   399                           	callstack 0
   400   000068                     ADC_Get_Conversion_Result@adc:
   401                           	callstack 0
   402   000068                     adc_select_result_format@adc:
   403                           	callstack 0
   404   000068                     adc_select_voltage_ref@adc:
   405                           	callstack 0
   406                           
   407                           ; 1 bytes @ 0x1
   408   000068                     	ds	1
   409   000069                     ADC_Start_Conversion@ret:
   410                           	callstack 0
   411   000069                     ADC_Is_Conversion_Done@conversion_status:
   412                           	callstack 0
   413   000069                     ADC_Get_Conversion_Result@result:
   414                           	callstack 0
   415                           
   416                           ; 1 bytes @ 0x2
   417   000069                     	ds	1
   418   00006A                     ??_ADC_Get_Conversion_Result:
   419   00006A                     ADC_Is_Conversion_Done@ret:
   420                           	callstack 0
   421   00006A                     adc_input_channel_port_configure@channel:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0x3
   425   00006A                     	ds	1
   426   00006B                     ADC_Init@adc:
   427                           	callstack 0
   428   00006B                     ADC_Select_Channel@adc:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0x4
   432   00006B                     	ds	1
   433   00006C                     ??_ADC_Init:
   434   00006C                     ADC_Select_Channel@channel:
   435                           	callstack 0
   436   00006C                     ADC_Get_Conversion_Result@ret:
   437                           	callstack 0
   438                           
   439                           ; 1 bytes @ 0x5
   440   00006C                     	ds	1
   441   00006D                     ??_ADC_Select_Channel:
   442   00006D                     ADC_Init@ret:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x6
   446   00006D                     	ds	1
   447   00006E                     ADC_Select_Channel@ret:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x7
   451   00006E                     	ds	1
   452   00006F                     ADC_Get_Conversion_Blocking@adc:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0x8
   456   00006F                     	ds	1
   457   000070                     ADC_Get_Conversion_Blocking@channel:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0x9
   461   000070                     	ds	1
   462   000071                     ADC_Get_Conversion_Blocking@result:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0xA
   466   000071                     	ds	1
   467   000072                     ADC_Get_Conversion_Blocking@conversion_status:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0xB
   471   000072                     	ds	1
   472   000073                     ADC_Get_Conversion_Blocking@ret:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0xC
   476   000073                     	ds	1
   477   000074                     
   478                           ; 1 bytes @ 0xD
   479 ;;
   480 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   481 ;;
   482 ;; *************** function _main *****************
   483 ;; Defined at:
   484 ;;		line 42 in file "app.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  2  860[None  ] int 
   491 ;; Registers used:
   492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;Total ram usage:        0 bytes
   503 ;; Hardware stack levels required when called: 5
   504 ;; This function calls:
   505 ;;		_ADC_Get_Conversion_Blocking
   506 ;;		_Application_initialize
   507 ;; This function is called by:
   508 ;;		Startup code after reset
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text0
   513   0014A2                     __ptext0:
   514                           	callstack 0
   515   0014A2                     _main:
   516                           	callstack 26
   517   0014A2                     
   518                           ;app.c: 44:     Application_initialize();
   519   0014A2  EC1A  F00B         	call	_Application_initialize	;wreg free
   520   0014A6                     l861:
   521                           
   522                           ;app.c: 47:         ret = ADC_Get_Conversion_Blocking(&adc_1, ADC_CHANNEL_AN0, &re_1);
   523   0014A6  0E39               	movlw	low _adc_1
   524   0014A8  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   525   0014AA  0E00               	movlw	0
   526   0014AC  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   527   0014AE  0E65               	movlw	low _re_1
   528   0014B0  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   529   0014B2  EC18  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   530   0014B6  6E1F               	movwf	_ret^0,c
   531                           
   532                           ;app.c: 48:         ret = ADC_Get_Conversion_Blocking(&adc_2, ADC_CHANNEL_AN1, &re_2);
   533   0014B8  0E32               	movlw	low _adc_2
   534   0014BA  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   535   0014BC  0E01               	movlw	1
   536   0014BE  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   537   0014C0  0E63               	movlw	low _re_2
   538   0014C2  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   539   0014C4  EC18  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   540   0014C8  6E1F               	movwf	_ret^0,c
   541                           
   542                           ;app.c: 49:         ret = ADC_Get_Conversion_Blocking(&adc_3, ADC_CHANNEL_AN2, &re_3);
   543   0014CA  0E2B               	movlw	low _adc_3
   544   0014CC  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   545   0014CE  0E02               	movlw	2
   546   0014D0  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   547   0014D2  0E61               	movlw	low _re_3
   548   0014D4  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   549   0014D6  EC18  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   550   0014DA  6E1F               	movwf	_ret^0,c
   551                           
   552                           ;app.c: 50:         ret = ADC_Get_Conversion_Blocking(&adc_4, ADC_CHANNEL_AN3, &re_4);
   553   0014DC  0E24               	movlw	low _adc_4
   554   0014DE  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   555   0014E0  0E03               	movlw	3
   556   0014E2  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   557   0014E4  0E5F               	movlw	low _re_4
   558   0014E6  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   559   0014E8  EC18  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   560   0014EC  6E1F               	movwf	_ret^0,c
   561   0014EE  EF53  F00A         	goto	l861
   562   0014F2  EF07  F000         	goto	start
   563   0014F6                     __end_of_main:
   564                           	callstack 0
   565                           
   566 ;; *************** function _Application_initialize *****************
   567 ;; Defined at:
   568 ;;		line 56 in file "app.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;		None
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;Total ram usage:        0 bytes
   587 ;; Hardware stack levels used: 1
   588 ;; Hardware stack levels required when called: 4
   589 ;; This function calls:
   590 ;;		_ADC_Init
   591 ;;		_ecu_layer_initialize
   592 ;; This function is called by:
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text1
   598   001634                     __ptext1:
   599                           	callstack 0
   600   001634                     _Application_initialize:
   601                           	callstack 26
   602   001634                     
   603                           ;app.c: 57:     ecu_layer_initialize();
   604   001634  EC8F  F00B         	call	_ecu_layer_initialize	;wreg free
   605   001638                     
   606                           ;app.c: 58:     ret = ADC_Init(&adc_1);
   607   001638  0E39               	movlw	low _adc_1
   608   00163A  6E6B               	movwf	ADC_Init@adc^0,c
   609   00163C  ECC2  F009         	call	_ADC_Init	;wreg free
   610   001640  6E1F               	movwf	_ret^0,c
   611   001642                     
   612                           ;app.c: 59:     ret = ADC_Init(&adc_2);
   613   001642  0E32               	movlw	low _adc_2
   614   001644  6E6B               	movwf	ADC_Init@adc^0,c
   615   001646  ECC2  F009         	call	_ADC_Init	;wreg free
   616   00164A  6E1F               	movwf	_ret^0,c
   617   00164C                     
   618                           ;app.c: 60:     ret = ADC_Init(&adc_3);
   619   00164C  0E2B               	movlw	low _adc_3
   620   00164E  6E6B               	movwf	ADC_Init@adc^0,c
   621   001650  ECC2  F009         	call	_ADC_Init	;wreg free
   622   001654  6E1F               	movwf	_ret^0,c
   623   001656                     
   624                           ;app.c: 61:     ret = ADC_Init(&adc_4);
   625   001656  0E24               	movlw	low _adc_4
   626   001658  6E6B               	movwf	ADC_Init@adc^0,c
   627   00165A  ECC2  F009         	call	_ADC_Init	;wreg free
   628   00165E  6E1F               	movwf	_ret^0,c
   629   001660  0012               	return		;funcret
   630   001662                     __end_of_Application_initialize:
   631                           	callstack 0
   632                           
   633 ;; *************** function _ecu_layer_initialize *****************
   634 ;; Defined at:
   635 ;;		line 11 in file "ECU_LAYER/ecu_layer_init.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  ret             1    0        unsigned char 
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;Total ram usage:        0 bytes
   654 ;; Hardware stack levels used: 1
   655 ;; Hardware stack levels required when called: 2
   656 ;; This function calls:
   657 ;;		Nothing
   658 ;; This function is called by:
   659 ;;		_Application_initialize
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text2
   664   00171E                     __ptext2:
   665                           	callstack 0
   666   00171E                     _ecu_layer_initialize:
   667                           	callstack 27
   668   00171E  0012               	return		;funcret
   669   001720                     __end_of_ecu_layer_initialize:
   670                           	callstack 0
   671                           
   672 ;; *************** function _ADC_Init *****************
   673 ;; Defined at:
   674 ;;		line 26 in file "MCAL_LAYER/ADC/hal_adc.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  adc             1    4[COMRAM] PTR const struct .
   677 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  ret             1    6[COMRAM] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      unsigned char 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   689 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;Total ram usage:        3 bytes
   694 ;; Hardware stack levels used: 1
   695 ;; Hardware stack levels required when called: 3
   696 ;; This function calls:
   697 ;;		_adc_input_channel_port_configure
   698 ;;		_adc_select_result_format
   699 ;;		_adc_select_voltage_ref
   700 ;; This function is called by:
   701 ;;		_Application_initialize
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text3
   706   001384                     __ptext3:
   707                           	callstack 0
   708   001384                     _ADC_Init:
   709                           	callstack 26
   710   001384                     
   711                           ;MCAL_LAYER/ADC/hal_adc.c: 27:     Std_ReturnType ret = (Std_ReturnType)0X01;
   712   001384  0E01               	movlw	1
   713   001386  6E6D               	movwf	ADC_Init@ret^0,c
   714                           
   715                           ;MCAL_LAYER/ADC/hal_adc.c: 30:     if (((void*)0) == adc) {
   716   001388  506B               	movf	ADC_Init@adc^0,w,c
   717   00138A  A4D8               	btfss	status,2,c
   718   00138C  EFCA  F009         	goto	u1701
   719   001390  EFCC  F009         	goto	u1700
   720   001394                     u1701:
   721   001394  EFD0  F009         	goto	l353
   722   001398                     u1700:
   723   001398                     
   724                           ;MCAL_LAYER/ADC/hal_adc.c: 31:         ret = (Std_ReturnType)0X00;
   725   001398  0E00               	movlw	0
   726   00139A  6E6D               	movwf	ADC_Init@ret^0,c
   727                           
   728                           ;MCAL_LAYER/ADC/hal_adc.c: 32:     } else {
   729   00139C  EF16  F00A         	goto	l3042
   730   0013A0                     l353:
   731                           
   732                           ;MCAL_LAYER/ADC/hal_adc.c: 34:         (ADCON0bits.ADON = 0);
   733   0013A0  90C2               	bcf	194,0,c	;volatile
   734   0013A2                     
   735                           ;MCAL_LAYER/ADC/hal_adc.c: 37:         ADCON2bits.ACQT = adc->adc_acquisition;
   736   0013A2  506B               	movf	ADC_Init@adc^0,w,c
   737   0013A4  6ED9               	movwf	fsr2l,c
   738   0013A6  6ADA               	clrf	fsr2h,c
   739   0013A8  0E02               	movlw	2
   740   0013AA  26D9               	addwf	fsr2l,f,c
   741   0013AC  50DF               	movf	indf2,w,c
   742   0013AE  6E6C               	movwf	??_ADC_Init^0,c
   743   0013B0  466C               	rlncf	??_ADC_Init^0,f,c
   744   0013B2  466C               	rlncf	??_ADC_Init^0,f,c
   745   0013B4  466C               	rlncf	??_ADC_Init^0,f,c
   746   0013B6  50C0               	movf	192,w,c	;volatile
   747   0013B8  186C               	xorwf	??_ADC_Init^0,w,c
   748   0013BA  0BC7               	andlw	-57
   749   0013BC  186C               	xorwf	??_ADC_Init^0,w,c
   750   0013BE  6EC0               	movwf	192,c	;volatile
   751                           
   752                           ;MCAL_LAYER/ADC/hal_adc.c: 38:         ADCON2bits.ADCS = adc->adc_conversion_clock;
   753   0013C0  506B               	movf	ADC_Init@adc^0,w,c
   754   0013C2  6ED9               	movwf	fsr2l,c
   755   0013C4  6ADA               	clrf	fsr2h,c
   756   0013C6  0E03               	movlw	3
   757   0013C8  26D9               	addwf	fsr2l,f,c
   758   0013CA  50DF               	movf	indf2,w,c
   759   0013CC  6E6C               	movwf	??_ADC_Init^0,c
   760   0013CE  50C0               	movf	192,w,c	;volatile
   761   0013D0  186C               	xorwf	??_ADC_Init^0,w,c
   762   0013D2  0BF8               	andlw	-8
   763   0013D4  186C               	xorwf	??_ADC_Init^0,w,c
   764   0013D6  6EC0               	movwf	192,c	;volatile
   765                           
   766                           ;MCAL_LAYER/ADC/hal_adc.c: 41:         ADCON0bits.CHS = adc->adc_channel;
   767   0013D8  506B               	movf	ADC_Init@adc^0,w,c
   768   0013DA  6ED9               	movwf	fsr2l,c
   769   0013DC  6ADA               	clrf	fsr2h,c
   770   0013DE  0E04               	movlw	4
   771   0013E0  26D9               	addwf	fsr2l,f,c
   772   0013E2  50DF               	movf	indf2,w,c
   773   0013E4  6E6C               	movwf	??_ADC_Init^0,c
   774   0013E6  466C               	rlncf	??_ADC_Init^0,f,c
   775   0013E8  466C               	rlncf	??_ADC_Init^0,f,c
   776   0013EA  50C2               	movf	194,w,c	;volatile
   777   0013EC  186C               	xorwf	??_ADC_Init^0,w,c
   778   0013EE  0BC3               	andlw	-61
   779   0013F0  186C               	xorwf	??_ADC_Init^0,w,c
   780   0013F2  6EC2               	movwf	194,c	;volatile
   781   0013F4                     
   782                           ;MCAL_LAYER/ADC/hal_adc.c: 42:         adc_input_channel_port_configure(adc->adc_channel
      +                          );
   783   0013F4  506B               	movf	ADC_Init@adc^0,w,c
   784   0013F6  6ED9               	movwf	fsr2l,c
   785   0013F8  6ADA               	clrf	fsr2h,c
   786   0013FA  0E04               	movlw	4
   787   0013FC  26D9               	addwf	fsr2l,f,c
   788   0013FE  50DF               	movf	indf2,w,c
   789   001400  ECFC  F008         	call	_adc_input_channel_port_configure
   790   001404                     
   791                           ;MCAL_LAYER/ADC/hal_adc.c: 45:         adc_select_result_format(adc);
   792   001404  C06B  F068         	movff	ADC_Init@adc,adc_select_result_format@adc
   793   001408  EC31  F00B         	call	_adc_select_result_format	;wreg free
   794   00140C                     
   795                           ;MCAL_LAYER/ADC/hal_adc.c: 46:         adc_select_voltage_ref(adc);
   796   00140C  C06B  F068         	movff	ADC_Init@adc,adc_select_voltage_ref@adc
   797   001410  ECA0  F00A         	call	_adc_select_voltage_ref	;wreg free
   798   001414                     
   799                           ;MCAL_LAYER/ADC/hal_adc.c: 49:         (PIE1bits.ADIE = 1);
   800   001414  8C9D               	bsf	157,6,c	;volatile
   801   001416                     
   802                           ;MCAL_LAYER/ADC/hal_adc.c: 50:         (INTCONbits.GIEH = 1);
   803   001416  8EF2               	bsf	242,7,c	;volatile
   804   001418                     
   805                           ;MCAL_LAYER/ADC/hal_adc.c: 51:         (INTCONbits.PEIE = 1);
   806   001418  8CF2               	bsf	242,6,c	;volatile
   807   00141A                     
   808                           ;MCAL_LAYER/ADC/hal_adc.c: 52:         (PIR1bits.ADIF = 0);
   809   00141A  9C9E               	bcf	158,6,c	;volatile
   810   00141C                     
   811                           ;MCAL_LAYER/ADC/hal_adc.c: 61:         _ADC_Interrupt_Handler = adc->ADC_Interrupt_Handl
      +                          er;
   812   00141C  506B               	movf	ADC_Init@adc^0,w,c
   813   00141E  6ED9               	movwf	fsr2l,c
   814   001420  6ADA               	clrf	fsr2h,c
   815   001422  CFDE F056          	movff	postinc2,__ADC_Interrupt_Handler
   816   001426  CFDD F057          	movff	postdec2,__ADC_Interrupt_Handler+1
   817   00142A                     
   818                           ;MCAL_LAYER/ADC/hal_adc.c: 66:         (ADCON0bits.ADON = 1);
   819   00142A  80C2               	bsf	194,0,c	;volatile
   820   00142C                     l3042:
   821                           
   822                           ;MCAL_LAYER/ADC/hal_adc.c: 69:     return ret;
   823   00142C  506D               	movf	ADC_Init@ret^0,w,c
   824   00142E  0012               	return		;funcret
   825   001430                     __end_of_ADC_Init:
   826                           	callstack 0
   827                           
   828 ;; *************** function _adc_select_voltage_ref *****************
   829 ;; Defined at:
   830 ;;		line 303 in file "MCAL_LAYER/ADC/hal_adc.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  adc             1    1[COMRAM] PTR const struct .
   833 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   845 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   849 ;;Total ram usage:        1 bytes
   850 ;; Hardware stack levels used: 1
   851 ;; Hardware stack levels required when called: 2
   852 ;; This function calls:
   853 ;;		Nothing
   854 ;; This function is called by:
   855 ;;		_ADC_Init
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text4
   860   001540                     __ptext4:
   861                           	callstack 0
   862   001540                     _adc_select_voltage_ref:
   863                           	callstack 26
   864   001540                     
   865                           ;MCAL_LAYER/ADC/hal_adc.c: 304:     if (0X01U == adc->voltage_ref) {
   866   001540  5068               	movf	adc_select_voltage_ref@adc^0,w,c
   867   001542  6ED9               	movwf	fsr2l,c
   868   001544  6ADA               	clrf	fsr2h,c
   869   001546  0E06               	movlw	6
   870   001548  26D9               	addwf	fsr2l,f,c
   871   00154A  A0DF               	btfss	indf2,0,c
   872   00154C  EFAA  F00A         	goto	u1681
   873   001550  EFAC  F00A         	goto	u1680
   874   001554                     u1681:
   875   001554  EFB0  F00A         	goto	l3016
   876   001558                     u1680:
   877   001558  8AC1               	bsf	193,5,c	;volatile
   878   00155A  88C1               	bsf	193,4,c	;volatile
   879   00155C  EFC2  F00A         	goto	l440
   880   001560                     l3016:
   881   001560  5068               	movf	adc_select_voltage_ref@adc^0,w,c
   882   001562  6ED9               	movwf	fsr2l,c
   883   001564  6ADA               	clrf	fsr2h,c
   884   001566  0E06               	movlw	6
   885   001568  26D9               	addwf	fsr2l,f,c
   886   00156A  B0DF               	btfsc	indf2,0,c
   887   00156C  EFBA  F00A         	goto	u1691
   888   001570  EFBC  F00A         	goto	u1690
   889   001574                     u1691:
   890   001574  EFC0  F00A         	goto	l438
   891   001578                     u1690:
   892   001578  9AC1               	bcf	193,5,c	;volatile
   893   00157A  98C1               	bcf	193,4,c	;volatile
   894   00157C  EFC2  F00A         	goto	l440
   895   001580                     l438:
   896   001580  9AC1               	bcf	193,5,c	;volatile
   897   001582  98C1               	bcf	193,4,c	;volatile
   898   001584                     l440:
   899   001584  0012               	return		;funcret
   900   001586                     __end_of_adc_select_voltage_ref:
   901                           	callstack 0
   902                           
   903 ;; *************** function _adc_select_result_format *****************
   904 ;; Defined at:
   905 ;;		line 289 in file "MCAL_LAYER/ADC/hal_adc.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  adc             1    1[COMRAM] PTR const struct .
   908 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;		None
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   920 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;Total ram usage:        1 bytes
   925 ;; Hardware stack levels used: 1
   926 ;; Hardware stack levels required when called: 2
   927 ;; This function calls:
   928 ;;		Nothing
   929 ;; This function is called by:
   930 ;;		_ADC_Init
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text5
   935   001662                     __ptext5:
   936                           	callstack 0
   937   001662                     _adc_select_result_format:
   938                           	callstack 26
   939   001662                     
   940                           ;MCAL_LAYER/ADC/hal_adc.c: 290:     if (adc->result_format) {
   941   001662  5068               	movf	adc_select_result_format@adc^0,w,c
   942   001664  6ED9               	movwf	fsr2l,c
   943   001666  6ADA               	clrf	fsr2h,c
   944   001668  0E06               	movlw	6
   945   00166A  26D9               	addwf	fsr2l,f,c
   946   00166C  A2DF               	btfss	indf2,1,c
   947   00166E  EF3B  F00B         	goto	u1671
   948   001672  EF3D  F00B         	goto	u1670
   949   001676                     u1671:
   950   001676  EF40  F00B         	goto	l425
   951   00167A                     u1670:
   952   00167A                     
   953                           ;MCAL_LAYER/ADC/hal_adc.c: 291:         (ADCON2bits.ADFM=1);
   954   00167A  8EC0               	bsf	192,7,c	;volatile
   955                           
   956                           ;MCAL_LAYER/ADC/hal_adc.c: 292:     } else {
   957   00167C  EF41  F00B         	goto	l427
   958   001680                     l425:
   959                           
   960                           ;MCAL_LAYER/ADC/hal_adc.c: 293:         (ADCON2bits.ADFM=0);
   961   001680  9EC0               	bcf	192,7,c	;volatile
   962   001682                     l427:
   963   001682  0012               	return		;funcret
   964   001684                     __end_of_adc_select_result_format:
   965                           	callstack 0
   966                           
   967 ;; *************** function _ADC_Get_Conversion_Blocking *****************
   968 ;; Defined at:
   969 ;;		line 202 in file "MCAL_LAYER/ADC/hal_adc.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  adc             1    8[COMRAM] PTR const struct .
   972 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   973 ;;  channel         1    9[COMRAM] enum E3466
   974 ;;  result          1   10[COMRAM] PTR unsigned short 
   975 ;;		 -> re_4(2), re_3(2), re_2(2), re_1(2), 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  ret             1   12[COMRAM] unsigned char 
   978 ;;  conversion_s    1   11[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      unsigned char 
   981 ;; Registers used:
   982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   988 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;Total ram usage:        5 bytes
   993 ;; Hardware stack levels used: 1
   994 ;; Hardware stack levels required when called: 4
   995 ;; This function calls:
   996 ;;		_ADC_Get_Conversion_Result
   997 ;;		_ADC_Is_Conversion_Done
   998 ;;		_ADC_Select_Channel
   999 ;;		_ADC_Start_Conversion
  1000 ;; This function is called by:
  1001 ;;		_main
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text6
  1006   001430                     __ptext6:
  1007                           	callstack 0
  1008   001430                     _ADC_Get_Conversion_Blocking:
  1009                           	callstack 26
  1010   001430                     
  1011                           ;MCAL_LAYER/ADC/hal_adc.c: 203:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1012   001430  0E01               	movlw	1
  1013   001432  6E73               	movwf	ADC_Get_Conversion_Blocking@ret^0,c
  1014                           
  1015                           ;MCAL_LAYER/ADC/hal_adc.c: 204:     uint8_t conversion_status;;MCAL_LAYER/ADC/hal_adc.c:
      +                           207:     if (((void*)0) == adc || ((void*)0) == result) {
  1016   001434  506F               	movf	ADC_Get_Conversion_Blocking@adc^0,w,c
  1017   001436  B4D8               	btfsc	status,2,c
  1018   001438  EF20  F00A         	goto	u1811
  1019   00143C  EF22  F00A         	goto	u1810
  1020   001440                     u1811:
  1021   001440  EF2A  F00A         	goto	l3102
  1022   001444                     u1810:
  1023   001444  5071               	movf	ADC_Get_Conversion_Blocking@result^0,w,c
  1024   001446  A4D8               	btfss	status,2,c
  1025   001448  EF28  F00A         	goto	u1821
  1026   00144C  EF2A  F00A         	goto	u1820
  1027   001450                     u1821:
  1028   001450  EF2E  F00A         	goto	l3104
  1029   001454                     u1820:
  1030   001454                     l3102:
  1031                           
  1032                           ;MCAL_LAYER/ADC/hal_adc.c: 208:         ret = (Std_ReturnType)0X00;
  1033   001454  0E00               	movlw	0
  1034   001456  6E73               	movwf	ADC_Get_Conversion_Blocking@ret^0,c
  1035                           
  1036                           ;MCAL_LAYER/ADC/hal_adc.c: 209:     } else {
  1037   001458  EF4F  F00A         	goto	l3110
  1038   00145C                     l3104:
  1039                           
  1040                           ;MCAL_LAYER/ADC/hal_adc.c: 211:         ret &= ADC_Select_Channel(adc, channel);
  1041   00145C  C06F  F06B         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Select_Channel@adc
  1042   001460  C070  F06C         	movff	ADC_Get_Conversion_Blocking@channel,ADC_Select_Channel@channel
  1043   001464  ECE3  F00A         	call	_ADC_Select_Channel	;wreg free
  1044   001468  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1045                           
  1046                           ;MCAL_LAYER/ADC/hal_adc.c: 212:         ret &= ADC_Start_Conversion(adc);
  1047   00146A  C06F  F068         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Start_Conversion@adc
  1048   00146E  EC42  F00B         	call	_ADC_Start_Conversion	;wreg free
  1049   001472  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1050   001474                     
  1051                           ;MCAL_LAYER/ADC/hal_adc.c: 213:         ret &= ADC_Is_Conversion_Done(adc, &conversion_s
      +                          tatus);
  1052   001474  C06F  F068         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Is_Conversion_Done@adc
  1053   001478  0E72               	movlw	low ADC_Get_Conversion_Blocking@conversion_status
  1054   00147A  6E69               	movwf	ADC_Is_Conversion_Done@conversion_status^0,c
  1055   00147C  EC7B  F00A         	call	_ADC_Is_Conversion_Done	;wreg free
  1056   001480  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1057   001482                     l395:
  1058   001482  B2C2               	btfsc	194,1,c	;volatile
  1059   001484  EF46  F00A         	goto	u1831
  1060   001488  EF48  F00A         	goto	u1830
  1061   00148C                     u1831:
  1062   00148C  EF41  F00A         	goto	l395
  1063   001490                     u1830:
  1064   001490                     
  1065                           ;MCAL_LAYER/ADC/hal_adc.c: 219:         ret &= ADC_Get_Conversion_Result(adc, result);
  1066   001490  C06F  F068         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Get_Conversion_Result@adc
  1067   001494  C071  F069         	movff	ADC_Get_Conversion_Blocking@result,ADC_Get_Conversion_Result@result
  1068   001498  EC68  F009         	call	_ADC_Get_Conversion_Result	;wreg free
  1069   00149C  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1070   00149E                     l3110:
  1071                           
  1072                           ;MCAL_LAYER/ADC/hal_adc.c: 222:     return ret;
  1073   00149E  5073               	movf	ADC_Get_Conversion_Blocking@ret^0,w,c
  1074   0014A0  0012               	return		;funcret
  1075   0014A2                     __end_of_ADC_Get_Conversion_Blocking:
  1076                           	callstack 0
  1077                           
  1078 ;; *************** function _ADC_Start_Conversion *****************
  1079 ;; Defined at:
  1080 ;;		line 132 in file "MCAL_LAYER/ADC/hal_adc.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  adc             1    1[COMRAM] PTR const struct .
  1083 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  ret             1    2[COMRAM] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      unsigned char 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1095 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;Total ram usage:        2 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; Hardware stack levels required when called: 2
  1102 ;; This function calls:
  1103 ;;		Nothing
  1104 ;; This function is called by:
  1105 ;;		_ADC_Get_Conversion_Blocking
  1106 ;;		_ADC_Get_Conversion_Interrupt
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text7
  1111   001684                     __ptext7:
  1112                           	callstack 0
  1113   001684                     _ADC_Start_Conversion:
  1114                           	callstack 27
  1115   001684                     
  1116                           ;MCAL_LAYER/ADC/hal_adc.c: 133:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1117   001684  0E01               	movlw	1
  1118   001686  6E69               	movwf	ADC_Start_Conversion@ret^0,c
  1119                           
  1120                           ;MCAL_LAYER/ADC/hal_adc.c: 136:     if (((void*)0) == adc) {
  1121   001688  5068               	movf	ADC_Start_Conversion@adc^0,w,c
  1122   00168A  A4D8               	btfss	status,2,c
  1123   00168C  EF4A  F00B         	goto	u1721
  1124   001690  EF4C  F00B         	goto	u1720
  1125   001694                     u1721:
  1126   001694  EF50  F00B         	goto	l368
  1127   001698                     u1720:
  1128   001698                     
  1129                           ;MCAL_LAYER/ADC/hal_adc.c: 137:         ret = (Std_ReturnType)0X00;
  1130   001698  0E00               	movlw	0
  1131   00169A  6E69               	movwf	ADC_Start_Conversion@ret^0,c
  1132                           
  1133                           ;MCAL_LAYER/ADC/hal_adc.c: 138:     } else {
  1134   00169C  EF51  F00B         	goto	l3062
  1135   0016A0                     l368:
  1136                           
  1137                           ;MCAL_LAYER/ADC/hal_adc.c: 140:         (ADCON0bits.GO_nDONE=1);
  1138   0016A0  82C2               	bsf	194,1,c	;volatile
  1139   0016A2                     l3062:
  1140                           
  1141                           ;MCAL_LAYER/ADC/hal_adc.c: 143:     return ret;
  1142   0016A2  5069               	movf	ADC_Start_Conversion@ret^0,w,c
  1143   0016A4  0012               	return		;funcret
  1144   0016A6                     __end_of_ADC_Start_Conversion:
  1145                           	callstack 0
  1146                           
  1147 ;; *************** function _ADC_Select_Channel *****************
  1148 ;; Defined at:
  1149 ;;		line 111 in file "MCAL_LAYER/ADC/hal_adc.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;  adc             1    4[COMRAM] PTR const struct .
  1152 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1153 ;;  channel         1    5[COMRAM] enum E3466
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  ret             1    7[COMRAM] unsigned char 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      unsigned char 
  1158 ;; Registers used:
  1159 ;;		wreg, status,2, status,0, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1165 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1169 ;;Total ram usage:        4 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; Hardware stack levels required when called: 3
  1172 ;; This function calls:
  1173 ;;		_adc_input_channel_port_configure
  1174 ;; This function is called by:
  1175 ;;		_ADC_Get_Conversion_Blocking
  1176 ;;		_ADC_Get_Conversion_Interrupt
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text8
  1181   0015C6                     __ptext8:
  1182                           	callstack 0
  1183   0015C6                     _ADC_Select_Channel:
  1184                           	callstack 26
  1185   0015C6                     
  1186                           ;MCAL_LAYER/ADC/hal_adc.c: 112:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1187   0015C6  0E01               	movlw	1
  1188   0015C8  6E6E               	movwf	ADC_Select_Channel@ret^0,c
  1189                           
  1190                           ;MCAL_LAYER/ADC/hal_adc.c: 115:     if (((void*)0) == adc) {
  1191   0015CA  506B               	movf	ADC_Select_Channel@adc^0,w,c
  1192   0015CC  A4D8               	btfss	status,2,c
  1193   0015CE  EFEB  F00A         	goto	u1711
  1194   0015D2  EFED  F00A         	goto	u1710
  1195   0015D6                     u1711:
  1196   0015D6  EFF1  F00A         	goto	l3050
  1197   0015DA                     u1710:
  1198   0015DA                     
  1199                           ;MCAL_LAYER/ADC/hal_adc.c: 116:         ret = (Std_ReturnType)0X00;
  1200   0015DA  0E00               	movlw	0
  1201   0015DC  6E6E               	movwf	ADC_Select_Channel@ret^0,c
  1202                           
  1203                           ;MCAL_LAYER/ADC/hal_adc.c: 117:     } else {
  1204   0015DE  EFFD  F00A         	goto	l3054
  1205   0015E2                     l3050:
  1206                           
  1207                           ;MCAL_LAYER/ADC/hal_adc.c: 119:         ADCON0bits.CHS = channel;
  1208   0015E2  C06C  F06D         	movff	ADC_Select_Channel@channel,??_ADC_Select_Channel
  1209   0015E6  466D               	rlncf	??_ADC_Select_Channel^0,f,c
  1210   0015E8  466D               	rlncf	??_ADC_Select_Channel^0,f,c
  1211   0015EA  50C2               	movf	194,w,c	;volatile
  1212   0015EC  186D               	xorwf	??_ADC_Select_Channel^0,w,c
  1213   0015EE  0BC3               	andlw	-61
  1214   0015F0  186D               	xorwf	??_ADC_Select_Channel^0,w,c
  1215   0015F2  6EC2               	movwf	194,c	;volatile
  1216   0015F4                     
  1217                           ;MCAL_LAYER/ADC/hal_adc.c: 120:         adc_input_channel_port_configure(channel);
  1218   0015F4  506C               	movf	ADC_Select_Channel@channel^0,w,c
  1219   0015F6  ECFC  F008         	call	_adc_input_channel_port_configure
  1220   0015FA                     l3054:
  1221                           
  1222                           ;MCAL_LAYER/ADC/hal_adc.c: 123:     return ret;
  1223   0015FA  506E               	movf	ADC_Select_Channel@ret^0,w,c
  1224   0015FC  0012               	return		;funcret
  1225   0015FE                     __end_of_ADC_Select_Channel:
  1226                           	callstack 0
  1227                           
  1228 ;; *************** function _adc_input_channel_port_configure *****************
  1229 ;; Defined at:
  1230 ;;		line 251 in file "MCAL_LAYER/ADC/hal_adc.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  channel         1    wreg     enum E3466
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  channel         1    3[COMRAM] enum E3466
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, status,2, status,0
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;Total ram usage:        3 bytes
  1249 ;; Hardware stack levels used: 1
  1250 ;; Hardware stack levels required when called: 2
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_ADC_Init
  1255 ;;		_ADC_Select_Channel
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text9
  1260   0011F8                     __ptext9:
  1261                           	callstack 0
  1262   0011F8                     _adc_input_channel_port_configure:
  1263                           	callstack 26
  1264                           
  1265                           ;incstack = 0
  1266                           ;adc_input_channel_port_configure@channel stored from wreg
  1267   0011F8  6E6A               	movwf	adc_input_channel_port_configure@channel^0,c
  1268   0011FA                     
  1269                           ;MCAL_LAYER/ADC/hal_adc.c: 252:     switch (channel) {
  1270   0011FA  EF26  F009         	goto	l1584
  1271   0011FE                     l1558:
  1272   0011FE  8092               	bsf	146,0,c	;volatile
  1273                           
  1274                           ;MCAL_LAYER/ADC/hal_adc.c: 254:             break;
  1275   001200  EF67  F009         	goto	l422
  1276   001204                     l1560:
  1277   001204  8292               	bsf	146,1,c	;volatile
  1278                           
  1279                           ;MCAL_LAYER/ADC/hal_adc.c: 256:             break;
  1280   001206  EF67  F009         	goto	l422
  1281   00120A                     l1562:
  1282   00120A  8492               	bsf	146,2,c	;volatile
  1283                           
  1284                           ;MCAL_LAYER/ADC/hal_adc.c: 258:             break;
  1285   00120C  EF67  F009         	goto	l422
  1286   001210                     l1564:
  1287   001210  8692               	bsf	146,3,c	;volatile
  1288                           
  1289                           ;MCAL_LAYER/ADC/hal_adc.c: 260:             break;
  1290   001212  EF67  F009         	goto	l422
  1291   001216                     l1566:
  1292   001216  8A92               	bsf	146,5,c	;volatile
  1293                           
  1294                           ;MCAL_LAYER/ADC/hal_adc.c: 262:             break;
  1295   001218  EF67  F009         	goto	l422
  1296   00121C                     l1568:
  1297   00121C  8096               	bsf	150,0,c	;volatile
  1298                           
  1299                           ;MCAL_LAYER/ADC/hal_adc.c: 264:             break;
  1300   00121E  EF67  F009         	goto	l422
  1301   001222                     l1570:
  1302   001222  8296               	bsf	150,1,c	;volatile
  1303                           
  1304                           ;MCAL_LAYER/ADC/hal_adc.c: 266:             break;
  1305   001224  EF67  F009         	goto	l422
  1306   001228                     l1572:
  1307   001228  8496               	bsf	150,2,c	;volatile
  1308                           
  1309                           ;MCAL_LAYER/ADC/hal_adc.c: 268:             break;
  1310   00122A  EF67  F009         	goto	l422
  1311   00122E                     l1574:
  1312   00122E  8493               	bsf	147,2,c	;volatile
  1313                           
  1314                           ;MCAL_LAYER/ADC/hal_adc.c: 270:             break;
  1315   001230  EF67  F009         	goto	l422
  1316   001234                     l1576:
  1317   001234  8693               	bsf	147,3,c	;volatile
  1318                           
  1319                           ;MCAL_LAYER/ADC/hal_adc.c: 272:             break;
  1320   001236  EF67  F009         	goto	l422
  1321   00123A                     l1578:
  1322   00123A  8293               	bsf	147,1,c	;volatile
  1323                           
  1324                           ;MCAL_LAYER/ADC/hal_adc.c: 274:             break;
  1325   00123C  EF67  F009         	goto	l422
  1326   001240                     l1580:
  1327   001240  8893               	bsf	147,4,c	;volatile
  1328                           
  1329                           ;MCAL_LAYER/ADC/hal_adc.c: 276:             break;
  1330   001242  EF67  F009         	goto	l422
  1331   001246                     l1582:
  1332   001246  8093               	bsf	147,0,c	;volatile
  1333                           
  1334                           ;MCAL_LAYER/ADC/hal_adc.c: 278:             break;
  1335   001248  EF67  F009         	goto	l422
  1336   00124C                     l1584:
  1337   00124C  506A               	movf	adc_input_channel_port_configure@channel^0,w,c
  1338   00124E  6E68               	movwf	??_adc_input_channel_port_configure^0,c
  1339   001250  6A69               	clrf	(??_adc_input_channel_port_configure+1)^0,c
  1340                           
  1341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1342                           ; Switch size 1, requested type "simple"
  1343                           ; Number of cases is 1, Range of values is 0 to 0
  1344                           ; switch strategies available:
  1345                           ; Name         Instructions Cycles
  1346                           ; simple_byte            4     3 (average)
  1347                           ;	Chosen strategy is simple_byte
  1348   001252  5069               	movf	(??_adc_input_channel_port_configure+1)^0,w,c
  1349   001254  0A00               	xorlw	0	; case 0
  1350   001256  B4D8               	btfsc	status,2,c
  1351   001258  EF30  F009         	goto	l3140
  1352   00125C  EF67  F009         	goto	l422
  1353   001260                     l3140:
  1354                           
  1355                           ; Switch size 1, requested type "simple"
  1356                           ; Number of cases is 13, Range of values is 0 to 12
  1357                           ; switch strategies available:
  1358                           ; Name         Instructions Cycles
  1359                           ; simple_byte           40    21 (average)
  1360                           ;	Chosen strategy is simple_byte
  1361   001260  5068               	movf	??_adc_input_channel_port_configure^0,w,c
  1362   001262  0A00               	xorlw	0	; case 0
  1363   001264  B4D8               	btfsc	status,2,c
  1364   001266  EFFF  F008         	goto	l1558
  1365   00126A  0A01               	xorlw	1	; case 1
  1366   00126C  B4D8               	btfsc	status,2,c
  1367   00126E  EF02  F009         	goto	l1560
  1368   001272  0A03               	xorlw	3	; case 2
  1369   001274  B4D8               	btfsc	status,2,c
  1370   001276  EF05  F009         	goto	l1562
  1371   00127A  0A01               	xorlw	1	; case 3
  1372   00127C  B4D8               	btfsc	status,2,c
  1373   00127E  EF08  F009         	goto	l1564
  1374   001282  0A07               	xorlw	7	; case 4
  1375   001284  B4D8               	btfsc	status,2,c
  1376   001286  EF0B  F009         	goto	l1566
  1377   00128A  0A01               	xorlw	1	; case 5
  1378   00128C  B4D8               	btfsc	status,2,c
  1379   00128E  EF0E  F009         	goto	l1568
  1380   001292  0A03               	xorlw	3	; case 6
  1381   001294  B4D8               	btfsc	status,2,c
  1382   001296  EF11  F009         	goto	l1570
  1383   00129A  0A01               	xorlw	1	; case 7
  1384   00129C  B4D8               	btfsc	status,2,c
  1385   00129E  EF14  F009         	goto	l1572
  1386   0012A2  0A0F               	xorlw	15	; case 8
  1387   0012A4  B4D8               	btfsc	status,2,c
  1388   0012A6  EF17  F009         	goto	l1574
  1389   0012AA  0A01               	xorlw	1	; case 9
  1390   0012AC  B4D8               	btfsc	status,2,c
  1391   0012AE  EF1A  F009         	goto	l1576
  1392   0012B2  0A03               	xorlw	3	; case 10
  1393   0012B4  B4D8               	btfsc	status,2,c
  1394   0012B6  EF1D  F009         	goto	l1578
  1395   0012BA  0A01               	xorlw	1	; case 11
  1396   0012BC  B4D8               	btfsc	status,2,c
  1397   0012BE  EF20  F009         	goto	l1580
  1398   0012C2  0A07               	xorlw	7	; case 12
  1399   0012C4  B4D8               	btfsc	status,2,c
  1400   0012C6  EF23  F009         	goto	l1582
  1401   0012CA  EF67  F009         	goto	l422
  1402   0012CE                     l422:
  1403   0012CE  0012               	return		;funcret
  1404   0012D0                     __end_of_adc_input_channel_port_configure:
  1405                           	callstack 0
  1406                           
  1407 ;; *************** function _ADC_Is_Conversion_Done *****************
  1408 ;; Defined at:
  1409 ;;		line 153 in file "MCAL_LAYER/ADC/hal_adc.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  adc             1    1[COMRAM] PTR const struct .
  1412 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1413 ;;  conversion_s    1    2[COMRAM] PTR unsigned char 
  1414 ;;		 -> ADC_Get_Conversion_Blocking@conversion_status(1), 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  ret             1    3[COMRAM] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      unsigned char 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr2l, fsr2h, status,2
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1426 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels used: 1
  1432 ;; Hardware stack levels required when called: 2
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_ADC_Get_Conversion_Blocking
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text10
  1441   0014F6                     __ptext10:
  1442                           	callstack 0
  1443   0014F6                     _ADC_Is_Conversion_Done:
  1444                           	callstack 27
  1445   0014F6                     
  1446                           ;MCAL_LAYER/ADC/hal_adc.c: 154:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1447   0014F6  0E01               	movlw	1
  1448   0014F8  6E6A               	movwf	ADC_Is_Conversion_Done@ret^0,c
  1449                           
  1450                           ;MCAL_LAYER/ADC/hal_adc.c: 157:     if (((void*)0) == adc || ((void*)0) == conversion_st
      +                          atus) {
  1451   0014FA  5068               	movf	ADC_Is_Conversion_Done@adc^0,w,c
  1452   0014FC  B4D8               	btfsc	status,2,c
  1453   0014FE  EF83  F00A         	goto	u1731
  1454   001502  EF85  F00A         	goto	u1730
  1455   001506                     u1731:
  1456   001506  EF8D  F00A         	goto	l3070
  1457   00150A                     u1730:
  1458   00150A  5069               	movf	ADC_Is_Conversion_Done@conversion_status^0,w,c
  1459   00150C  A4D8               	btfss	status,2,c
  1460   00150E  EF8B  F00A         	goto	u1741
  1461   001512  EF8D  F00A         	goto	u1740
  1462   001516                     u1741:
  1463   001516  EF91  F00A         	goto	l3072
  1464   00151A                     u1740:
  1465   00151A                     l3070:
  1466                           
  1467                           ;MCAL_LAYER/ADC/hal_adc.c: 158:         ret = (Std_ReturnType)0X00;
  1468   00151A  0E00               	movlw	0
  1469   00151C  6E6A               	movwf	ADC_Is_Conversion_Done@ret^0,c
  1470                           
  1471                           ;MCAL_LAYER/ADC/hal_adc.c: 159:     } else {
  1472   00151E  EF9E  F00A         	goto	l3074
  1473   001522                     l3072:
  1474                           
  1475                           ;MCAL_LAYER/ADC/hal_adc.c: 161:         *conversion_status = !(uint8) (ADCON0bits.GO_nDO
      +                          NE);
  1476   001522  5069               	movf	ADC_Is_Conversion_Done@conversion_status^0,w,c
  1477   001524  6ED9               	movwf	fsr2l,c
  1478   001526  6ADA               	clrf	fsr2h,c
  1479   001528  A2C2               	btfss	194,1,c	;volatile
  1480   00152A  EF99  F00A         	goto	u1751
  1481   00152E  EF9C  F00A         	goto	u1750
  1482   001532                     u1751:
  1483   001532  0E01               	movlw	1
  1484   001534  EF9D  F00A         	goto	u1760
  1485   001538                     u1750:
  1486   001538  0E00               	movlw	0
  1487   00153A                     u1760:
  1488   00153A  6EDF               	movwf	indf2,c
  1489   00153C                     l3074:
  1490                           
  1491                           ;MCAL_LAYER/ADC/hal_adc.c: 164:     return ret;
  1492   00153C  506A               	movf	ADC_Is_Conversion_Done@ret^0,w,c
  1493   00153E  0012               	return		;funcret
  1494   001540                     __end_of_ADC_Is_Conversion_Done:
  1495                           	callstack 0
  1496                           
  1497 ;; *************** function _ADC_Get_Conversion_Result *****************
  1498 ;; Defined at:
  1499 ;;		line 174 in file "MCAL_LAYER/ADC/hal_adc.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  adc             1    1[COMRAM] PTR const struct .
  1502 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1503 ;;  result          1    2[COMRAM] PTR unsigned short 
  1504 ;;		 -> re_4(2), re_3(2), re_2(2), re_1(2), 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  ret             1    5[COMRAM] unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      unsigned char 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;Total ram usage:        5 bytes
  1521 ;; Hardware stack levels used: 1
  1522 ;; Hardware stack levels required when called: 2
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_ADC_Get_Conversion_Blocking
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text11
  1531   0012D0                     __ptext11:
  1532                           	callstack 0
  1533   0012D0                     _ADC_Get_Conversion_Result:
  1534                           	callstack 27
  1535   0012D0                     
  1536                           ;MCAL_LAYER/ADC/hal_adc.c: 175:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1537   0012D0  0E01               	movlw	1
  1538   0012D2  6E6C               	movwf	ADC_Get_Conversion_Result@ret^0,c
  1539                           
  1540                           ;MCAL_LAYER/ADC/hal_adc.c: 178:     if (((void*)0) == adc || ((void*)0) == result) {
  1541   0012D4  5068               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1542   0012D6  B4D8               	btfsc	status,2,c
  1543   0012D8  EF70  F009         	goto	u1771
  1544   0012DC  EF72  F009         	goto	u1770
  1545   0012E0                     u1771:
  1546   0012E0  EF7A  F009         	goto	l3082
  1547   0012E4                     u1770:
  1548   0012E4  5069               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1549   0012E6  A4D8               	btfss	status,2,c
  1550   0012E8  EF78  F009         	goto	u1781
  1551   0012EC  EF7A  F009         	goto	u1780
  1552   0012F0                     u1781:
  1553   0012F0  EF7E  F009         	goto	l3084
  1554   0012F4                     u1780:
  1555   0012F4                     l3082:
  1556                           
  1557                           ;MCAL_LAYER/ADC/hal_adc.c: 179:         ret = (Std_ReturnType)0X00;
  1558   0012F4  0E00               	movlw	0
  1559   0012F6  6E6C               	movwf	ADC_Get_Conversion_Result@ret^0,c
  1560                           
  1561                           ;MCAL_LAYER/ADC/hal_adc.c: 180:     } else {
  1562   0012F8  EFC0  F009         	goto	l3094
  1563   0012FC                     l3084:
  1564                           
  1565                           ;MCAL_LAYER/ADC/hal_adc.c: 182:         if (0X01U == adc->result_format) {
  1566   0012FC  5068               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1567   0012FE  6ED9               	movwf	fsr2l,c
  1568   001300  6ADA               	clrf	fsr2h,c
  1569   001302  0E06               	movlw	6
  1570   001304  26D9               	addwf	fsr2l,f,c
  1571   001306  A2DF               	btfss	indf2,1,c
  1572   001308  EF88  F009         	goto	u1791
  1573   00130C  EF8A  F009         	goto	u1790
  1574   001310                     u1791:
  1575   001310  EF9D  F009         	goto	l3088
  1576   001314                     u1790:
  1577   001314                     l3086:
  1578                           
  1579                           ;MCAL_LAYER/ADC/hal_adc.c: 183:             *result = (uint16_t) ((ADRESH << 8) + ADRESL
      +                          );
  1580   001314  50C3               	movf	195,w,c	;volatile
  1581   001316  CFC4 F06A          	movff	4036,??_ADC_Get_Conversion_Result	;volatile
  1582   00131A  6A6B               	clrf	(??_ADC_Get_Conversion_Result+1)^0,c
  1583   00131C  C06A  F06B         	movff	??_ADC_Get_Conversion_Result,??_ADC_Get_Conversion_Result+1
  1584   001320  6A6A               	clrf	??_ADC_Get_Conversion_Result^0,c
  1585   001322  266A               	addwf	??_ADC_Get_Conversion_Result^0,f,c
  1586   001324  0E00               	movlw	0
  1587   001326  226B               	addwfc	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1588   001328  5069               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1589   00132A  6ED9               	movwf	fsr2l,c
  1590   00132C  6ADA               	clrf	fsr2h,c
  1591   00132E  C06A  FFDE         	movff	??_ADC_Get_Conversion_Result,postinc2
  1592   001332  C06B  FFDD         	movff	??_ADC_Get_Conversion_Result+1,postdec2
  1593                           
  1594                           ;MCAL_LAYER/ADC/hal_adc.c: 184:         } else if (0X00 == adc->result_format) {
  1595   001336  EFC0  F009         	goto	l3094
  1596   00133A                     l3088:
  1597   00133A  5068               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1598   00133C  6ED9               	movwf	fsr2l,c
  1599   00133E  6ADA               	clrf	fsr2h,c
  1600   001340  0E06               	movlw	6
  1601   001342  26D9               	addwf	fsr2l,f,c
  1602   001344  B2DF               	btfsc	indf2,1,c
  1603   001346  EFA7  F009         	goto	u1801
  1604   00134A  EFA9  F009         	goto	u1800
  1605   00134E                     u1801:
  1606   00134E  EF8A  F009         	goto	l3086
  1607   001352                     u1800:
  1608   001352                     
  1609                           ;MCAL_LAYER/ADC/hal_adc.c: 185:             *result = (uint16_t) (((ADRESH << 8) + ADRES
      +                          L) >> 2);
  1610   001352  50C3               	movf	195,w,c	;volatile
  1611   001354  CFC4 F06A          	movff	4036,??_ADC_Get_Conversion_Result	;volatile
  1612   001358  6A6B               	clrf	(??_ADC_Get_Conversion_Result+1)^0,c
  1613   00135A  C06A  F06B         	movff	??_ADC_Get_Conversion_Result,??_ADC_Get_Conversion_Result+1
  1614   00135E  6A6A               	clrf	??_ADC_Get_Conversion_Result^0,c
  1615   001360  266A               	addwf	??_ADC_Get_Conversion_Result^0,f,c
  1616   001362  0E00               	movlw	0
  1617   001364  226B               	addwfc	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1618   001366  346B               	rlcf	(??_ADC_Get_Conversion_Result+1)^0,w,c
  1619   001368  326B               	rrcf	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1620   00136A  326A               	rrcf	??_ADC_Get_Conversion_Result^0,f,c
  1621   00136C  346B               	rlcf	(??_ADC_Get_Conversion_Result+1)^0,w,c
  1622   00136E  326B               	rrcf	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1623   001370  326A               	rrcf	??_ADC_Get_Conversion_Result^0,f,c
  1624   001372  5069               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1625   001374  6ED9               	movwf	fsr2l,c
  1626   001376  6ADA               	clrf	fsr2h,c
  1627   001378  C06A  FFDE         	movff	??_ADC_Get_Conversion_Result,postinc2
  1628   00137C  C06B  FFDD         	movff	??_ADC_Get_Conversion_Result+1,postdec2
  1629   001380                     l3094:
  1630                           
  1631                           ;MCAL_LAYER/ADC/hal_adc.c: 191:     return ret;
  1632   001380  506C               	movf	ADC_Get_Conversion_Result@ret^0,w,c
  1633   001382  0012               	return		;funcret
  1634   001384                     __end_of_ADC_Get_Conversion_Result:
  1635                           	callstack 0
  1636                           
  1637 ;; *************** function _Interrupt_Manager_High *****************
  1638 ;; Defined at:
  1639 ;;		line 39 in file "MCAL_LAYER/Interrupt/mcal_interrupt_manager.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used: 1
  1659 ;; Hardware stack levels required when called: 1
  1660 ;; This function calls:
  1661 ;;		_ADC_ISR
  1662 ;;		_INT0_ISR
  1663 ;;		_INT1_ISR
  1664 ;;		_INT2_ISR
  1665 ;;		_RB4_ISR
  1666 ;;		_RB5_ISR
  1667 ;;		_RB6_ISR
  1668 ;;		_RB7_ISR
  1669 ;; This function is called by:
  1670 ;;		Interrupt level 2
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	intcode
  1675   000008                     __pintcode:
  1676                           	callstack 0
  1677   000008                     _Interrupt_Manager_High:
  1678                           	callstack 26
  1679                           
  1680                           ;incstack = 0
  1681   000008  8274               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1682   00000A  ED0B  F008         	call	int_func,f	;refresh shadow registers
  1683                           
  1684                           	psect	intcode_body
  1685   001016                     __pintcode_body:
  1686                           	callstack 26
  1687   001016                     int_func:
  1688                           	callstack 26
  1689   001016  0006               	pop		; remove dummy address from shadow register refresh
  1690   001018                     
  1691                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 41:     if ((INTCONbits.INT0IE == 1) && 
      +                          (INTCONbits.INT0IF == 1)) {
  1692   001018  A8F2               	btfss	242,4,c	;volatile
  1693   00101A  EF11  F008         	goto	i2u141_41
  1694   00101E  EF13  F008         	goto	i2u141_40
  1695   001022                     i2u141_41:
  1696   001022  EF1C  F008         	goto	i2l2918
  1697   001026                     i2u141_40:
  1698   001026  A2F2               	btfss	242,1,c	;volatile
  1699   001028  EF18  F008         	goto	i2u142_41
  1700   00102C  EF1A  F008         	goto	i2u142_40
  1701   001030                     i2u142_41:
  1702   001030  EF1C  F008         	goto	i2l2918
  1703   001034                     i2u142_40:
  1704   001034                     
  1705                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 42:         INT0_ISR();
  1706   001034  EC8B  F00B         	call	_INT0_ISR	;wreg free
  1707   001038                     i2l2918:
  1708                           
  1709                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 45:     if ((INTCON3bits.INT1IE == 1) &&
      +                           (INTCON3bits.INT1IF == 1)) {
  1710   001038  A6F0               	btfss	240,3,c	;volatile
  1711   00103A  EF21  F008         	goto	i2u143_41
  1712   00103E  EF23  F008         	goto	i2u143_40
  1713   001042                     i2u143_41:
  1714   001042  EF2C  F008         	goto	i2l2924
  1715   001046                     i2u143_40:
  1716   001046  A0F0               	btfss	240,0,c	;volatile
  1717   001048  EF28  F008         	goto	i2u144_41
  1718   00104C  EF2A  F008         	goto	i2u144_40
  1719   001050                     i2u144_41:
  1720   001050  EF2C  F008         	goto	i2l2924
  1721   001054                     i2u144_40:
  1722   001054                     
  1723                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 46:         INT1_ISR();
  1724   001054  EC89  F00B         	call	_INT1_ISR	;wreg free
  1725   001058                     i2l2924:
  1726                           
  1727                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 49:     if ((INTCON3bits.INT2IE == 1) &&
      +                           (INTCON3bits.INT2IF == 1)) {
  1728   001058  A8F0               	btfss	240,4,c	;volatile
  1729   00105A  EF31  F008         	goto	i2u145_41
  1730   00105E  EF33  F008         	goto	i2u145_40
  1731   001062                     i2u145_41:
  1732   001062  EF3C  F008         	goto	i2l2930
  1733   001066                     i2u145_40:
  1734   001066  A2F0               	btfss	240,1,c	;volatile
  1735   001068  EF38  F008         	goto	i2u146_41
  1736   00106C  EF3A  F008         	goto	i2u146_40
  1737   001070                     i2u146_41:
  1738   001070  EF3C  F008         	goto	i2l2930
  1739   001074                     i2u146_40:
  1740   001074                     
  1741                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 50:         INT2_ISR();
  1742   001074  EC87  F00B         	call	_INT2_ISR	;wreg free
  1743   001078                     i2l2930:
  1744                           
  1745                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 52:     if (1 == PIE1bits.ADIE && 1 == P
      +                          IR1bits.ADIF) {
  1746   001078  AC9D               	btfss	157,6,c	;volatile
  1747   00107A  EF41  F008         	goto	i2u147_41
  1748   00107E  EF43  F008         	goto	i2u147_40
  1749   001082                     i2u147_41:
  1750   001082  EF4C  F008         	goto	i2l2936
  1751   001086                     i2u147_40:
  1752   001086  AC9E               	btfss	158,6,c	;volatile
  1753   001088  EF48  F008         	goto	i2u148_41
  1754   00108C  EF4A  F008         	goto	i2u148_40
  1755   001090                     i2u148_41:
  1756   001090  EF4C  F008         	goto	i2l2936
  1757   001094                     i2u148_40:
  1758   001094                     
  1759                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 53:         ADC_ISR();
  1760   001094  EC8D  F00B         	call	_ADC_ISR	;wreg free
  1761   001098                     i2l2936:
  1762                           
  1763                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 57:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1)) {
  1764   001098  A6F2               	btfss	242,3,c	;volatile
  1765   00109A  EF51  F008         	goto	i2u149_41
  1766   00109E  EF53  F008         	goto	i2u149_40
  1767   0010A2                     i2u149_41:
  1768   0010A2  EFFA  F008         	goto	i2l830
  1769   0010A6                     i2u149_40:
  1770   0010A6  A0F2               	btfss	242,0,c	;volatile
  1771   0010A8  EF58  F008         	goto	i2u150_41
  1772   0010AC  EF5A  F008         	goto	i2u150_40
  1773   0010B0                     i2u150_41:
  1774   0010B0  EFFA  F008         	goto	i2l830
  1775   0010B4                     i2u150_40:
  1776   0010B4                     
  1777                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 61:         if ((PORTBbits.RB4 == GPIO_H
      +                          IGH) && RB4_f == 1) {
  1778   0010B4  A881               	btfss	129,4,c	;volatile
  1779   0010B6  EF5F  F008         	goto	i2u151_41
  1780   0010BA  EF61  F008         	goto	i2u151_40
  1781   0010BE                     i2u151_41:
  1782   0010BE  EF6E  F008         	goto	i2l2948
  1783   0010C2                     i2u151_40:
  1784   0010C2  0423               	decf	_RB4_f^0,w,c	;volatile
  1785   0010C4  A4D8               	btfss	status,2,c
  1786   0010C6  EF67  F008         	goto	i2u152_41
  1787   0010CA  EF69  F008         	goto	i2u152_40
  1788   0010CE                     i2u152_41:
  1789   0010CE  EF6E  F008         	goto	i2l2948
  1790   0010D2                     i2u152_40:
  1791   0010D2                     
  1792                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 62:             RB4_f = 0;
  1793   0010D2  0E00               	movlw	0
  1794   0010D4  6E23               	movwf	_RB4_f^0,c	;volatile
  1795   0010D6                     
  1796                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 63:             RB4_ISR(0);
  1797   0010D6  0E00               	movlw	0
  1798   0010D8  EC7A  F00B         	call	_RB4_ISR
  1799   0010DC                     i2l2948:
  1800                           
  1801                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 65:         if ((PORTBbits.RB4 == GPIO_L
      +                          OW) && RB4_f == 0) {
  1802   0010DC  B881               	btfsc	129,4,c	;volatile
  1803   0010DE  EF73  F008         	goto	i2u153_41
  1804   0010E2  EF75  F008         	goto	i2u153_40
  1805   0010E6                     i2u153_41:
  1806   0010E6  EF82  F008         	goto	i2l2956
  1807   0010EA                     i2u153_40:
  1808   0010EA  5023               	movf	_RB4_f^0,w,c	;volatile
  1809   0010EC  A4D8               	btfss	status,2,c
  1810   0010EE  EF7B  F008         	goto	i2u154_41
  1811   0010F2  EF7D  F008         	goto	i2u154_40
  1812   0010F6                     i2u154_41:
  1813   0010F6  EF82  F008         	goto	i2l2956
  1814   0010FA                     i2u154_40:
  1815   0010FA                     
  1816                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 66:             RB4_f = 1;
  1817   0010FA  0E01               	movlw	1
  1818   0010FC  6E23               	movwf	_RB4_f^0,c	;volatile
  1819   0010FE                     
  1820                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 67:             RB4_ISR(1);
  1821   0010FE  0E01               	movlw	1
  1822   001100  EC7A  F00B         	call	_RB4_ISR
  1823   001104                     i2l2956:
  1824                           
  1825                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 70:         if ((PORTBbits.RB5 == GPIO_H
      +                          IGH) && RB5_f == 1) {
  1826   001104  AA81               	btfss	129,5,c	;volatile
  1827   001106  EF87  F008         	goto	i2u155_41
  1828   00110A  EF89  F008         	goto	i2u155_40
  1829   00110E                     i2u155_41:
  1830   00110E  EF96  F008         	goto	i2l2964
  1831   001112                     i2u155_40:
  1832   001112  0422               	decf	_RB5_f^0,w,c	;volatile
  1833   001114  A4D8               	btfss	status,2,c
  1834   001116  EF8F  F008         	goto	i2u156_41
  1835   00111A  EF91  F008         	goto	i2u156_40
  1836   00111E                     i2u156_41:
  1837   00111E  EF96  F008         	goto	i2l2964
  1838   001122                     i2u156_40:
  1839   001122                     
  1840                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 71:             RB5_f = 0;
  1841   001122  0E00               	movlw	0
  1842   001124  6E22               	movwf	_RB5_f^0,c	;volatile
  1843   001126                     
  1844                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 72:             RB5_ISR(0);
  1845   001126  0E00               	movlw	0
  1846   001128  EC6D  F00B         	call	_RB5_ISR
  1847   00112C                     i2l2964:
  1848                           
  1849                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 74:         if ((PORTBbits.RB5 == GPIO_L
      +                          OW) && RB5_f == 0) {
  1850   00112C  BA81               	btfsc	129,5,c	;volatile
  1851   00112E  EF9B  F008         	goto	i2u157_41
  1852   001132  EF9D  F008         	goto	i2u157_40
  1853   001136                     i2u157_41:
  1854   001136  EFAA  F008         	goto	i2l2972
  1855   00113A                     i2u157_40:
  1856   00113A  5022               	movf	_RB5_f^0,w,c	;volatile
  1857   00113C  A4D8               	btfss	status,2,c
  1858   00113E  EFA3  F008         	goto	i2u158_41
  1859   001142  EFA5  F008         	goto	i2u158_40
  1860   001146                     i2u158_41:
  1861   001146  EFAA  F008         	goto	i2l2972
  1862   00114A                     i2u158_40:
  1863   00114A                     
  1864                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 75:             RB5_f = 1;
  1865   00114A  0E01               	movlw	1
  1866   00114C  6E22               	movwf	_RB5_f^0,c	;volatile
  1867   00114E                     
  1868                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 76:             RB5_ISR(1);
  1869   00114E  0E01               	movlw	1
  1870   001150  EC6D  F00B         	call	_RB5_ISR
  1871   001154                     i2l2972:
  1872                           
  1873                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 79:         if ((PORTBbits.RB6 == GPIO_H
      +                          IGH) && RB6_f == 1) {
  1874   001154  AC81               	btfss	129,6,c	;volatile
  1875   001156  EFAF  F008         	goto	i2u159_41
  1876   00115A  EFB1  F008         	goto	i2u159_40
  1877   00115E                     i2u159_41:
  1878   00115E  EFBE  F008         	goto	i2l2980
  1879   001162                     i2u159_40:
  1880   001162  0421               	decf	_RB6_f^0,w,c	;volatile
  1881   001164  A4D8               	btfss	status,2,c
  1882   001166  EFB7  F008         	goto	i2u160_41
  1883   00116A  EFB9  F008         	goto	i2u160_40
  1884   00116E                     i2u160_41:
  1885   00116E  EFBE  F008         	goto	i2l2980
  1886   001172                     i2u160_40:
  1887   001172                     
  1888                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 80:             RB6_f = 0;
  1889   001172  0E00               	movlw	0
  1890   001174  6E21               	movwf	_RB6_f^0,c	;volatile
  1891   001176                     
  1892                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 81:             RB6_ISR(0);
  1893   001176  0E00               	movlw	0
  1894   001178  EC60  F00B         	call	_RB6_ISR
  1895   00117C                     i2l2980:
  1896                           
  1897                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 83:         if ((PORTBbits.RB6 == GPIO_L
      +                          OW) && RB6_f == 0) {
  1898   00117C  BC81               	btfsc	129,6,c	;volatile
  1899   00117E  EFC3  F008         	goto	i2u161_41
  1900   001182  EFC5  F008         	goto	i2u161_40
  1901   001186                     i2u161_41:
  1902   001186  EFD2  F008         	goto	i2l2988
  1903   00118A                     i2u161_40:
  1904   00118A  5021               	movf	_RB6_f^0,w,c	;volatile
  1905   00118C  A4D8               	btfss	status,2,c
  1906   00118E  EFCB  F008         	goto	i2u162_41
  1907   001192  EFCD  F008         	goto	i2u162_40
  1908   001196                     i2u162_41:
  1909   001196  EFD2  F008         	goto	i2l2988
  1910   00119A                     i2u162_40:
  1911   00119A                     
  1912                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 84:             RB6_f = 1;
  1913   00119A  0E01               	movlw	1
  1914   00119C  6E21               	movwf	_RB6_f^0,c	;volatile
  1915   00119E                     
  1916                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 85:             RB6_ISR(1);
  1917   00119E  0E01               	movlw	1
  1918   0011A0  EC60  F00B         	call	_RB6_ISR
  1919   0011A4                     i2l2988:
  1920                           
  1921                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 88:         if ((PORTBbits.RB7 == GPIO_H
      +                          IGH) && RB7_f == 1) {
  1922   0011A4  AE81               	btfss	129,7,c	;volatile
  1923   0011A6  EFD7  F008         	goto	i2u163_41
  1924   0011AA  EFD9  F008         	goto	i2u163_40
  1925   0011AE                     i2u163_41:
  1926   0011AE  EFE6  F008         	goto	i2l2996
  1927   0011B2                     i2u163_40:
  1928   0011B2  0420               	decf	_RB7_f^0,w,c	;volatile
  1929   0011B4  A4D8               	btfss	status,2,c
  1930   0011B6  EFDF  F008         	goto	i2u164_41
  1931   0011BA  EFE1  F008         	goto	i2u164_40
  1932   0011BE                     i2u164_41:
  1933   0011BE  EFE6  F008         	goto	i2l2996
  1934   0011C2                     i2u164_40:
  1935   0011C2                     
  1936                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 89:             RB7_f = 0;
  1937   0011C2  0E00               	movlw	0
  1938   0011C4  6E20               	movwf	_RB7_f^0,c	;volatile
  1939   0011C6                     
  1940                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 90:             RB7_ISR(0);
  1941   0011C6  0E00               	movlw	0
  1942   0011C8  EC53  F00B         	call	_RB7_ISR
  1943   0011CC                     i2l2996:
  1944                           
  1945                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 92:         if ((PORTBbits.RB7 == GPIO_L
      +                          OW) && RB7_f == 0) {
  1946   0011CC  BE81               	btfsc	129,7,c	;volatile
  1947   0011CE  EFEB  F008         	goto	i2u165_41
  1948   0011D2  EFED  F008         	goto	i2u165_40
  1949   0011D6                     i2u165_41:
  1950   0011D6  EFFA  F008         	goto	i2l830
  1951   0011DA                     i2u165_40:
  1952   0011DA  5020               	movf	_RB7_f^0,w,c	;volatile
  1953   0011DC  A4D8               	btfss	status,2,c
  1954   0011DE  EFF3  F008         	goto	i2u166_41
  1955   0011E2  EFF5  F008         	goto	i2u166_40
  1956   0011E6                     i2u166_41:
  1957   0011E6  EFFA  F008         	goto	i2l830
  1958   0011EA                     i2u166_40:
  1959   0011EA                     
  1960                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 93:             RB7_f = 1;
  1961   0011EA  0E01               	movlw	1
  1962   0011EC  6E20               	movwf	_RB7_f^0,c	;volatile
  1963   0011EE                     
  1964                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 94:             RB7_ISR(1);
  1965   0011EE  0E01               	movlw	1
  1966   0011F0  EC53  F00B         	call	_RB7_ISR
  1967   0011F4                     i2l830:
  1968   0011F4  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1969   0011F6  0011               	retfie		f
  1970   0011F8                     __end_of_Interrupt_Manager_High:
  1971                           	callstack 0
  1972                           
  1973 ;; *************** function _RB7_ISR *****************
  1974 ;; Defined at:
  1975 ;;		line 514 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  source          1    wreg     unsigned char 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;  source          1    0[COMRAM] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2, status,0
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;Total ram usage:        1 bytes
  1994 ;; Hardware stack levels used: 1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_Interrupt_Manager_High
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text13
  2003   0016A6                     __ptext13:
  2004                           	callstack 0
  2005   0016A6                     _RB7_ISR:
  2006                           	callstack 26
  2007                           
  2008                           ;incstack = 0
  2009                           ;RB7_ISR@source stored from wreg
  2010   0016A6  6E67               	movwf	RB7_ISR@source^0,c
  2011   0016A8                     
  2012                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 515:     (INTCONbits.RBIF = 1);
  2013   0016A8  80F2               	bsf	242,0,c	;volatile
  2014   0016AA                     
  2015                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 517:     if (0 == source) {
  2016   0016AA  5067               	movf	RB7_ISR@source^0,w,c
  2017   0016AC  A4D8               	btfss	status,2,c
  2018   0016AE  EF5B  F00B         	goto	i2u52_41
  2019   0016B2  EF5D  F00B         	goto	i2u52_40
  2020   0016B6                     i2u52_41:
  2021   0016B6  EF5F  F00B         	goto	i2l2022
  2022   0016BA                     i2u52_40:
  2023   0016BA  EF5F  F00B         	goto	i2l778
  2024   0016BE                     i2l2022:
  2025   0016BE                     i2l778:
  2026   0016BE  0012               	return		;funcret
  2027   0016C0                     __end_of_RB7_ISR:
  2028                           	callstack 0
  2029                           
  2030 ;; *************** function _RB6_ISR *****************
  2031 ;; Defined at:
  2032 ;;		line 500 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  source          1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  source          1    0[COMRAM] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;Total ram usage:        1 bytes
  2051 ;; Hardware stack levels used: 1
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_Interrupt_Manager_High
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text14
  2060   0016C0                     __ptext14:
  2061                           	callstack 0
  2062   0016C0                     _RB6_ISR:
  2063                           	callstack 26
  2064                           
  2065                           ;incstack = 0
  2066                           ;RB6_ISR@source stored from wreg
  2067   0016C0  6E67               	movwf	RB6_ISR@source^0,c
  2068   0016C2                     
  2069                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 501:     (INTCONbits.RBIF = 1);
  2070   0016C2  80F2               	bsf	242,0,c	;volatile
  2071   0016C4                     
  2072                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 503:     if (0 == source) {
  2073   0016C4  5067               	movf	RB6_ISR@source^0,w,c
  2074   0016C6  A4D8               	btfss	status,2,c
  2075   0016C8  EF68  F00B         	goto	i2u51_41
  2076   0016CC  EF6A  F00B         	goto	i2u51_40
  2077   0016D0                     i2u51_41:
  2078   0016D0  EF6C  F00B         	goto	i2l2012
  2079   0016D4                     i2u51_40:
  2080   0016D4  EF6C  F00B         	goto	i2l770
  2081   0016D8                     i2l2012:
  2082   0016D8                     i2l770:
  2083   0016D8  0012               	return		;funcret
  2084   0016DA                     __end_of_RB6_ISR:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function _RB5_ISR *****************
  2088 ;; Defined at:
  2089 ;;		line 486 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  source          1    wreg     unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  source          1    0[COMRAM] unsigned char 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, status,2, status,0
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;Total ram usage:        1 bytes
  2108 ;; Hardware stack levels used: 1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_Interrupt_Manager_High
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text15
  2117   0016DA                     __ptext15:
  2118                           	callstack 0
  2119   0016DA                     _RB5_ISR:
  2120                           	callstack 26
  2121                           
  2122                           ;incstack = 0
  2123                           ;RB5_ISR@source stored from wreg
  2124   0016DA  6E67               	movwf	RB5_ISR@source^0,c
  2125   0016DC                     
  2126                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 487:     (INTCONbits.RBIF = 1);
  2127   0016DC  80F2               	bsf	242,0,c	;volatile
  2128   0016DE                     
  2129                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 489:     if (0 == source) {
  2130   0016DE  5067               	movf	RB5_ISR@source^0,w,c
  2131   0016E0  A4D8               	btfss	status,2,c
  2132   0016E2  EF75  F00B         	goto	i2u50_41
  2133   0016E6  EF77  F00B         	goto	i2u50_40
  2134   0016EA                     i2u50_41:
  2135   0016EA  EF79  F00B         	goto	i2l2002
  2136   0016EE                     i2u50_40:
  2137   0016EE  EF79  F00B         	goto	i2l762
  2138   0016F2                     i2l2002:
  2139   0016F2                     i2l762:
  2140   0016F2  0012               	return		;funcret
  2141   0016F4                     __end_of_RB5_ISR:
  2142                           	callstack 0
  2143                           
  2144 ;; *************** function _RB4_ISR *****************
  2145 ;; Defined at:
  2146 ;;		line 472 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  source          1    wreg     unsigned char 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  source          1    0[COMRAM] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      void 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;Total ram usage:        1 bytes
  2165 ;; Hardware stack levels used: 1
  2166 ;; This function calls:
  2167 ;;		Nothing
  2168 ;; This function is called by:
  2169 ;;		_Interrupt_Manager_High
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text16
  2174   0016F4                     __ptext16:
  2175                           	callstack 0
  2176   0016F4                     _RB4_ISR:
  2177                           	callstack 26
  2178                           
  2179                           ;incstack = 0
  2180                           ;RB4_ISR@source stored from wreg
  2181   0016F4  6E67               	movwf	RB4_ISR@source^0,c
  2182   0016F6                     
  2183                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 473:     (INTCONbits.RBIF = 1);
  2184   0016F6  80F2               	bsf	242,0,c	;volatile
  2185   0016F8                     
  2186                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 475:     if (0 == source) {
  2187   0016F8  5067               	movf	RB4_ISR@source^0,w,c
  2188   0016FA  A4D8               	btfss	status,2,c
  2189   0016FC  EF82  F00B         	goto	i2u49_41
  2190   001700  EF84  F00B         	goto	i2u49_40
  2191   001704                     i2u49_41:
  2192   001704  EF86  F00B         	goto	i2l1992
  2193   001708                     i2u49_40:
  2194   001708  EF86  F00B         	goto	i2l754
  2195   00170C                     i2l1992:
  2196   00170C                     i2l754:
  2197   00170C  0012               	return		;funcret
  2198   00170E                     __end_of_RB4_ISR:
  2199                           	callstack 0
  2200                           
  2201 ;; *************** function _INT2_ISR *****************
  2202 ;; Defined at:
  2203 ;;		line 466 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		None
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used: 1
  2223 ;; This function calls:
  2224 ;;		Nothing
  2225 ;; This function is called by:
  2226 ;;		_Interrupt_Manager_High
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text17
  2231   00170E                     __ptext17:
  2232                           	callstack 0
  2233   00170E                     _INT2_ISR:
  2234                           	callstack 26
  2235   00170E                     
  2236                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 467:     (INTCON3bits.INT2IF = 0);
  2237   00170E  92F0               	bcf	240,1,c	;volatile
  2238   001710  0012               	return		;funcret
  2239   001712                     __end_of_INT2_ISR:
  2240                           	callstack 0
  2241                           
  2242 ;; *************** function _INT1_ISR *****************
  2243 ;; Defined at:
  2244 ;;		line 460 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		None
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used: 1
  2264 ;; This function calls:
  2265 ;;		Nothing
  2266 ;; This function is called by:
  2267 ;;		_Interrupt_Manager_High
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text18
  2272   001712                     __ptext18:
  2273                           	callstack 0
  2274   001712                     _INT1_ISR:
  2275                           	callstack 26
  2276   001712                     
  2277                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 461:     (INTCON3bits.INT1IF = 0);
  2278   001712  90F0               	bcf	240,0,c	;volatile
  2279   001714  0012               	return		;funcret
  2280   001716                     __end_of_INT1_ISR:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _INT0_ISR *****************
  2284 ;; Defined at:
  2285 ;;		line 454 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		None
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used: 1
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_Interrupt_Manager_High
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text19
  2313   001716                     __ptext19:
  2314                           	callstack 0
  2315   001716                     _INT0_ISR:
  2316                           	callstack 26
  2317   001716                     
  2318                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 455:     (INTCONbits.INT0IF = 0);
  2319   001716  92F2               	bcf	242,1,c	;volatile
  2320   001718  0012               	return		;funcret
  2321   00171A                     __end_of_INT0_ISR:
  2322                           	callstack 0
  2323                           
  2324 ;; *************** function _ADC_ISR *****************
  2325 ;; Defined at:
  2326 ;;		line 313 in file "MCAL_LAYER/ADC/hal_adc.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		None
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;Total ram usage:        0 bytes
  2345 ;; Hardware stack levels used: 1
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_Interrupt_Manager_High
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text20
  2354   00171A                     __ptext20:
  2355                           	callstack 0
  2356   00171A                     _ADC_ISR:
  2357                           	callstack 26
  2358   00171A                     
  2359                           ;MCAL_LAYER/ADC/hal_adc.c: 314:     (PIR1bits.ADIF = 0);
  2360   00171A  9C9E               	bcf	158,6,c	;volatile
  2361   00171C  0012               	return		;funcret
  2362   00171E                     __end_of_ADC_ISR:
  2363                           	callstack 0
  2364                           
  2365                           	psect	rparam
  2366   000000                     
  2367                           	psect	temp
  2368   000074                     btemp:
  2369                           	callstack 0
  2370   000074                     	ds	1
  2371   000000                     int$flags	set	btemp
  2372   000000                     wtemp8	set	btemp+1
  2373   000000                     ttemp5	set	btemp+1
  2374   000000                     ttemp6	set	btemp+4
  2375   000000                     ttemp7	set	btemp+8
  2376                           
  2377                           	psect	config
  2378                           
  2379                           ; Padding undefined space
  2380   300000                     	org	3145728
  2381   300000  FF                 	db	255
  2382                           
  2383                           ;Config register CONFIG1H @ 0x300001
  2384                           ;	Oscillator Selection bits
  2385                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  2386                           ;	Fail-Safe Clock Monitor Enable bit
  2387                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2388                           ;	Internal/External Oscillator Switchover bit
  2389                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2390   300001                     	org	3145729
  2391   300001  07                 	db	7
  2392                           
  2393                           ;Config register CONFIG2L @ 0x300002
  2394                           ;	Power-up Timer Enable bit
  2395                           ;	PWRT = OFF, PWRT disabled
  2396                           ;	Brown-out Reset Enable bits
  2397                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2398                           ;	Brown Out Reset Voltage bits
  2399                           ;	BORV = 3, Minimum setting
  2400   300002                     	org	3145730
  2401   300002  1F                 	db	31
  2402                           
  2403                           ;Config register CONFIG2H @ 0x300003
  2404                           ;	Watchdog Timer Enable bit
  2405                           ;	WDT = ON, WDT enabled
  2406                           ;	Watchdog Timer Postscale Select bits
  2407                           ;	WDTPS = 32768, 1:32768
  2408   300003                     	org	3145731
  2409   300003  1F                 	db	31
  2410                           
  2411                           ; Padding undefined space
  2412   300004                     	org	3145732
  2413   300004  FF                 	db	255
  2414                           
  2415                           ;Config register CONFIG3H @ 0x300005
  2416                           ;	CCP2 MUX bit
  2417                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2418                           ;	PORTB A/D Enable bit
  2419                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2420                           ;	Low-Power Timer1 Oscillator Enable bit
  2421                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2422                           ;	MCLR Pin Enable bit
  2423                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2424   300005                     	org	3145733
  2425   300005  81                 	db	129
  2426                           
  2427                           ;Config register CONFIG4L @ 0x300006
  2428                           ;	Stack Full/Underflow Reset Enable bit
  2429                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2430                           ;	Single-Supply ICSP Enable bit
  2431                           ;	LVP = ON, Single-Supply ICSP enabled
  2432                           ;	Extended Instruction Set Enable bit
  2433                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2434                           ;	Background Debugger Enable bit
  2435                           ;	DEBUG = 0x1, unprogrammed default
  2436   300006                     	org	3145734
  2437   300006  85                 	db	133
  2438                           
  2439                           ; Padding undefined space
  2440   300007                     	org	3145735
  2441   300007  FF                 	db	255
  2442                           
  2443                           ;Config register CONFIG5L @ 0x300008
  2444                           ;	Code Protection bit
  2445                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2446                           ;	Code Protection bit
  2447                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2448                           ;	Code Protection bit
  2449                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2450                           ;	Code Protection bit
  2451                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2452   300008                     	org	3145736
  2453   300008  0F                 	db	15
  2454                           
  2455                           ;Config register CONFIG5H @ 0x300009
  2456                           ;	Boot Block Code Protection bit
  2457                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2458                           ;	Data EEPROM Code Protection bit
  2459                           ;	CPD = OFF, Data EEPROM not code-protected
  2460   300009                     	org	3145737
  2461   300009  C0                 	db	192
  2462                           
  2463                           ;Config register CONFIG6L @ 0x30000A
  2464                           ;	Write Protection bit
  2465                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2466                           ;	Write Protection bit
  2467                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2468                           ;	Write Protection bit
  2469                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2470                           ;	Write Protection bit
  2471                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2472   30000A                     	org	3145738
  2473   30000A  0F                 	db	15
  2474                           
  2475                           ;Config register CONFIG6H @ 0x30000B
  2476                           ;	Configuration Register Write Protection bit
  2477                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2478                           ;	Boot Block Write Protection bit
  2479                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2480                           ;	Data EEPROM Write Protection bit
  2481                           ;	WRTD = OFF, Data EEPROM not write-protected
  2482   30000B                     	org	3145739
  2483   30000B  E0                 	db	224
  2484                           
  2485                           ;Config register CONFIG7L @ 0x30000C
  2486                           ;	Table Read Protection bit
  2487                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2488                           ;	Table Read Protection bit
  2489                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2490                           ;	Table Read Protection bit
  2491                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2492                           ;	Table Read Protection bit
  2493                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2494   30000C                     	org	3145740
  2495   30000C  0F                 	db	15
  2496                           
  2497                           ;Config register CONFIG7H @ 0x30000D
  2498                           ;	Boot Block Table Read Protection bit
  2499                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2500   30000D                     	org	3145741
  2501   30000D  40                 	db	64
  2502                           tosu	equ	0xFFF
  2503                           tosh	equ	0xFFE
  2504                           tosl	equ	0xFFD
  2505                           stkptr	equ	0xFFC
  2506                           pclatu	equ	0xFFB
  2507                           pclath	equ	0xFFA
  2508                           pcl	equ	0xFF9
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           indf0	equ	0xFEF
  2516                           postinc0	equ	0xFEE
  2517                           postdec0	equ	0xFED
  2518                           preinc0	equ	0xFEC
  2519                           plusw0	equ	0xFEB
  2520                           fsr0h	equ	0xFEA
  2521                           fsr0l	equ	0xFE9
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           postinc1	equ	0xFE6
  2525                           postdec1	equ	0xFE5
  2526                           preinc1	equ	0xFE4
  2527                           plusw1	equ	0xFE3
  2528                           fsr1h	equ	0xFE2
  2529                           fsr1l	equ	0xFE1
  2530                           bsr	equ	0xFE0
  2531                           indf2	equ	0xFDF
  2532                           postinc2	equ	0xFDE
  2533                           postdec2	equ	0xFDD
  2534                           preinc2	equ	0xFDC
  2535                           plusw2	equ	0xFDB
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    16
    Data        63
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     13     115
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    adc_1$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_2$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_3$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_4$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Get_Conversion_Blocking@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Get_Conversion_Blocking@result	PTR unsigned short  size(1) Largest target is 2
		 -> re_1(COMRAM[2]), re_2(COMRAM[2]), re_3(COMRAM[2]), re_4(COMRAM[2]), 

    ADC_Get_Conversion_Result@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Get_Conversion_Result@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Get_Conversion_Result@result	PTR unsigned short  size(1) Largest target is 2
		 -> re_1(COMRAM[2]), re_2(COMRAM[2]), re_3(COMRAM[2]), re_4(COMRAM[2]), 

    ADC_Init@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Init@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    _ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Is_Conversion_Done@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Is_Conversion_Done@conversion_status	PTR unsigned char  size(1) Largest target is 1
		 -> ADC_Get_Conversion_Blocking@conversion_status(COMRAM[1]), 

    ADC_Select_Channel@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    adc_select_result_format@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    adc_select_result_format@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_select_voltage_ref@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    adc_select_voltage_ref@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Start_Conversion@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    INT0_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT1_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT2_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    Interrupt_INTx_Clear_Flag@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Disable@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Edge_Init@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Enable@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Pin_Init@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@obj$External_CallBack_High	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@obj$External_CallBack_Low	PTR FTN()void  size(2) Largest target is 0

    Interrupt_Set_Interrupt_Handler@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    lat_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRlllll[1]), LATB(BITBIGSFRllllh[1]), LATC(BITBIGSFRllllh[1]), LATD(BITBIGSFRllllh[1]), 
		 -> LATE(BITBIGSFRllllh[1]), 

    port_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRlllll[1]), PORTB(BITBIGSFRlllll[1]), PORTC(BITBIGSFRlllll[1]), PORTD(BITBIGSFRlllll[1]), 
		 -> PORTE(BITBIGSFRlllll[1]), 

    RB4_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB4_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S1278$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    S1311$External_CallBack_High	PTR FTN()void  size(2) Largest target is 0

    S1311$External_CallBack_Low	PTR FTN()void  size(2) Largest target is 0

    S2340$buffer	PTR unsigned char  size(2) Largest target is 0

    S2340$source	PTR const unsigned char  size(2) Largest target is 0

    S663$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    sp__memset	PTR void  size(2) Largest target is 0

    tris_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRlllll[1]), TRISB(ABS[1]), TRISC(ABS[1]), TRISD(ABS[1]), 
		 -> TRISE(ABS[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ADC_Get_Conversion_Blocking
    _Application_initialize->_ADC_Init
    _ADC_Init->_adc_input_channel_port_configure
    _ADC_Get_Conversion_Blocking->_ADC_Select_Channel
    _ADC_Select_Channel->_adc_input_channel_port_configure

Critical Paths under _Interrupt_Manager_High in COMRAM

    _Interrupt_Manager_High->_RB4_ISR
    _Interrupt_Manager_High->_RB5_ISR
    _Interrupt_Manager_High->_RB6_ISR
    _Interrupt_Manager_High->_RB7_ISR

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrupt_Manager_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt_Manager_High in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt_Manager_High in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt_Manager_High in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt_Manager_High in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt_Manager_High in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt_Manager_High in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt_Manager_High in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Interrupt_Manager_High in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Interrupt_Manager_High in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Interrupt_Manager_High in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Interrupt_Manager_High in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Interrupt_Manager_High in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Interrupt_Manager_High in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Interrupt_Manager_High in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Interrupt_Manager_High in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3056
        _ADC_Get_Conversion_Blocking
             _Application_initialize
 ---------------------------------------------------------------------------------
 (1) _Application_initialize                               0     0      0     737
                           _ADC_Init
               _ecu_layer_initialize
 ---------------------------------------------------------------------------------
 (2) _ecu_layer_initialize                                 1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     2      1     737
                                              4 COMRAM     3     2      1
   _adc_input_channel_port_configure
           _adc_select_result_format
             _adc_select_voltage_ref
 ---------------------------------------------------------------------------------
 (3) _adc_select_voltage_ref                               1     0      1     120
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _adc_select_result_format                             1     0      1      98
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _ADC_Get_Conversion_Blocking                          5     2      3    2319
                                              8 COMRAM     5     2      3
          _ADC_Get_Conversion_Result
             _ADC_Is_Conversion_Done
                 _ADC_Select_Channel
               _ADC_Start_Conversion
 ---------------------------------------------------------------------------------
 (2) _ADC_Start_Conversion                                 2     1      1     198
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC_Select_Channel                                   4     2      2     409
                                              4 COMRAM     4     2      2
   _adc_input_channel_port_configure
 ---------------------------------------------------------------------------------
 (3) _adc_input_channel_port_configure                     3     3      0      15
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Is_Conversion_Done                               3     1      2     242
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Get_Conversion_Result                            5     3      2     330
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupt_Manager_High                               0     0      0     120
                            _ADC_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (5) _RB7_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB6_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB5_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB4_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Get_Conversion_Blocking
     _ADC_Get_Conversion_Result
     _ADC_Is_Conversion_Done
     _ADC_Select_Channel
       _adc_input_channel_port_configure
     _ADC_Start_Conversion
   _Application_initialize
     _ADC_Init
       _adc_input_channel_port_configure
       _adc_select_result_format
       _adc_select_voltage_ref
     _ecu_layer_initialize

 _Interrupt_Manager_High (ROOT)
   _ADC_ISR
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      44        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      D      73       1       91.3%
BITBIGSFRhlhl       2B      0       0      38        0.0%
BITBIGSFRllhh       15      0       0      39        0.0%
BITBIGSFRhh          D      0       0      37        0.0%
BITBIGSFRllhll       7      0       0      40        0.0%
BITBIGSFRlllhh       6      0       0      41        0.0%
BITBIGSFRllllh       4      0       0      42        0.0%
BITBIGSFRlllll       4      0       0      43        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      12        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Feb 18 17:47:18 2024

                ADC_Get_Conversion_Result@adc 0068                  ADC_Get_Conversion_Result@ret 006C  
                     ?_Interrupt_Manager_High 0067                                           l320 171E  
                                         l422 12CE                                           l431 1558  
                                         l440 1584                                           l425 1680  
                                         l353 13A0                                           l370 16A4  
                                         l427 1682                                           l435 1578  
                                         l355 142E                                           l365 15FC  
                                         l438 1580                                           l368 16A0  
                                         l377 153E                                           l395 1482  
                                         l388 1382                                           l398 14A0  
                                         l861 14A6                                           l867 1660  
                     ?_ADC_Is_Conversion_Done 0068                               __end_of_ADC_ISR 171E  
                                         _ret 001F                                           wreg 0FE8  
                             __end_of_RB4_ISR 170E                               __end_of_RB5_ISR 16F4  
                             __end_of_RB6_ISR 16DA                               __end_of_RB7_ISR 16C0  
                                        l3010 1662                                          l3100 1444  
                                        l3012 167A                                          l3020 1398  
                                        l3110 149E                                          l3102 1454  
                                        l3014 1540                                          l3030 1414  
                                        l3022 13A2                                          l3104 145C  
                                        l3016 1560                                          l3040 142A  
                                        l3032 1416                                          l3024 13F4  
                                        l3120 164C                                          l3050 15E2  
                                        l3106 1474                                          l3034 1418  
                                        l3026 1404                                          l3042 142C  
                                        l3018 1384                                          l3122 1656  
                                        l3114 1634                                          l3140 1260  
                                        l3052 15F4                                          l3060 1698  
                                        l3108 1490                                          l3036 141A  
                                        l3028 140C                                          l3116 1638  
                                        l3070 151A                                          l3054 15FA  
                                        l3046 15C6                                          l3062 16A2  
                                        l3038 141C                                          l3118 1642  
                                        l3134 14A2                                          l3080 12E4  
                                        l3072 1522                                          l1560 1204  
                                        l3048 15DA                                          l1704 171E  
                                        l3090 1352                                          l3082 12F4  
                                        l3074 153C                                          l3066 14F6  
                                        l1570 1222                                          l1562 120A  
                                        l3058 1684                                          l3084 12FC  
                                        l3068 150A                                          l1580 1240  
                                        l1572 1228                                          l1564 1210  
                                        l1556 11FA                                          l3086 1314  
                                        l3094 1380                                          l3078 12D0  
                                        l1582 1246                                          l1574 122E  
                                        l1566 1216                                          l1558 11FE  
                                        l3088 133A                                          l1576 1234  
                                        l1568 121C                                          l1584 124C  
                                        l1578 123A                                          l3098 1430  
                                        STR_1 1011                                          _LATA 0F89  
                                        _LATB 0F8A                                          _LATC 0F8B  
                                        _LATD 0F8C                                          _LATE 0F8D  
                                        u1700 1398                                          u1701 1394  
                                        u1710 15DA                                          u1711 15D6  
                                        u1800 1352                                          u1720 1698  
                                        u1801 134E                                          u1721 1694  
                                        u1730 150A                                          u1810 1444  
                                        u1731 1506                                          u1811 1440  
                                        u1740 151A                                          u1820 1454  
                                        u1741 1516                                          u1821 1450  
                                        u1750 1538                                          u1830 1490  
                                        u1670 167A                                          u1751 1532  
                                        u1831 148C                                          u1671 1676  
                                        u1760 153A                                          u1680 1558  
                                        u1681 1554                                          u1770 12E4  
                                        u1690 1578                                          u1771 12E0  
                                        u1691 1574                                          u1780 12F4  
                                        u1781 12F0                                          u1790 1314  
                                        u1791 1310                                          _re_1 0065  
                                        _re_2 0063                                          _re_3 0061  
                                        _re_4 005F                                          _main 14A2  
                                        fsr2h 0FDA                                          indf2 0FDF  
                                        fsr1l 0FE1                                          fsr2l 0FD9  
                                        btemp 0074                              __end_of_ADC_Init 1430  
                                        start 000E                __end_of_Interrupt_Manager_High 11F8  
                                ___param_bank 0000                    __end_of_ADC_Select_Channel 15FE  
     ADC_Is_Conversion_Done@conversion_status 0069                              __end_of_INT0_ISR 171A  
                            __end_of_INT1_ISR 1716                              __end_of_INT2_ISR 1712  
              __end_of_ADC_Is_Conversion_Done 1540                                 Relay_on@F3485 0059  
                                       ?_main 0067                                         _EEADR 0FA9  
                                       _RB4_f 0023                                         _RB5_f 0022  
                                       i2l444 171C                                         _RB6_f 0021  
                                       _RB7_f 0020                                         i2l742 1714  
                                       i2l830 11F4                                         i2l738 1718  
                                       i2l746 1710                                         i2l754 170C  
                                       i2l762 16F2                                         i2l770 16D8  
                                       i2l778 16BE                                         _PORTA 0F80  
                                       _PORTB 0F81                                         _PORTC 0F82  
                                       _PORTD 0F83                                         _PORTE 0F84  
                                       _TRISA 0F92                                         _TRISB 0F93  
                                       _TRISC 0F94                                         _TRISD 0F95  
                                       _TRISE 0F96                                         _adc_1 0039  
                                       _adc_2 0032                                         _adc_3 002B  
                                       _adc_4 0024                          _ADC_Start_Conversion 1684  
                                       tablat 0FF5                                         ttemp5 0075  
                                       ttemp6 0078                                         ttemp7 007C  
                                       status 0FD8                                         wtemp8 0075  
                             __initialization 15FE                     ADC_Is_Conversion_Done@adc 0068  
                   ADC_Is_Conversion_Done@ret 006A                                  __end_of_main 14F6  
                                   ??_ADC_ISR 0067                                 _lat_registers 000B  
                                      ??_main 0074                                 __activetblptr 0003  
                            led_turn_on@F3487 005D                                     ??_RB4_ISR 0067  
                                   ??_RB5_ISR 0067                                     ??_RB6_ISR 0067  
                                   ??_RB7_ISR 0067                     ?_adc_select_result_format 0068  
                       ?_ADC_Start_Conversion 0068                                        _ADRESH 0FC4  
                                      _EEADRH 0FAA                                        _ADRESL 0FC3  
                                      _EEDATA 0FA8                                        _EECON2 0FA7  
                                      i2l2002 16F2                                        i2l2012 16D8  
                                      i2l2006 16C2                                        i2l2022 16BE  
                                      i2l2008 16C4                                        i2l2016 16A8  
                                      i2l3000 11EA                                        i2l2018 16AA  
                                      i2l3002 11EE                                        i2l1934 171A  
                                      i2l2920 1046                                        i2l2912 1018  
                                      i2l2930 1078                                        i2l2922 1054  
                                      i2l2914 1026                                        i2l2940 10B4  
                                      i2l2932 1086                                        i2l2924 1058  
                                      i2l2916 1034                                        i2l1974 1716  
                                      i2l1982 170E                                        i2l2950 10EA  
                                      i2l2942 10C2                                        i2l2934 1094  
                                      i2l2926 1066                                        i2l2918 1038  
                                      i2l1992 170C                                        i2l2960 1122  
                                      i2l2952 10FA                                        i2l2944 10D2  
                                      i2l2936 1098                                        i2l2928 1074  
                                      i2l1978 1712                                        i2l1986 16F6  
                                      i2l2970 114E                                        i2l2962 1126  
                                      i2l2954 10FE                                        i2l2946 10D6  
                                      i2l2938 10A6                                        i2l1988 16F8  
                                      i2l1996 16DC                                        i2l2980 117C  
                                      i2l2972 1154                                        i2l2964 112C  
                                      i2l2956 1104                                        i2l2948 10DC  
                                      i2l1998 16DE                                        i2l2990 11B2  
                                      i2l2982 118A                                        i2l2974 1162  
                                      i2l2966 113A                                        i2l2958 1112  
                                      i2l2992 11C2                                        i2l2984 119A  
                                      i2l2976 1172                                        i2l2968 114A  
                                      i2l2994 11C6                                        i2l2986 119E  
                                      i2l2978 1176                                        i2l2996 11CC  
                                      i2l2988 11A4                                        i2l2998 11DA  
                              Relay_off@F3490 0058                       ?_Application_initialize 0067  
                                      clear_0 1624                                        isa$std 0001  
                                __pdataCOMRAM 0001                                     ?_ADC_Init 006B  
                                __mediumconst 0000                                        tblptrh 0FF7  
                                      tblptrl 0FF6                                        tblptru 0FF8  
         __end_of_ADC_Get_Conversion_Blocking 14A2                   _ADC_Get_Conversion_Blocking 1430  
                     ADC_Start_Conversion@adc 0068                       ADC_Start_Conversion@ret 0069  
                                  __accesstop 0080                       __end_of__initialization 162A  
                                   ?_INT0_ISR 0067                                     ?_INT1_ISR 0067  
                                   ?_INT2_ISR 0067                      ??_adc_select_voltage_ref 0069  
               ??_ADC_Get_Conversion_Blocking 0072                                 ___rparam_used 0001  
                              __pcstackCOMRAM 0067                __end_of_Application_initialize 1662  
                               RB4_ISR@source 0067                    _RB6_Interrupt_Handler_High 0046  
                                  ??_ADC_Init 006C                        ??_ADC_Start_Conversion 0069  
                  ?_ADC_Get_Conversion_Result 0068                                 RB5_ISR@source 0067  
                   _RB5_Interrupt_Handler_Low 0048                                    ??_INT0_ISR 0067  
                                  ??_INT1_ISR 0067                                    ??_INT2_ISR 0067  
                      _INT2_Interrupt_Handler 0050                                 RB6_ISR@source 0067  
                           led_turn_off@F3492 005C                   adc_select_result_format@adc 0068  
                                     _ADC_ISR 171A                                       _RB4_ISR 16F4  
                                     _RB5_ISR 16DA                                       _RB6_ISR 16C0  
                                     _RB7_ISR 16A6                            _ADC_Select_Channel 15C6  
                                     i2u50_40 16EE                                       i2u50_41 16EA  
                                     i2u51_40 16D4                                       i2u51_41 16D0  
                                     i2u52_40 16BA                                       i2u52_41 16B6  
                                     i2u49_40 1708                                       i2u49_41 1704  
                               RB7_ISR@source 0067             __end_of_ADC_Get_Conversion_Result 1384  
                         ?_ADC_Select_Channel 006B                                    _btn_values 1001  
                              _tris_registers 0015                                       __Hparam 0000  
                                     __Lparam 0000                          ??_ADC_Select_Channel 006D  
                                __psmallconst 1000                                       __pcinit 15FE  
                                     __ramtop 1000                                       __ptext0 14A2  
                                     __ptext1 1634                                       __ptext2 171E  
                                     __ptext3 1384                                       __ptext4 1540  
                                     __ptext5 1662                                       __ptext6 1430  
                                     __ptext7 1684                                       __ptext8 15C6  
                                     __ptext9 11F8                                __pintcode_body 1016  
                        end_of_initialization 162A  ADC_Get_Conversion_Blocking@conversion_status 0072  
                                     int_func 1016                                       postdec1 0FE5  
                                     postdec2 0FDD                                       postinc0 0FEE  
                                     postinc2 0FDE                                     _PORTBbits 0F81  
                      _adc_select_voltage_ref 1540                     ADC_Select_Channel@channel 006C  
                    ??_Interrupt_Manager_High 0068                      ??_ADC_Is_Conversion_Done 006A  
                               __pidataCOMRAM 1586                      _adc_select_result_format 1662  
     adc_input_channel_port_configure@channel 006A                           start_initialization 15FE  
                 ??_ADC_Get_Conversion_Result 006A                                      ?_ADC_ISR 0067  
                  _RB5_Interrupt_Handler_High 004A                  __end_of_ecu_layer_initialize 1720  
                                    ?_RB4_ISR 0067                                      ?_RB5_ISR 0067  
                                    ?_RB6_ISR 0067                                      ?_RB7_ISR 0067  
                                 __pbssCOMRAM 0040                     _RB6_Interrupt_Handler_Low 0044  
                      _INT0_Interrupt_Handler 0054                ADC_Get_Conversion_Blocking@adc 006F  
              ADC_Get_Conversion_Blocking@ret 0073                         Relay_initialize@F3480 005A  
                      __ADC_Interrupt_Handler 0056                     _ADC_Get_Conversion_Result 12D0  
                                   __pintcode 0008      __end_of_adc_input_channel_port_configure 12D0  
          ??_adc_input_channel_port_configure 0068             ?_adc_input_channel_port_configure 0067  
            _adc_input_channel_port_configure 11F8             ADC_Get_Conversion_Blocking@result 0071  
                   adc_select_voltage_ref@adc 0068                                   __smallconst 1000  
                                    _ADC_Init 1384                                   ADC_Init@adc 006B  
                                 ADC_Init@ret 006D                                      _INT0_ISR 1716  
                                    _INT1_ISR 1712                                      _INT2_ISR 170E  
                    ??_Application_initialize 006E                                      _PIE1bits 0F9D  
                                    i2u141_40 1026                                      i2u141_41 1022  
                                    i2u150_40 10B4                                      i2u142_40 1034  
                                    i2u150_41 10B0                                      i2u142_41 1030  
                                    i2u151_40 10C2                                      i2u143_40 1046  
                                    i2u151_41 10BE                                      i2u143_41 1042  
                                    i2u160_40 1172                                      i2u152_40 10D2  
                                    i2u144_40 1054                                      i2u160_41 116E  
                                    i2u152_41 10CE                                      i2u144_41 1050  
                                    i2u161_40 118A                                      i2u153_40 10EA  
                                    i2u145_40 1066                                      i2u161_41 1186  
                                    i2u153_41 10E6                                      i2u145_41 1062  
                                    i2u162_40 119A                                      i2u154_40 10FA  
                                    i2u146_40 1074                                      i2u162_41 1196  
                                    i2u154_41 10F6                                      i2u146_41 1070  
                                    i2u163_40 11B2                                      i2u155_40 1112  
                                    i2u147_40 1086                                      i2u163_41 11AE  
                                    i2u155_41 110E                                      i2u147_41 1082  
                                    i2u164_40 11C2                                      i2u156_40 1122  
                                    i2u148_40 1094                                      i2u164_41 11BE  
                                    i2u156_41 111E                                      i2u148_41 1090  
                                    i2u165_40 11DA                                      i2u157_40 113A  
                                    i2u149_40 10A6                                      i2u165_41 11D6  
                                    i2u157_41 1136                                      i2u149_41 10A2  
                                    i2u166_40 11EA                                      i2u158_40 114A  
                                    i2u166_41 11E6                                      i2u158_41 1146  
                                    i2u159_40 1162                                      i2u159_41 115E  
                                    _PIR1bits 0F9E                       ?_adc_select_voltage_ref 0068  
                      _Interrupt_Manager_High 0008                                    _ADCON0bits 0FC2  
                                  _ADCON1bits 0FC1                                    _ADCON2bits 0FC0  
                      _ADC_Is_Conversion_Done 14F6                  ?_ADC_Get_Conversion_Blocking 006F  
                                 _INTCON2bits 0FF1                                   _INTCON3bits 0FF0  
                                   copy_data0 1612                          _ecu_layer_initialize 171E  
                                  _EECON1bits 0FA6                                      __Hrparam 0000  
                  ??_adc_select_result_format 0069                                      __Lrparam 0000  
              __end_of_adc_select_voltage_ref 1586                            __end_of_btn_values 1011  
                          led_intialize@F3482 005E                                      __ptext10 14F6  
                                    __ptext11 12D0                                      __ptext20 171A  
                                    __ptext13 16A6                                      __ptext14 16C0  
                                    __ptext15 16DA                                      __ptext16 16F4  
                                    __ptext17 170E                                      __ptext18 1712  
                                    __ptext19 1716                         ?_ecu_layer_initialize 0067  
                                    isa$xinst 0000                                      int$flags 0074  
                                  _INTCONbits 0FF2                                      intlevel2 0000  
          ADC_Get_Conversion_Blocking@channel 0070                        led_toggle_status@F3497 005B  
                       ADC_Select_Channel@adc 006B                  __end_of_ADC_Start_Conversion 16A6  
                       ADC_Select_Channel@ret 006E                    _RB4_Interrupt_Handler_High 004E  
                      _Application_initialize 1634                    _RB7_Interrupt_Handler_High 0042  
                              _port_registers 0001                     _RB4_Interrupt_Handler_Low 004C  
                   _RB7_Interrupt_Handler_Low 0040                        ??_ecu_layer_initialize 0068  
             ADC_Get_Conversion_Result@result 0069                        _INT1_Interrupt_Handler 0052  
            __end_of_adc_select_result_format 1684  
