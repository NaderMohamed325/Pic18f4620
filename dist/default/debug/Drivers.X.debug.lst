

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Feb 18 15:00:03 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Generated 23/03/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72   000000                     
    73                           	psect	idataCOMRAM
    74   001582                     __pidataCOMRAM:
    75                           	callstack 0
    76                           
    77                           ;initializer for _port_registers
    78   001582  80                 	db	128
    79   001583  0F                 	db	15
    80   001584  81                 	db	129
    81   001585  0F                 	db	15
    82   001586  82                 	db	130
    83   001587  0F                 	db	15
    84   001588  83                 	db	131
    85   001589  0F                 	db	15
    86   00158A  84                 	db	132
    87   00158B  0F                 	db	15
    88                           
    89                           ;initializer for _lat_registers
    90   00158C  89                 	db	137
    91   00158D  0F                 	db	15
    92   00158E  8A                 	db	138
    93   00158F  0F                 	db	15
    94   001590  8B                 	db	139
    95   001591  0F                 	db	15
    96   001592  8C                 	db	140
    97   001593  0F                 	db	15
    98   001594  8D                 	db	141
    99   001595  0F                 	db	15
   100                           
   101                           ;initializer for _tris_registers
   102   001596  92                 	db	146
   103   001597  0F                 	db	15
   104   001598  93                 	db	147
   105   001599  0F                 	db	15
   106   00159A  94                 	db	148
   107   00159B  0F                 	db	15
   108   00159C  95                 	db	149
   109   00159D  0F                 	db	15
   110   00159E  96                 	db	150
   111   00159F  0F                 	db	15
   112                           
   113                           ;initializer for _ret
   114   0015A0  01                 	db	1
   115                           
   116                           ;initializer for _RB7_f
   117   0015A1  01                 	db	1
   118                           
   119                           ;initializer for _RB6_f
   120   0015A2  01                 	db	1
   121                           
   122                           ;initializer for _RB5_f
   123   0015A3  01                 	db	1
   124                           
   125                           ;initializer for _RB4_f
   126   0015A4  01                 	db	1
   127                           
   128                           ;initializer for _adc_4
   129   0015A5  00                 	db	0
   130   0015A6  00                 	db	0
   131   0015A7  05                 	db	5
   132   0015A8  05                 	db	5
   133   0015A9  03                 	db	3
   134   0015AA  00                 	db	0
   135   0015AB  02                 	db	2
   136                           
   137                           ;initializer for _adc_3
   138   0015AC  00                 	db	0
   139   0015AD  00                 	db	0
   140   0015AE  05                 	db	5
   141   0015AF  05                 	db	5
   142   0015B0  02                 	db	2
   143   0015B1  00                 	db	0
   144   0015B2  02                 	db	2
   145                           
   146                           ;initializer for _adc_2
   147   0015B3  00                 	db	0
   148   0015B4  00                 	db	0
   149   0015B5  05                 	db	5
   150   0015B6  05                 	db	5
   151   0015B7  01                 	db	1
   152   0015B8  00                 	db	0
   153   0015B9  02                 	db	2
   154                           
   155                           ;initializer for _adc_1
   156   0015BA  00                 	db	0
   157   0015BB  00                 	db	0
   158   0015BC  05                 	db	5
   159   0015BD  05                 	db	5
   160   0015BE  00                 	db	0
   161   0015BF  00                 	db	0
   162   0015C0  02                 	db	2
   163                           
   164                           	psect	smallconst
   165   001000                     __psmallconst:
   166                           	callstack 0
   167   001000  00                 	db	0
   168   001001                     _btn_values:
   169                           	callstack 0
   170   001001  37                 	db	55
   171   001002  38                 	db	56
   172   001003  39                 	db	57
   173   001004  2F                 	db	47
   174   001005  34                 	db	52
   175   001006  35                 	db	53
   176   001007  36                 	db	54
   177   001008  2A                 	db	42
   178   001009  31                 	db	49
   179   00100A  32                 	db	50
   180   00100B  33                 	db	51
   181   00100C  2D                 	db	45
   182   00100D  23                 	db	35
   183   00100E  30                 	db	48
   184   00100F  3D                 	db	61
   185   001010  2B                 	db	43
   186   001011                     __end_of_btn_values:
   187                           	callstack 0
   188   000000                     _INTCON2bits	set	4081
   189   000000                     _EECON2	set	4007
   190   000000                     _ADCON1bits	set	4033
   191   000000                     _ADRESL	set	4035
   192   000000                     _ADRESH	set	4036
   193   000000                     _TRISD	set	3989
   194   000000                     _TRISC	set	3988
   195   000000                     _TRISB	set	3987
   196   000000                     _TRISE	set	3990
   197   000000                     _PORTBbits	set	3969
   198   000000                     _PIE1bits	set	3997
   199   000000                     _ADCON2bits	set	4032
   200   000000                     _ADCON0bits	set	4034
   201   000000                     _PORTE	set	3972
   202   000000                     _PORTD	set	3971
   203   000000                     _PORTC	set	3970
   204   000000                     _PORTB	set	3969
   205   000000                     _PORTA	set	3968
   206   000000                     _LATA	set	3977
   207   000000                     _TRISA	set	3986
   208   000000                     _EECON1bits	set	4006
   209   000000                     _EEDATA	set	4008
   210   000000                     _EEADR	set	4009
   211   000000                     _EEADRH	set	4010
   212   000000                     _PIR1bits	set	3998
   213   000000                     _INTCON3bits	set	4080
   214   000000                     _INTCONbits	set	4082
   215   000000                     _LATE	set	3981
   216   000000                     _LATD	set	3980
   217   000000                     _LATC	set	3979
   218   000000                     _LATB	set	3978
   219   001011                     STR_1:
   220   001011  25                 	db	37
   221   001012  69                 	db	105	;'i'
   222   001013  00                 	db	0
   223   001014  00                 	db	0	; dummy byte at the end
   224   000000                     
   225                           ; #config settings
   226                           
   227                           	psect	cinit
   228   0015FA                     __pcinit:
   229                           	callstack 0
   230   0015FA                     start_initialization:
   231                           	callstack 0
   232   0015FA                     __initialization:
   233                           	callstack 0
   234                           
   235                           ; Initialize objects allocated to COMRAM (63 bytes)
   236                           ; load TBLPTR registers with __pidataCOMRAM
   237   0015FA  0E82               	movlw	low __pidataCOMRAM
   238   0015FC  6EF6               	movwf	tblptrl,c
   239   0015FE  0E15               	movlw	high __pidataCOMRAM
   240   001600  6EF7               	movwf	tblptrh,c
   241   001602  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   242   001604  6EF8               	movwf	tblptru,c
   243   001606  EE00  F001         	lfsr	0,__pdataCOMRAM
   244   00160A  EE10 F03F          	lfsr	1,63
   245   00160E                     copy_data0:
   246   00160E  0009               	tblrd		*+
   247   001610  CFF5 FFEE          	movff	tablat,postinc0
   248   001614  50E5               	movf	postdec1,w,c
   249   001616  50E1               	movf	fsr1l,w,c
   250   001618  E1FA               	bnz	copy_data0
   251                           
   252                           ; Clear objects allocated to COMRAM (39 bytes)
   253   00161A  EE00  F040         	lfsr	0,__pbssCOMRAM
   254   00161E  0E27               	movlw	39
   255   001620                     clear_0:
   256   001620  6AEE               	clrf	postinc0,c
   257   001622  06E8               	decf	wreg,f,c
   258   001624  E1FD               	bnz	clear_0
   259   001626                     end_of_initialization:
   260                           	callstack 0
   261   001626                     __end_of__initialization:
   262                           	callstack 0
   263   001626  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   264   001628  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   265   00162A  0100               	movlb	0
   266   00162C  EF4F  F00A         	goto	_main	;jump to C main() function
   267                           
   268                           	psect	bssCOMRAM
   269   000040                     __pbssCOMRAM:
   270                           	callstack 0
   271   000040                     _RB7_Interrupt_Handler_Low:
   272                           	callstack 0
   273   000040                     	ds	2
   274   000042                     _RB7_Interrupt_Handler_High:
   275                           	callstack 0
   276   000042                     	ds	2
   277   000044                     _RB6_Interrupt_Handler_Low:
   278                           	callstack 0
   279   000044                     	ds	2
   280   000046                     _RB6_Interrupt_Handler_High:
   281                           	callstack 0
   282   000046                     	ds	2
   283   000048                     _RB5_Interrupt_Handler_Low:
   284                           	callstack 0
   285   000048                     	ds	2
   286   00004A                     _RB5_Interrupt_Handler_High:
   287                           	callstack 0
   288   00004A                     	ds	2
   289   00004C                     _RB4_Interrupt_Handler_Low:
   290                           	callstack 0
   291   00004C                     	ds	2
   292   00004E                     _RB4_Interrupt_Handler_High:
   293                           	callstack 0
   294   00004E                     	ds	2
   295   000050                     _INT2_Interrupt_Handler:
   296                           	callstack 0
   297   000050                     	ds	2
   298   000052                     _INT1_Interrupt_Handler:
   299                           	callstack 0
   300   000052                     	ds	2
   301   000054                     _INT0_Interrupt_Handler:
   302                           	callstack 0
   303   000054                     	ds	2
   304   000056                     __ADC_Interrupt_Handler:
   305                           	callstack 0
   306   000056                     	ds	2
   307   000058                     Relay_off@F3490:
   308                           	callstack 0
   309   000058                     	ds	1
   310   000059                     Relay_on@F3485:
   311                           	callstack 0
   312   000059                     	ds	1
   313   00005A                     Relay_initialize@F3480:
   314                           	callstack 0
   315   00005A                     	ds	1
   316   00005B                     led_toggle_status@F3497:
   317                           	callstack 0
   318   00005B                     	ds	1
   319   00005C                     led_turn_off@F3492:
   320                           	callstack 0
   321   00005C                     	ds	1
   322   00005D                     led_turn_on@F3487:
   323                           	callstack 0
   324   00005D                     	ds	1
   325   00005E                     led_intialize@F3482:
   326                           	callstack 0
   327   00005E                     	ds	1
   328   00005F                     _re_4:
   329                           	callstack 0
   330   00005F                     	ds	2
   331   000061                     _re_3:
   332                           	callstack 0
   333   000061                     	ds	2
   334   000063                     _re_2:
   335                           	callstack 0
   336   000063                     	ds	2
   337   000065                     _re_1:
   338                           	callstack 0
   339   000065                     	ds	2
   340                           
   341                           	psect	dataCOMRAM
   342   000001                     __pdataCOMRAM:
   343                           	callstack 0
   344   000001                     _port_registers:
   345                           	callstack 0
   346   000001                     	ds	10
   347   00000B                     _lat_registers:
   348                           	callstack 0
   349   00000B                     	ds	10
   350   000015                     _tris_registers:
   351                           	callstack 0
   352   000015                     	ds	10
   353   00001F                     _ret:
   354                           	callstack 0
   355   00001F                     	ds	1
   356   000020                     _RB7_f:
   357                           	callstack 0
   358   000020                     	ds	1
   359   000021                     _RB6_f:
   360                           	callstack 0
   361   000021                     	ds	1
   362   000022                     _RB5_f:
   363                           	callstack 0
   364   000022                     	ds	1
   365   000023                     _RB4_f:
   366                           	callstack 0
   367   000023                     	ds	1
   368   000024                     _adc_4:
   369                           	callstack 0
   370   000024                     	ds	7
   371   00002B                     _adc_3:
   372                           	callstack 0
   373   00002B                     	ds	7
   374   000032                     _adc_2:
   375                           	callstack 0
   376   000032                     	ds	7
   377   000039                     _adc_1:
   378                           	callstack 0
   379   000039                     	ds	7
   380                           
   381                           	psect	cstackCOMRAM
   382   000067                     __pcstackCOMRAM:
   383                           	callstack 0
   384   000067                     RB4_ISR@source:
   385                           	callstack 0
   386   000067                     RB5_ISR@source:
   387                           	callstack 0
   388   000067                     RB6_ISR@source:
   389                           	callstack 0
   390   000067                     RB7_ISR@source:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0x0
   394   000067                     	ds	1
   395   000068                     ??_adc_input_channel_port_configure:
   396   000068                     ADC_Start_Conversion@adc:
   397                           	callstack 0
   398   000068                     ADC_Is_Conversion_Done@adc:
   399                           	callstack 0
   400   000068                     ADC_Get_Conversion_Result@adc:
   401                           	callstack 0
   402   000068                     adc_select_result_format@adc:
   403                           	callstack 0
   404   000068                     adc_select_voltage_ref@adc:
   405                           	callstack 0
   406                           
   407                           ; 1 bytes @ 0x1
   408   000068                     	ds	1
   409   000069                     ADC_Start_Conversion@ret:
   410                           	callstack 0
   411   000069                     ADC_Is_Conversion_Done@conversion_status:
   412                           	callstack 0
   413   000069                     ADC_Get_Conversion_Result@result:
   414                           	callstack 0
   415                           
   416                           ; 1 bytes @ 0x2
   417   000069                     	ds	1
   418   00006A                     ??_ADC_Get_Conversion_Result:
   419   00006A                     ADC_Is_Conversion_Done@ret:
   420                           	callstack 0
   421   00006A                     adc_input_channel_port_configure@channel:
   422                           	callstack 0
   423                           
   424                           ; 1 bytes @ 0x3
   425   00006A                     	ds	1
   426   00006B                     ADC_Init@adc:
   427                           	callstack 0
   428   00006B                     ADC_Select_Channel@adc:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0x4
   432   00006B                     	ds	1
   433   00006C                     ??_ADC_Init:
   434   00006C                     ADC_Select_Channel@channel:
   435                           	callstack 0
   436   00006C                     ADC_Get_Conversion_Result@ret:
   437                           	callstack 0
   438                           
   439                           ; 1 bytes @ 0x5
   440   00006C                     	ds	1
   441   00006D                     ??_ADC_Select_Channel:
   442   00006D                     ADC_Init@ret:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x6
   446   00006D                     	ds	1
   447   00006E                     ADC_Select_Channel@ret:
   448                           	callstack 0
   449                           
   450                           ; 1 bytes @ 0x7
   451   00006E                     	ds	1
   452   00006F                     ADC_Get_Conversion_Blocking@adc:
   453                           	callstack 0
   454                           
   455                           ; 1 bytes @ 0x8
   456   00006F                     	ds	1
   457   000070                     ADC_Get_Conversion_Blocking@channel:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0x9
   461   000070                     	ds	1
   462   000071                     ADC_Get_Conversion_Blocking@result:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0xA
   466   000071                     	ds	1
   467   000072                     ADC_Get_Conversion_Blocking@conversion_status:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0xB
   471   000072                     	ds	1
   472   000073                     ADC_Get_Conversion_Blocking@ret:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0xC
   476   000073                     	ds	1
   477   000074                     
   478                           ; 1 bytes @ 0xD
   479 ;;
   480 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   481 ;;
   482 ;; *************** function _main *****************
   483 ;; Defined at:
   484 ;;		line 42 in file "app.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  2  853[None  ] int 
   491 ;; Registers used:
   492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;Total ram usage:        0 bytes
   503 ;; Hardware stack levels required when called: 5
   504 ;; This function calls:
   505 ;;		_ADC_Get_Conversion_Blocking
   506 ;;		_Application_initialize
   507 ;; This function is called by:
   508 ;;		Startup code after reset
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text0
   513   00149E                     __ptext0:
   514                           	callstack 0
   515   00149E                     _main:
   516                           	callstack 26
   517   00149E                     
   518                           ;app.c: 44:     Application_initialize();
   519   00149E  EC18  F00B         	call	_Application_initialize	;wreg free
   520   0014A2                     l854:
   521                           
   522                           ;app.c: 47:         ret = ADC_Get_Conversion_Blocking(&adc_1, ADC_CHANNEL_AN0, &re_1);
   523   0014A2  0E39               	movlw	low _adc_1
   524   0014A4  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   525   0014A6  0E00               	movlw	0
   526   0014A8  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   527   0014AA  0E65               	movlw	low _re_1
   528   0014AC  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   529   0014AE  EC16  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   530   0014B2  6E1F               	movwf	_ret^0,c
   531                           
   532                           ;app.c: 48:         ret = ADC_Get_Conversion_Blocking(&adc_2, ADC_CHANNEL_AN1, &re_2);
   533   0014B4  0E32               	movlw	low _adc_2
   534   0014B6  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   535   0014B8  0E01               	movlw	1
   536   0014BA  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   537   0014BC  0E63               	movlw	low _re_2
   538   0014BE  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   539   0014C0  EC16  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   540   0014C4  6E1F               	movwf	_ret^0,c
   541                           
   542                           ;app.c: 49:         ret = ADC_Get_Conversion_Blocking(&adc_3, ADC_CHANNEL_AN2, &re_3);
   543   0014C6  0E2B               	movlw	low _adc_3
   544   0014C8  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   545   0014CA  0E02               	movlw	2
   546   0014CC  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   547   0014CE  0E61               	movlw	low _re_3
   548   0014D0  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   549   0014D2  EC16  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   550   0014D6  6E1F               	movwf	_ret^0,c
   551                           
   552                           ;app.c: 50:         ret = ADC_Get_Conversion_Blocking(&adc_4, ADC_CHANNEL_AN3, &re_4);
   553   0014D8  0E24               	movlw	low _adc_4
   554   0014DA  6E6F               	movwf	ADC_Get_Conversion_Blocking@adc^0,c
   555   0014DC  0E03               	movlw	3
   556   0014DE  6E70               	movwf	ADC_Get_Conversion_Blocking@channel^0,c
   557   0014E0  0E5F               	movlw	low _re_4
   558   0014E2  6E71               	movwf	ADC_Get_Conversion_Blocking@result^0,c
   559   0014E4  EC16  F00A         	call	_ADC_Get_Conversion_Blocking	;wreg free
   560   0014E8  6E1F               	movwf	_ret^0,c
   561   0014EA  EF51  F00A         	goto	l854
   562   0014EE  EF07  F000         	goto	start
   563   0014F2                     __end_of_main:
   564                           	callstack 0
   565                           
   566 ;; *************** function _Application_initialize *****************
   567 ;; Defined at:
   568 ;;		line 56 in file "app.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;		None
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;Total ram usage:        0 bytes
   587 ;; Hardware stack levels used: 1
   588 ;; Hardware stack levels required when called: 4
   589 ;; This function calls:
   590 ;;		_ADC_Init
   591 ;;		_ecu_layer_initialize
   592 ;; This function is called by:
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text1
   598   001630                     __ptext1:
   599                           	callstack 0
   600   001630                     _Application_initialize:
   601                           	callstack 26
   602   001630                     
   603                           ;app.c: 57:     ecu_layer_initialize();
   604   001630  EC8D  F00B         	call	_ecu_layer_initialize	;wreg free
   605   001634                     
   606                           ;app.c: 58:     ret = ADC_Init(&adc_1);
   607   001634  0E39               	movlw	low _adc_1
   608   001636  6E6B               	movwf	ADC_Init@adc^0,c
   609   001638  ECC2  F009         	call	_ADC_Init	;wreg free
   610   00163C  6E1F               	movwf	_ret^0,c
   611   00163E                     
   612                           ;app.c: 59:     ret = ADC_Init(&adc_2);
   613   00163E  0E32               	movlw	low _adc_2
   614   001640  6E6B               	movwf	ADC_Init@adc^0,c
   615   001642  ECC2  F009         	call	_ADC_Init	;wreg free
   616   001646  6E1F               	movwf	_ret^0,c
   617   001648                     
   618                           ;app.c: 60:     ret = ADC_Init(&adc_3);
   619   001648  0E2B               	movlw	low _adc_3
   620   00164A  6E6B               	movwf	ADC_Init@adc^0,c
   621   00164C  ECC2  F009         	call	_ADC_Init	;wreg free
   622   001650  6E1F               	movwf	_ret^0,c
   623   001652                     
   624                           ;app.c: 61:     ret = ADC_Init(&adc_4);
   625   001652  0E24               	movlw	low _adc_4
   626   001654  6E6B               	movwf	ADC_Init@adc^0,c
   627   001656  ECC2  F009         	call	_ADC_Init	;wreg free
   628   00165A  6E1F               	movwf	_ret^0,c
   629   00165C  0012               	return		;funcret
   630   00165E                     __end_of_Application_initialize:
   631                           	callstack 0
   632                           
   633 ;; *************** function _ecu_layer_initialize *****************
   634 ;; Defined at:
   635 ;;		line 11 in file "ECU_LAYER/ecu_layer_init.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  ret             1    0        unsigned char 
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   653 ;;Total ram usage:        0 bytes
   654 ;; Hardware stack levels used: 1
   655 ;; Hardware stack levels required when called: 2
   656 ;; This function calls:
   657 ;;		Nothing
   658 ;; This function is called by:
   659 ;;		_Application_initialize
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text2
   664   00171A                     __ptext2:
   665                           	callstack 0
   666   00171A                     _ecu_layer_initialize:
   667                           	callstack 27
   668   00171A  0012               	return		;funcret
   669   00171C                     __end_of_ecu_layer_initialize:
   670                           	callstack 0
   671                           
   672 ;; *************** function _ADC_Init *****************
   673 ;; Defined at:
   674 ;;		line 26 in file "MCAL_LAYER/ADC/hal_adc.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  adc             1    4[COMRAM] PTR const struct .
   677 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  ret             1    6[COMRAM] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      unsigned char 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   689 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;Total ram usage:        3 bytes
   694 ;; Hardware stack levels used: 1
   695 ;; Hardware stack levels required when called: 3
   696 ;; This function calls:
   697 ;;		_adc_input_channel_port_configure
   698 ;;		_adc_select_result_format
   699 ;;		_adc_select_voltage_ref
   700 ;; This function is called by:
   701 ;;		_Application_initialize
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text3
   706   001384                     __ptext3:
   707                           	callstack 0
   708   001384                     _ADC_Init:
   709                           	callstack 26
   710   001384                     
   711                           ;MCAL_LAYER/ADC/hal_adc.c: 27:     Std_ReturnType ret = (Std_ReturnType)0X01;
   712   001384  0E01               	movlw	1
   713   001386  6E6D               	movwf	ADC_Init@ret^0,c
   714                           
   715                           ;MCAL_LAYER/ADC/hal_adc.c: 30:     if (((void*)0) == adc) {
   716   001388  506B               	movf	ADC_Init@adc^0,w,c
   717   00138A  A4D8               	btfss	status,2,c
   718   00138C  EFCA  F009         	goto	u1691
   719   001390  EFCC  F009         	goto	u1690
   720   001394                     u1691:
   721   001394  EFD0  F009         	goto	l351
   722   001398                     u1690:
   723   001398                     
   724                           ;MCAL_LAYER/ADC/hal_adc.c: 31:         ret = (Std_ReturnType)0X00;
   725   001398  0E00               	movlw	0
   726   00139A  6E6D               	movwf	ADC_Init@ret^0,c
   727                           
   728                           ;MCAL_LAYER/ADC/hal_adc.c: 32:     } else {
   729   00139C  EF14  F00A         	goto	l3017
   730   0013A0                     l351:
   731                           
   732                           ;MCAL_LAYER/ADC/hal_adc.c: 34:         (ADCON0bits.ADON = 0);
   733   0013A0  90C2               	bcf	194,0,c	;volatile
   734   0013A2                     
   735                           ;MCAL_LAYER/ADC/hal_adc.c: 37:         ADCON2bits.ACQT = adc->adc_acquisition;
   736   0013A2  506B               	movf	ADC_Init@adc^0,w,c
   737   0013A4  6ED9               	movwf	fsr2l,c
   738   0013A6  6ADA               	clrf	fsr2h,c
   739   0013A8  0E02               	movlw	2
   740   0013AA  26D9               	addwf	fsr2l,f,c
   741   0013AC  50DF               	movf	indf2,w,c
   742   0013AE  6E6C               	movwf	??_ADC_Init^0,c
   743   0013B0  466C               	rlncf	??_ADC_Init^0,f,c
   744   0013B2  466C               	rlncf	??_ADC_Init^0,f,c
   745   0013B4  466C               	rlncf	??_ADC_Init^0,f,c
   746   0013B6  50C0               	movf	192,w,c	;volatile
   747   0013B8  186C               	xorwf	??_ADC_Init^0,w,c
   748   0013BA  0BC7               	andlw	-57
   749   0013BC  186C               	xorwf	??_ADC_Init^0,w,c
   750   0013BE  6EC0               	movwf	192,c	;volatile
   751                           
   752                           ;MCAL_LAYER/ADC/hal_adc.c: 38:         ADCON2bits.ADCS = adc->adc_conversion_clock;
   753   0013C0  506B               	movf	ADC_Init@adc^0,w,c
   754   0013C2  6ED9               	movwf	fsr2l,c
   755   0013C4  6ADA               	clrf	fsr2h,c
   756   0013C6  0E03               	movlw	3
   757   0013C8  26D9               	addwf	fsr2l,f,c
   758   0013CA  50DF               	movf	indf2,w,c
   759   0013CC  6E6C               	movwf	??_ADC_Init^0,c
   760   0013CE  50C0               	movf	192,w,c	;volatile
   761   0013D0  186C               	xorwf	??_ADC_Init^0,w,c
   762   0013D2  0BF8               	andlw	-8
   763   0013D4  186C               	xorwf	??_ADC_Init^0,w,c
   764   0013D6  6EC0               	movwf	192,c	;volatile
   765                           
   766                           ;MCAL_LAYER/ADC/hal_adc.c: 41:         ADCON0bits.CHS = adc->adc_channel;
   767   0013D8  506B               	movf	ADC_Init@adc^0,w,c
   768   0013DA  6ED9               	movwf	fsr2l,c
   769   0013DC  6ADA               	clrf	fsr2h,c
   770   0013DE  0E04               	movlw	4
   771   0013E0  26D9               	addwf	fsr2l,f,c
   772   0013E2  50DF               	movf	indf2,w,c
   773   0013E4  6E6C               	movwf	??_ADC_Init^0,c
   774   0013E6  466C               	rlncf	??_ADC_Init^0,f,c
   775   0013E8  466C               	rlncf	??_ADC_Init^0,f,c
   776   0013EA  50C2               	movf	194,w,c	;volatile
   777   0013EC  186C               	xorwf	??_ADC_Init^0,w,c
   778   0013EE  0BC3               	andlw	-61
   779   0013F0  186C               	xorwf	??_ADC_Init^0,w,c
   780   0013F2  6EC2               	movwf	194,c	;volatile
   781   0013F4                     
   782                           ;MCAL_LAYER/ADC/hal_adc.c: 42:         adc_input_channel_port_configure(adc->adc_channel
      +                          );
   783   0013F4  506B               	movf	ADC_Init@adc^0,w,c
   784   0013F6  6ED9               	movwf	fsr2l,c
   785   0013F8  6ADA               	clrf	fsr2h,c
   786   0013FA  0E04               	movlw	4
   787   0013FC  26D9               	addwf	fsr2l,f,c
   788   0013FE  50DF               	movf	indf2,w,c
   789   001400  ECFC  F008         	call	_adc_input_channel_port_configure
   790   001404                     
   791                           ;MCAL_LAYER/ADC/hal_adc.c: 45:         adc_select_result_format(adc);
   792   001404  C06B  F068         	movff	ADC_Init@adc,adc_select_result_format@adc
   793   001408  EC2F  F00B         	call	_adc_select_result_format	;wreg free
   794   00140C                     
   795                           ;MCAL_LAYER/ADC/hal_adc.c: 46:         adc_select_voltage_ref(adc);
   796   00140C  C06B  F068         	movff	ADC_Init@adc,adc_select_voltage_ref@adc
   797   001410  EC9E  F00A         	call	_adc_select_voltage_ref	;wreg free
   798   001414                     
   799                           ;MCAL_LAYER/ADC/hal_adc.c: 49:         (PIE1bits.ADIE = 1);
   800   001414  8C9D               	bsf	157,6,c	;volatile
   801   001416                     
   802                           ;MCAL_LAYER/ADC/hal_adc.c: 50:         (PIR1bits.ADIF = 0);
   803   001416  9C9E               	bcf	158,6,c	;volatile
   804   001418                     
   805                           ;MCAL_LAYER/ADC/hal_adc.c: 59:         _ADC_Interrupt_Handler = adc->ADC_Interrupt_Handl
      +                          er;
   806   001418  506B               	movf	ADC_Init@adc^0,w,c
   807   00141A  6ED9               	movwf	fsr2l,c
   808   00141C  6ADA               	clrf	fsr2h,c
   809   00141E  CFDE F056          	movff	postinc2,__ADC_Interrupt_Handler
   810   001422  CFDD F057          	movff	postdec2,__ADC_Interrupt_Handler+1
   811   001426                     
   812                           ;MCAL_LAYER/ADC/hal_adc.c: 64:         (ADCON0bits.ADON = 1);
   813   001426  80C2               	bsf	194,0,c	;volatile
   814   001428                     l3017:
   815                           
   816                           ;MCAL_LAYER/ADC/hal_adc.c: 67:     return ret;
   817   001428  506D               	movf	ADC_Init@ret^0,w,c
   818   00142A  0012               	return		;funcret
   819   00142C                     __end_of_ADC_Init:
   820                           	callstack 0
   821                           
   822 ;; *************** function _adc_select_voltage_ref *****************
   823 ;; Defined at:
   824 ;;		line 281 in file "MCAL_LAYER/ADC/hal_adc.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;  adc             1    1[COMRAM] PTR const struct .
   827 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;		None
   830 ;; Return value:  Size  Location     Type
   831 ;;                  1    wreg      void 
   832 ;; Registers used:
   833 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   839 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   843 ;;Total ram usage:        1 bytes
   844 ;; Hardware stack levels used: 1
   845 ;; Hardware stack levels required when called: 2
   846 ;; This function calls:
   847 ;;		Nothing
   848 ;; This function is called by:
   849 ;;		_ADC_Init
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text4
   854   00153C                     __ptext4:
   855                           	callstack 0
   856   00153C                     _adc_select_voltage_ref:
   857                           	callstack 26
   858   00153C                     
   859                           ;MCAL_LAYER/ADC/hal_adc.c: 282:     if (0X01U == adc->voltage_ref) {
   860   00153C  5068               	movf	adc_select_voltage_ref@adc^0,w,c
   861   00153E  6ED9               	movwf	fsr2l,c
   862   001540  6ADA               	clrf	fsr2h,c
   863   001542  0E06               	movlw	6
   864   001544  26D9               	addwf	fsr2l,f,c
   865   001546  A0DF               	btfss	indf2,0,c
   866   001548  EFA8  F00A         	goto	u1671
   867   00154C  EFAA  F00A         	goto	u1670
   868   001550                     u1671:
   869   001550  EFAE  F00A         	goto	l2995
   870   001554                     u1670:
   871   001554  8AC1               	bsf	193,5,c	;volatile
   872   001556  88C1               	bsf	193,4,c	;volatile
   873   001558  EFC0  F00A         	goto	l433
   874   00155C                     l2995:
   875   00155C  5068               	movf	adc_select_voltage_ref@adc^0,w,c
   876   00155E  6ED9               	movwf	fsr2l,c
   877   001560  6ADA               	clrf	fsr2h,c
   878   001562  0E06               	movlw	6
   879   001564  26D9               	addwf	fsr2l,f,c
   880   001566  B0DF               	btfsc	indf2,0,c
   881   001568  EFB8  F00A         	goto	u1681
   882   00156C  EFBA  F00A         	goto	u1680
   883   001570                     u1681:
   884   001570  EFBE  F00A         	goto	l431
   885   001574                     u1680:
   886   001574  9AC1               	bcf	193,5,c	;volatile
   887   001576  98C1               	bcf	193,4,c	;volatile
   888   001578  EFC0  F00A         	goto	l433
   889   00157C                     l431:
   890   00157C  9AC1               	bcf	193,5,c	;volatile
   891   00157E  98C1               	bcf	193,4,c	;volatile
   892   001580                     l433:
   893   001580  0012               	return		;funcret
   894   001582                     __end_of_adc_select_voltage_ref:
   895                           	callstack 0
   896                           
   897 ;; *************** function _adc_select_result_format *****************
   898 ;; Defined at:
   899 ;;		line 267 in file "MCAL_LAYER/ADC/hal_adc.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  adc             1    1[COMRAM] PTR const struct .
   902 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:        1 bytes
   919 ;; Hardware stack levels used: 1
   920 ;; Hardware stack levels required when called: 2
   921 ;; This function calls:
   922 ;;		Nothing
   923 ;; This function is called by:
   924 ;;		_ADC_Init
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text5
   929   00165E                     __ptext5:
   930                           	callstack 0
   931   00165E                     _adc_select_result_format:
   932                           	callstack 26
   933   00165E                     
   934                           ;MCAL_LAYER/ADC/hal_adc.c: 268:     if (adc->result_format) {
   935   00165E  5068               	movf	adc_select_result_format@adc^0,w,c
   936   001660  6ED9               	movwf	fsr2l,c
   937   001662  6ADA               	clrf	fsr2h,c
   938   001664  0E06               	movlw	6
   939   001666  26D9               	addwf	fsr2l,f,c
   940   001668  A2DF               	btfss	indf2,1,c
   941   00166A  EF39  F00B         	goto	u1661
   942   00166E  EF3B  F00B         	goto	u1660
   943   001672                     u1661:
   944   001672  EF3E  F00B         	goto	l418
   945   001676                     u1660:
   946   001676                     
   947                           ;MCAL_LAYER/ADC/hal_adc.c: 269:         (ADCON2bits.ADFM=1);
   948   001676  8EC0               	bsf	192,7,c	;volatile
   949                           
   950                           ;MCAL_LAYER/ADC/hal_adc.c: 270:     } else {
   951   001678  EF3F  F00B         	goto	l420
   952   00167C                     l418:
   953                           
   954                           ;MCAL_LAYER/ADC/hal_adc.c: 271:         (ADCON2bits.ADFM=0);
   955   00167C  9EC0               	bcf	192,7,c	;volatile
   956   00167E                     l420:
   957   00167E  0012               	return		;funcret
   958   001680                     __end_of_adc_select_result_format:
   959                           	callstack 0
   960                           
   961 ;; *************** function _ADC_Get_Conversion_Blocking *****************
   962 ;; Defined at:
   963 ;;		line 200 in file "MCAL_LAYER/ADC/hal_adc.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;  adc             1    8[COMRAM] PTR const struct .
   966 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
   967 ;;  channel         1    9[COMRAM] enum E3466
   968 ;;  result          1   10[COMRAM] PTR unsigned short 
   969 ;;		 -> re_4(2), re_3(2), re_2(2), re_1(2), 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  ret             1   12[COMRAM] unsigned char 
   972 ;;  conversion_s    1   11[COMRAM] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      unsigned char 
   975 ;; Registers used:
   976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   982 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;Total ram usage:        5 bytes
   987 ;; Hardware stack levels used: 1
   988 ;; Hardware stack levels required when called: 4
   989 ;; This function calls:
   990 ;;		_ADC_Get_Conversion_Result
   991 ;;		_ADC_Is_Conversion_Done
   992 ;;		_ADC_Select_Channel
   993 ;;		_ADC_Start_Conversion
   994 ;; This function is called by:
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text6
  1000   00142C                     __ptext6:
  1001                           	callstack 0
  1002   00142C                     _ADC_Get_Conversion_Blocking:
  1003                           	callstack 26
  1004   00142C                     
  1005                           ;MCAL_LAYER/ADC/hal_adc.c: 201:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1006   00142C  0E01               	movlw	1
  1007   00142E  6E73               	movwf	ADC_Get_Conversion_Blocking@ret^0,c
  1008                           
  1009                           ;MCAL_LAYER/ADC/hal_adc.c: 202:     uint8_t conversion_status;;MCAL_LAYER/ADC/hal_adc.c:
      +                           205:     if (((void*)0) == adc || ((void*)0) == result) {
  1010   001430  506F               	movf	ADC_Get_Conversion_Blocking@adc^0,w,c
  1011   001432  B4D8               	btfsc	status,2,c
  1012   001434  EF1E  F00A         	goto	u1801
  1013   001438  EF20  F00A         	goto	u1800
  1014   00143C                     u1801:
  1015   00143C  EF28  F00A         	goto	l3077
  1016   001440                     u1800:
  1017   001440  5071               	movf	ADC_Get_Conversion_Blocking@result^0,w,c
  1018   001442  A4D8               	btfss	status,2,c
  1019   001444  EF26  F00A         	goto	u1811
  1020   001448  EF28  F00A         	goto	u1810
  1021   00144C                     u1811:
  1022   00144C  EF2C  F00A         	goto	l3079
  1023   001450                     u1810:
  1024   001450                     l3077:
  1025                           
  1026                           ;MCAL_LAYER/ADC/hal_adc.c: 206:         ret = (Std_ReturnType)0X00;
  1027   001450  0E00               	movlw	0
  1028   001452  6E73               	movwf	ADC_Get_Conversion_Blocking@ret^0,c
  1029                           
  1030                           ;MCAL_LAYER/ADC/hal_adc.c: 207:     } else {
  1031   001454  EF4D  F00A         	goto	l3085
  1032   001458                     l3079:
  1033                           
  1034                           ;MCAL_LAYER/ADC/hal_adc.c: 209:         ret &= ADC_Select_Channel(adc, channel);
  1035   001458  C06F  F06B         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Select_Channel@adc
  1036   00145C  C070  F06C         	movff	ADC_Get_Conversion_Blocking@channel,ADC_Select_Channel@channel
  1037   001460  ECE1  F00A         	call	_ADC_Select_Channel	;wreg free
  1038   001464  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1039                           
  1040                           ;MCAL_LAYER/ADC/hal_adc.c: 210:         ret &= ADC_Start_Conversion(adc);
  1041   001466  C06F  F068         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Start_Conversion@adc
  1042   00146A  EC40  F00B         	call	_ADC_Start_Conversion	;wreg free
  1043   00146E  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1044   001470                     
  1045                           ;MCAL_LAYER/ADC/hal_adc.c: 211:         ret &= ADC_Is_Conversion_Done(adc, &conversion_s
      +                          tatus);
  1046   001470  C06F  F068         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Is_Conversion_Done@adc
  1047   001474  0E72               	movlw	low ADC_Get_Conversion_Blocking@conversion_status
  1048   001476  6E69               	movwf	ADC_Is_Conversion_Done@conversion_status^0,c
  1049   001478  EC79  F00A         	call	_ADC_Is_Conversion_Done	;wreg free
  1050   00147C  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1051   00147E                     l393:
  1052   00147E  B2C2               	btfsc	194,1,c	;volatile
  1053   001480  EF44  F00A         	goto	u1821
  1054   001484  EF46  F00A         	goto	u1820
  1055   001488                     u1821:
  1056   001488  EF3F  F00A         	goto	l393
  1057   00148C                     u1820:
  1058   00148C                     
  1059                           ;MCAL_LAYER/ADC/hal_adc.c: 217:         ret &= ADC_Get_Conversion_Result(adc, result);
  1060   00148C  C06F  F068         	movff	ADC_Get_Conversion_Blocking@adc,ADC_Get_Conversion_Result@adc
  1061   001490  C071  F069         	movff	ADC_Get_Conversion_Blocking@result,ADC_Get_Conversion_Result@result
  1062   001494  EC68  F009         	call	_ADC_Get_Conversion_Result	;wreg free
  1063   001498  1673               	andwf	ADC_Get_Conversion_Blocking@ret^0,f,c
  1064   00149A                     l3085:
  1065                           
  1066                           ;MCAL_LAYER/ADC/hal_adc.c: 220:     return ret;
  1067   00149A  5073               	movf	ADC_Get_Conversion_Blocking@ret^0,w,c
  1068   00149C  0012               	return		;funcret
  1069   00149E                     __end_of_ADC_Get_Conversion_Blocking:
  1070                           	callstack 0
  1071                           
  1072 ;; *************** function _ADC_Start_Conversion *****************
  1073 ;; Defined at:
  1074 ;;		line 130 in file "MCAL_LAYER/ADC/hal_adc.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  adc             1    1[COMRAM] PTR const struct .
  1077 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  ret             1    2[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      unsigned char 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1093 ;;Total ram usage:        2 bytes
  1094 ;; Hardware stack levels used: 1
  1095 ;; Hardware stack levels required when called: 2
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_ADC_Get_Conversion_Blocking
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text7
  1104   001680                     __ptext7:
  1105                           	callstack 0
  1106   001680                     _ADC_Start_Conversion:
  1107                           	callstack 27
  1108   001680                     
  1109                           ;MCAL_LAYER/ADC/hal_adc.c: 131:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1110   001680  0E01               	movlw	1
  1111   001682  6E69               	movwf	ADC_Start_Conversion@ret^0,c
  1112                           
  1113                           ;MCAL_LAYER/ADC/hal_adc.c: 134:     if (((void*)0) == adc) {
  1114   001684  5068               	movf	ADC_Start_Conversion@adc^0,w,c
  1115   001686  A4D8               	btfss	status,2,c
  1116   001688  EF48  F00B         	goto	u1711
  1117   00168C  EF4A  F00B         	goto	u1710
  1118   001690                     u1711:
  1119   001690  EF4E  F00B         	goto	l366
  1120   001694                     u1710:
  1121   001694                     
  1122                           ;MCAL_LAYER/ADC/hal_adc.c: 135:         ret = (Std_ReturnType)0X00;
  1123   001694  0E00               	movlw	0
  1124   001696  6E69               	movwf	ADC_Start_Conversion@ret^0,c
  1125                           
  1126                           ;MCAL_LAYER/ADC/hal_adc.c: 136:     } else {
  1127   001698  EF4F  F00B         	goto	l3037
  1128   00169C                     l366:
  1129                           
  1130                           ;MCAL_LAYER/ADC/hal_adc.c: 138:         (ADCON0bits.GO_nDONE=1);
  1131   00169C  82C2               	bsf	194,1,c	;volatile
  1132   00169E                     l3037:
  1133                           
  1134                           ;MCAL_LAYER/ADC/hal_adc.c: 141:     return ret;
  1135   00169E  5069               	movf	ADC_Start_Conversion@ret^0,w,c
  1136   0016A0  0012               	return		;funcret
  1137   0016A2                     __end_of_ADC_Start_Conversion:
  1138                           	callstack 0
  1139                           
  1140 ;; *************** function _ADC_Select_Channel *****************
  1141 ;; Defined at:
  1142 ;;		line 109 in file "MCAL_LAYER/ADC/hal_adc.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  adc             1    4[COMRAM] PTR const struct .
  1145 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1146 ;;  channel         1    5[COMRAM] enum E3466
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  ret             1    7[COMRAM] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      unsigned char 
  1151 ;; Registers used:
  1152 ;;		wreg, status,2, status,0, cstack
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1161 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1162 ;;Total ram usage:        4 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; Hardware stack levels required when called: 3
  1165 ;; This function calls:
  1166 ;;		_adc_input_channel_port_configure
  1167 ;; This function is called by:
  1168 ;;		_ADC_Get_Conversion_Blocking
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text8
  1173   0015C2                     __ptext8:
  1174                           	callstack 0
  1175   0015C2                     _ADC_Select_Channel:
  1176                           	callstack 26
  1177   0015C2                     
  1178                           ;MCAL_LAYER/ADC/hal_adc.c: 110:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1179   0015C2  0E01               	movlw	1
  1180   0015C4  6E6E               	movwf	ADC_Select_Channel@ret^0,c
  1181                           
  1182                           ;MCAL_LAYER/ADC/hal_adc.c: 113:     if (((void*)0) == adc) {
  1183   0015C6  506B               	movf	ADC_Select_Channel@adc^0,w,c
  1184   0015C8  A4D8               	btfss	status,2,c
  1185   0015CA  EFE9  F00A         	goto	u1701
  1186   0015CE  EFEB  F00A         	goto	u1700
  1187   0015D2                     u1701:
  1188   0015D2  EFEF  F00A         	goto	l3025
  1189   0015D6                     u1700:
  1190   0015D6                     
  1191                           ;MCAL_LAYER/ADC/hal_adc.c: 114:         ret = (Std_ReturnType)0X00;
  1192   0015D6  0E00               	movlw	0
  1193   0015D8  6E6E               	movwf	ADC_Select_Channel@ret^0,c
  1194                           
  1195                           ;MCAL_LAYER/ADC/hal_adc.c: 115:     } else {
  1196   0015DA  EFFB  F00A         	goto	l3029
  1197   0015DE                     l3025:
  1198                           
  1199                           ;MCAL_LAYER/ADC/hal_adc.c: 117:         ADCON0bits.CHS = channel;
  1200   0015DE  C06C  F06D         	movff	ADC_Select_Channel@channel,??_ADC_Select_Channel
  1201   0015E2  466D               	rlncf	??_ADC_Select_Channel^0,f,c
  1202   0015E4  466D               	rlncf	??_ADC_Select_Channel^0,f,c
  1203   0015E6  50C2               	movf	194,w,c	;volatile
  1204   0015E8  186D               	xorwf	??_ADC_Select_Channel^0,w,c
  1205   0015EA  0BC3               	andlw	-61
  1206   0015EC  186D               	xorwf	??_ADC_Select_Channel^0,w,c
  1207   0015EE  6EC2               	movwf	194,c	;volatile
  1208   0015F0                     
  1209                           ;MCAL_LAYER/ADC/hal_adc.c: 118:         adc_input_channel_port_configure(channel);
  1210   0015F0  506C               	movf	ADC_Select_Channel@channel^0,w,c
  1211   0015F2  ECFC  F008         	call	_adc_input_channel_port_configure
  1212   0015F6                     l3029:
  1213                           
  1214                           ;MCAL_LAYER/ADC/hal_adc.c: 121:     return ret;
  1215   0015F6  506E               	movf	ADC_Select_Channel@ret^0,w,c
  1216   0015F8  0012               	return		;funcret
  1217   0015FA                     __end_of_ADC_Select_Channel:
  1218                           	callstack 0
  1219                           
  1220 ;; *************** function _adc_input_channel_port_configure *****************
  1221 ;; Defined at:
  1222 ;;		line 229 in file "MCAL_LAYER/ADC/hal_adc.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;  channel         1    wreg     enum E3466
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  channel         1    3[COMRAM] enum E3466
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      void 
  1229 ;; Registers used:
  1230 ;;		wreg, status,2, status,0
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;Total ram usage:        3 bytes
  1241 ;; Hardware stack levels used: 1
  1242 ;; Hardware stack levels required when called: 2
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_ADC_Init
  1247 ;;		_ADC_Select_Channel
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text9
  1252   0011F8                     __ptext9:
  1253                           	callstack 0
  1254   0011F8                     _adc_input_channel_port_configure:
  1255                           	callstack 26
  1256                           
  1257                           ;incstack = 0
  1258                           ;adc_input_channel_port_configure@channel stored from wreg
  1259   0011F8  6E6A               	movwf	adc_input_channel_port_configure@channel^0,c
  1260   0011FA                     
  1261                           ;MCAL_LAYER/ADC/hal_adc.c: 230:     switch (channel) {
  1262   0011FA  EF26  F009         	goto	l1577
  1263   0011FE                     l1551:
  1264   0011FE  8092               	bsf	146,0,c	;volatile
  1265                           
  1266                           ;MCAL_LAYER/ADC/hal_adc.c: 232:             break;
  1267   001200  EF67  F009         	goto	l415
  1268   001204                     l1553:
  1269   001204  8292               	bsf	146,1,c	;volatile
  1270                           
  1271                           ;MCAL_LAYER/ADC/hal_adc.c: 234:             break;
  1272   001206  EF67  F009         	goto	l415
  1273   00120A                     l1555:
  1274   00120A  8492               	bsf	146,2,c	;volatile
  1275                           
  1276                           ;MCAL_LAYER/ADC/hal_adc.c: 236:             break;
  1277   00120C  EF67  F009         	goto	l415
  1278   001210                     l1557:
  1279   001210  8692               	bsf	146,3,c	;volatile
  1280                           
  1281                           ;MCAL_LAYER/ADC/hal_adc.c: 238:             break;
  1282   001212  EF67  F009         	goto	l415
  1283   001216                     l1559:
  1284   001216  8A92               	bsf	146,5,c	;volatile
  1285                           
  1286                           ;MCAL_LAYER/ADC/hal_adc.c: 240:             break;
  1287   001218  EF67  F009         	goto	l415
  1288   00121C                     l1561:
  1289   00121C  8096               	bsf	150,0,c	;volatile
  1290                           
  1291                           ;MCAL_LAYER/ADC/hal_adc.c: 242:             break;
  1292   00121E  EF67  F009         	goto	l415
  1293   001222                     l1563:
  1294   001222  8296               	bsf	150,1,c	;volatile
  1295                           
  1296                           ;MCAL_LAYER/ADC/hal_adc.c: 244:             break;
  1297   001224  EF67  F009         	goto	l415
  1298   001228                     l1565:
  1299   001228  8496               	bsf	150,2,c	;volatile
  1300                           
  1301                           ;MCAL_LAYER/ADC/hal_adc.c: 246:             break;
  1302   00122A  EF67  F009         	goto	l415
  1303   00122E                     l1567:
  1304   00122E  8493               	bsf	147,2,c	;volatile
  1305                           
  1306                           ;MCAL_LAYER/ADC/hal_adc.c: 248:             break;
  1307   001230  EF67  F009         	goto	l415
  1308   001234                     l1569:
  1309   001234  8693               	bsf	147,3,c	;volatile
  1310                           
  1311                           ;MCAL_LAYER/ADC/hal_adc.c: 250:             break;
  1312   001236  EF67  F009         	goto	l415
  1313   00123A                     l1571:
  1314   00123A  8293               	bsf	147,1,c	;volatile
  1315                           
  1316                           ;MCAL_LAYER/ADC/hal_adc.c: 252:             break;
  1317   00123C  EF67  F009         	goto	l415
  1318   001240                     l1573:
  1319   001240  8893               	bsf	147,4,c	;volatile
  1320                           
  1321                           ;MCAL_LAYER/ADC/hal_adc.c: 254:             break;
  1322   001242  EF67  F009         	goto	l415
  1323   001246                     l1575:
  1324   001246  8093               	bsf	147,0,c	;volatile
  1325                           
  1326                           ;MCAL_LAYER/ADC/hal_adc.c: 256:             break;
  1327   001248  EF67  F009         	goto	l415
  1328   00124C                     l1577:
  1329   00124C  506A               	movf	adc_input_channel_port_configure@channel^0,w,c
  1330   00124E  6E68               	movwf	??_adc_input_channel_port_configure^0,c
  1331   001250  6A69               	clrf	(??_adc_input_channel_port_configure+1)^0,c
  1332                           
  1333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1334                           ; Switch size 1, requested type "simple"
  1335                           ; Number of cases is 1, Range of values is 0 to 0
  1336                           ; switch strategies available:
  1337                           ; Name         Instructions Cycles
  1338                           ; simple_byte            4     3 (average)
  1339                           ;	Chosen strategy is simple_byte
  1340   001252  5069               	movf	(??_adc_input_channel_port_configure+1)^0,w,c
  1341   001254  0A00               	xorlw	0	; case 0
  1342   001256  B4D8               	btfsc	status,2,c
  1343   001258  EF30  F009         	goto	l3105
  1344   00125C  EF67  F009         	goto	l415
  1345   001260                     l3105:
  1346                           
  1347                           ; Switch size 1, requested type "simple"
  1348                           ; Number of cases is 13, Range of values is 0 to 12
  1349                           ; switch strategies available:
  1350                           ; Name         Instructions Cycles
  1351                           ; simple_byte           40    21 (average)
  1352                           ;	Chosen strategy is simple_byte
  1353   001260  5068               	movf	??_adc_input_channel_port_configure^0,w,c
  1354   001262  0A00               	xorlw	0	; case 0
  1355   001264  B4D8               	btfsc	status,2,c
  1356   001266  EFFF  F008         	goto	l1551
  1357   00126A  0A01               	xorlw	1	; case 1
  1358   00126C  B4D8               	btfsc	status,2,c
  1359   00126E  EF02  F009         	goto	l1553
  1360   001272  0A03               	xorlw	3	; case 2
  1361   001274  B4D8               	btfsc	status,2,c
  1362   001276  EF05  F009         	goto	l1555
  1363   00127A  0A01               	xorlw	1	; case 3
  1364   00127C  B4D8               	btfsc	status,2,c
  1365   00127E  EF08  F009         	goto	l1557
  1366   001282  0A07               	xorlw	7	; case 4
  1367   001284  B4D8               	btfsc	status,2,c
  1368   001286  EF0B  F009         	goto	l1559
  1369   00128A  0A01               	xorlw	1	; case 5
  1370   00128C  B4D8               	btfsc	status,2,c
  1371   00128E  EF0E  F009         	goto	l1561
  1372   001292  0A03               	xorlw	3	; case 6
  1373   001294  B4D8               	btfsc	status,2,c
  1374   001296  EF11  F009         	goto	l1563
  1375   00129A  0A01               	xorlw	1	; case 7
  1376   00129C  B4D8               	btfsc	status,2,c
  1377   00129E  EF14  F009         	goto	l1565
  1378   0012A2  0A0F               	xorlw	15	; case 8
  1379   0012A4  B4D8               	btfsc	status,2,c
  1380   0012A6  EF17  F009         	goto	l1567
  1381   0012AA  0A01               	xorlw	1	; case 9
  1382   0012AC  B4D8               	btfsc	status,2,c
  1383   0012AE  EF1A  F009         	goto	l1569
  1384   0012B2  0A03               	xorlw	3	; case 10
  1385   0012B4  B4D8               	btfsc	status,2,c
  1386   0012B6  EF1D  F009         	goto	l1571
  1387   0012BA  0A01               	xorlw	1	; case 11
  1388   0012BC  B4D8               	btfsc	status,2,c
  1389   0012BE  EF20  F009         	goto	l1573
  1390   0012C2  0A07               	xorlw	7	; case 12
  1391   0012C4  B4D8               	btfsc	status,2,c
  1392   0012C6  EF23  F009         	goto	l1575
  1393   0012CA  EF67  F009         	goto	l415
  1394   0012CE                     l415:
  1395   0012CE  0012               	return		;funcret
  1396   0012D0                     __end_of_adc_input_channel_port_configure:
  1397                           	callstack 0
  1398                           
  1399 ;; *************** function _ADC_Is_Conversion_Done *****************
  1400 ;; Defined at:
  1401 ;;		line 151 in file "MCAL_LAYER/ADC/hal_adc.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  adc             1    1[COMRAM] PTR const struct .
  1404 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1405 ;;  conversion_s    1    2[COMRAM] PTR unsigned char 
  1406 ;;		 -> ADC_Get_Conversion_Blocking@conversion_status(1), 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  ret             1    3[COMRAM] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      unsigned char 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr2l, fsr2h, status,2
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1421 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;Total ram usage:        3 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; Hardware stack levels required when called: 2
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_ADC_Get_Conversion_Blocking
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text10
  1433   0014F2                     __ptext10:
  1434                           	callstack 0
  1435   0014F2                     _ADC_Is_Conversion_Done:
  1436                           	callstack 27
  1437   0014F2                     
  1438                           ;MCAL_LAYER/ADC/hal_adc.c: 152:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1439   0014F2  0E01               	movlw	1
  1440   0014F4  6E6A               	movwf	ADC_Is_Conversion_Done@ret^0,c
  1441                           
  1442                           ;MCAL_LAYER/ADC/hal_adc.c: 155:     if (((void*)0) == adc || ((void*)0) == conversion_st
      +                          atus) {
  1443   0014F6  5068               	movf	ADC_Is_Conversion_Done@adc^0,w,c
  1444   0014F8  B4D8               	btfsc	status,2,c
  1445   0014FA  EF81  F00A         	goto	u1721
  1446   0014FE  EF83  F00A         	goto	u1720
  1447   001502                     u1721:
  1448   001502  EF8B  F00A         	goto	l3045
  1449   001506                     u1720:
  1450   001506  5069               	movf	ADC_Is_Conversion_Done@conversion_status^0,w,c
  1451   001508  A4D8               	btfss	status,2,c
  1452   00150A  EF89  F00A         	goto	u1731
  1453   00150E  EF8B  F00A         	goto	u1730
  1454   001512                     u1731:
  1455   001512  EF8F  F00A         	goto	l3047
  1456   001516                     u1730:
  1457   001516                     l3045:
  1458                           
  1459                           ;MCAL_LAYER/ADC/hal_adc.c: 156:         ret = (Std_ReturnType)0X00;
  1460   001516  0E00               	movlw	0
  1461   001518  6E6A               	movwf	ADC_Is_Conversion_Done@ret^0,c
  1462                           
  1463                           ;MCAL_LAYER/ADC/hal_adc.c: 157:     } else {
  1464   00151A  EF9C  F00A         	goto	l3049
  1465   00151E                     l3047:
  1466                           
  1467                           ;MCAL_LAYER/ADC/hal_adc.c: 159:         *conversion_status = !(uint8) (ADCON0bits.GO_nDO
      +                          NE);
  1468   00151E  5069               	movf	ADC_Is_Conversion_Done@conversion_status^0,w,c
  1469   001520  6ED9               	movwf	fsr2l,c
  1470   001522  6ADA               	clrf	fsr2h,c
  1471   001524  A2C2               	btfss	194,1,c	;volatile
  1472   001526  EF97  F00A         	goto	u1741
  1473   00152A  EF9A  F00A         	goto	u1740
  1474   00152E                     u1741:
  1475   00152E  0E01               	movlw	1
  1476   001530  EF9B  F00A         	goto	u1750
  1477   001534                     u1740:
  1478   001534  0E00               	movlw	0
  1479   001536                     u1750:
  1480   001536  6EDF               	movwf	indf2,c
  1481   001538                     l3049:
  1482                           
  1483                           ;MCAL_LAYER/ADC/hal_adc.c: 162:     return ret;
  1484   001538  506A               	movf	ADC_Is_Conversion_Done@ret^0,w,c
  1485   00153A  0012               	return		;funcret
  1486   00153C                     __end_of_ADC_Is_Conversion_Done:
  1487                           	callstack 0
  1488                           
  1489 ;; *************** function _ADC_Get_Conversion_Result *****************
  1490 ;; Defined at:
  1491 ;;		line 172 in file "MCAL_LAYER/ADC/hal_adc.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;  adc             1    1[COMRAM] PTR const struct .
  1494 ;;		 -> adc_4(7), adc_3(7), adc_2(7), adc_1(7), 
  1495 ;;  result          1    2[COMRAM] PTR unsigned short 
  1496 ;;		 -> re_4(2), re_3(2), re_2(2), re_1(2), 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  ret             1    5[COMRAM] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      unsigned char 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;Total ram usage:        5 bytes
  1513 ;; Hardware stack levels used: 1
  1514 ;; Hardware stack levels required when called: 2
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_ADC_Get_Conversion_Blocking
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text11
  1523   0012D0                     __ptext11:
  1524                           	callstack 0
  1525   0012D0                     _ADC_Get_Conversion_Result:
  1526                           	callstack 27
  1527   0012D0                     
  1528                           ;MCAL_LAYER/ADC/hal_adc.c: 173:     Std_ReturnType ret = (Std_ReturnType)0X01;
  1529   0012D0  0E01               	movlw	1
  1530   0012D2  6E6C               	movwf	ADC_Get_Conversion_Result@ret^0,c
  1531                           
  1532                           ;MCAL_LAYER/ADC/hal_adc.c: 176:     if (((void*)0) == adc || ((void*)0) == result) {
  1533   0012D4  5068               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1534   0012D6  B4D8               	btfsc	status,2,c
  1535   0012D8  EF70  F009         	goto	u1761
  1536   0012DC  EF72  F009         	goto	u1760
  1537   0012E0                     u1761:
  1538   0012E0  EF7A  F009         	goto	l3057
  1539   0012E4                     u1760:
  1540   0012E4  5069               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1541   0012E6  A4D8               	btfss	status,2,c
  1542   0012E8  EF78  F009         	goto	u1771
  1543   0012EC  EF7A  F009         	goto	u1770
  1544   0012F0                     u1771:
  1545   0012F0  EF7E  F009         	goto	l3059
  1546   0012F4                     u1770:
  1547   0012F4                     l3057:
  1548                           
  1549                           ;MCAL_LAYER/ADC/hal_adc.c: 177:         ret = (Std_ReturnType)0X00;
  1550   0012F4  0E00               	movlw	0
  1551   0012F6  6E6C               	movwf	ADC_Get_Conversion_Result@ret^0,c
  1552                           
  1553                           ;MCAL_LAYER/ADC/hal_adc.c: 178:     } else {
  1554   0012F8  EFC0  F009         	goto	l3069
  1555   0012FC                     l3059:
  1556                           
  1557                           ;MCAL_LAYER/ADC/hal_adc.c: 180:         if (0X01U == adc->result_format) {
  1558   0012FC  5068               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1559   0012FE  6ED9               	movwf	fsr2l,c
  1560   001300  6ADA               	clrf	fsr2h,c
  1561   001302  0E06               	movlw	6
  1562   001304  26D9               	addwf	fsr2l,f,c
  1563   001306  A2DF               	btfss	indf2,1,c
  1564   001308  EF88  F009         	goto	u1781
  1565   00130C  EF8A  F009         	goto	u1780
  1566   001310                     u1781:
  1567   001310  EF9D  F009         	goto	l3063
  1568   001314                     u1780:
  1569   001314                     l3061:
  1570                           
  1571                           ;MCAL_LAYER/ADC/hal_adc.c: 181:             *result = (uint16_t) ((ADRESH << 8) + ADRESL
      +                          );
  1572   001314  50C3               	movf	195,w,c	;volatile
  1573   001316  CFC4 F06A          	movff	4036,??_ADC_Get_Conversion_Result	;volatile
  1574   00131A  6A6B               	clrf	(??_ADC_Get_Conversion_Result+1)^0,c
  1575   00131C  C06A  F06B         	movff	??_ADC_Get_Conversion_Result,??_ADC_Get_Conversion_Result+1
  1576   001320  6A6A               	clrf	??_ADC_Get_Conversion_Result^0,c
  1577   001322  266A               	addwf	??_ADC_Get_Conversion_Result^0,f,c
  1578   001324  0E00               	movlw	0
  1579   001326  226B               	addwfc	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1580   001328  5069               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1581   00132A  6ED9               	movwf	fsr2l,c
  1582   00132C  6ADA               	clrf	fsr2h,c
  1583   00132E  C06A  FFDE         	movff	??_ADC_Get_Conversion_Result,postinc2
  1584   001332  C06B  FFDD         	movff	??_ADC_Get_Conversion_Result+1,postdec2
  1585                           
  1586                           ;MCAL_LAYER/ADC/hal_adc.c: 182:         } else if (0X00 == adc->result_format) {
  1587   001336  EFC0  F009         	goto	l3069
  1588   00133A                     l3063:
  1589   00133A  5068               	movf	ADC_Get_Conversion_Result@adc^0,w,c
  1590   00133C  6ED9               	movwf	fsr2l,c
  1591   00133E  6ADA               	clrf	fsr2h,c
  1592   001340  0E06               	movlw	6
  1593   001342  26D9               	addwf	fsr2l,f,c
  1594   001344  B2DF               	btfsc	indf2,1,c
  1595   001346  EFA7  F009         	goto	u1791
  1596   00134A  EFA9  F009         	goto	u1790
  1597   00134E                     u1791:
  1598   00134E  EF8A  F009         	goto	l3061
  1599   001352                     u1790:
  1600   001352                     
  1601                           ;MCAL_LAYER/ADC/hal_adc.c: 183:             *result = (uint16_t) (((ADRESH << 8) + ADRES
      +                          L) >> 2);
  1602   001352  50C3               	movf	195,w,c	;volatile
  1603   001354  CFC4 F06A          	movff	4036,??_ADC_Get_Conversion_Result	;volatile
  1604   001358  6A6B               	clrf	(??_ADC_Get_Conversion_Result+1)^0,c
  1605   00135A  C06A  F06B         	movff	??_ADC_Get_Conversion_Result,??_ADC_Get_Conversion_Result+1
  1606   00135E  6A6A               	clrf	??_ADC_Get_Conversion_Result^0,c
  1607   001360  266A               	addwf	??_ADC_Get_Conversion_Result^0,f,c
  1608   001362  0E00               	movlw	0
  1609   001364  226B               	addwfc	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1610   001366  346B               	rlcf	(??_ADC_Get_Conversion_Result+1)^0,w,c
  1611   001368  326B               	rrcf	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1612   00136A  326A               	rrcf	??_ADC_Get_Conversion_Result^0,f,c
  1613   00136C  346B               	rlcf	(??_ADC_Get_Conversion_Result+1)^0,w,c
  1614   00136E  326B               	rrcf	(??_ADC_Get_Conversion_Result+1)^0,f,c
  1615   001370  326A               	rrcf	??_ADC_Get_Conversion_Result^0,f,c
  1616   001372  5069               	movf	ADC_Get_Conversion_Result@result^0,w,c
  1617   001374  6ED9               	movwf	fsr2l,c
  1618   001376  6ADA               	clrf	fsr2h,c
  1619   001378  C06A  FFDE         	movff	??_ADC_Get_Conversion_Result,postinc2
  1620   00137C  C06B  FFDD         	movff	??_ADC_Get_Conversion_Result+1,postdec2
  1621   001380                     l3069:
  1622                           
  1623                           ;MCAL_LAYER/ADC/hal_adc.c: 189:     return ret;
  1624   001380  506C               	movf	ADC_Get_Conversion_Result@ret^0,w,c
  1625   001382  0012               	return		;funcret
  1626   001384                     __end_of_ADC_Get_Conversion_Result:
  1627                           	callstack 0
  1628                           
  1629 ;; *************** function _Interrupt_Manager_High *****************
  1630 ;; Defined at:
  1631 ;;		line 39 in file "MCAL_LAYER/Interrupt/mcal_interrupt_manager.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;		None
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:        0 bytes
  1650 ;; Hardware stack levels used: 1
  1651 ;; Hardware stack levels required when called: 1
  1652 ;; This function calls:
  1653 ;;		_ADC_ISR
  1654 ;;		_INT0_ISR
  1655 ;;		_INT1_ISR
  1656 ;;		_INT2_ISR
  1657 ;;		_RB4_ISR
  1658 ;;		_RB5_ISR
  1659 ;;		_RB6_ISR
  1660 ;;		_RB7_ISR
  1661 ;; This function is called by:
  1662 ;;		Interrupt level 2
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	intcode
  1667   000008                     __pintcode:
  1668                           	callstack 0
  1669   000008                     _Interrupt_Manager_High:
  1670                           	callstack 26
  1671                           
  1672                           ;incstack = 0
  1673   000008  8274               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1674   00000A  ED0B  F008         	call	int_func,f	;refresh shadow registers
  1675                           
  1676                           	psect	intcode_body
  1677   001016                     __pintcode_body:
  1678                           	callstack 26
  1679   001016                     int_func:
  1680                           	callstack 26
  1681   001016  0006               	pop		; remove dummy address from shadow register refresh
  1682   001018                     
  1683                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 41:     if ((INTCONbits.INT0IE == 1) && 
      +                          (INTCONbits.INT0IF == 1)) {
  1684   001018  A8F2               	btfss	242,4,c	;volatile
  1685   00101A  EF11  F008         	goto	i2u140_41
  1686   00101E  EF13  F008         	goto	i2u140_40
  1687   001022                     i2u140_41:
  1688   001022  EF1C  F008         	goto	i2l2897
  1689   001026                     i2u140_40:
  1690   001026  A2F2               	btfss	242,1,c	;volatile
  1691   001028  EF18  F008         	goto	i2u141_41
  1692   00102C  EF1A  F008         	goto	i2u141_40
  1693   001030                     i2u141_41:
  1694   001030  EF1C  F008         	goto	i2l2897
  1695   001034                     i2u141_40:
  1696   001034                     
  1697                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 42:         INT0_ISR();
  1698   001034  EC89  F00B         	call	_INT0_ISR	;wreg free
  1699   001038                     i2l2897:
  1700                           
  1701                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 45:     if ((INTCON3bits.INT1IE == 1) &&
      +                           (INTCON3bits.INT1IF == 1)) {
  1702   001038  A6F0               	btfss	240,3,c	;volatile
  1703   00103A  EF21  F008         	goto	i2u142_41
  1704   00103E  EF23  F008         	goto	i2u142_40
  1705   001042                     i2u142_41:
  1706   001042  EF2C  F008         	goto	i2l2903
  1707   001046                     i2u142_40:
  1708   001046  A0F0               	btfss	240,0,c	;volatile
  1709   001048  EF28  F008         	goto	i2u143_41
  1710   00104C  EF2A  F008         	goto	i2u143_40
  1711   001050                     i2u143_41:
  1712   001050  EF2C  F008         	goto	i2l2903
  1713   001054                     i2u143_40:
  1714   001054                     
  1715                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 46:         INT1_ISR();
  1716   001054  EC87  F00B         	call	_INT1_ISR	;wreg free
  1717   001058                     i2l2903:
  1718                           
  1719                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 49:     if ((INTCON3bits.INT2IE == 1) &&
      +                           (INTCON3bits.INT2IF == 1)) {
  1720   001058  A8F0               	btfss	240,4,c	;volatile
  1721   00105A  EF31  F008         	goto	i2u144_41
  1722   00105E  EF33  F008         	goto	i2u144_40
  1723   001062                     i2u144_41:
  1724   001062  EF3C  F008         	goto	i2l2909
  1725   001066                     i2u144_40:
  1726   001066  A2F0               	btfss	240,1,c	;volatile
  1727   001068  EF38  F008         	goto	i2u145_41
  1728   00106C  EF3A  F008         	goto	i2u145_40
  1729   001070                     i2u145_41:
  1730   001070  EF3C  F008         	goto	i2l2909
  1731   001074                     i2u145_40:
  1732   001074                     
  1733                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 50:         INT2_ISR();
  1734   001074  EC85  F00B         	call	_INT2_ISR	;wreg free
  1735   001078                     i2l2909:
  1736                           
  1737                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 52:     if (1 == PIE1bits.ADIE && 1 == P
      +                          IR1bits.ADIF) {
  1738   001078  AC9D               	btfss	157,6,c	;volatile
  1739   00107A  EF41  F008         	goto	i2u146_41
  1740   00107E  EF43  F008         	goto	i2u146_40
  1741   001082                     i2u146_41:
  1742   001082  EF4C  F008         	goto	i2l2915
  1743   001086                     i2u146_40:
  1744   001086  AC9E               	btfss	158,6,c	;volatile
  1745   001088  EF48  F008         	goto	i2u147_41
  1746   00108C  EF4A  F008         	goto	i2u147_40
  1747   001090                     i2u147_41:
  1748   001090  EF4C  F008         	goto	i2l2915
  1749   001094                     i2u147_40:
  1750   001094                     
  1751                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 53:         ADC_ISR();
  1752   001094  EC8B  F00B         	call	_ADC_ISR	;wreg free
  1753   001098                     i2l2915:
  1754                           
  1755                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 57:     if ((INTCONbits.RBIE == 1) && (I
      +                          NTCONbits.RBIF == 1)) {
  1756   001098  A6F2               	btfss	242,3,c	;volatile
  1757   00109A  EF51  F008         	goto	i2u148_41
  1758   00109E  EF53  F008         	goto	i2u148_40
  1759   0010A2                     i2u148_41:
  1760   0010A2  EFFA  F008         	goto	i2l823
  1761   0010A6                     i2u148_40:
  1762   0010A6  A0F2               	btfss	242,0,c	;volatile
  1763   0010A8  EF58  F008         	goto	i2u149_41
  1764   0010AC  EF5A  F008         	goto	i2u149_40
  1765   0010B0                     i2u149_41:
  1766   0010B0  EFFA  F008         	goto	i2l823
  1767   0010B4                     i2u149_40:
  1768   0010B4                     
  1769                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 61:         if ((PORTBbits.RB4 == GPIO_H
      +                          IGH) && RB4_f == 1) {
  1770   0010B4  A881               	btfss	129,4,c	;volatile
  1771   0010B6  EF5F  F008         	goto	i2u150_41
  1772   0010BA  EF61  F008         	goto	i2u150_40
  1773   0010BE                     i2u150_41:
  1774   0010BE  EF6E  F008         	goto	i2l2927
  1775   0010C2                     i2u150_40:
  1776   0010C2  0423               	decf	_RB4_f^0,w,c	;volatile
  1777   0010C4  A4D8               	btfss	status,2,c
  1778   0010C6  EF67  F008         	goto	i2u151_41
  1779   0010CA  EF69  F008         	goto	i2u151_40
  1780   0010CE                     i2u151_41:
  1781   0010CE  EF6E  F008         	goto	i2l2927
  1782   0010D2                     i2u151_40:
  1783   0010D2                     
  1784                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 62:             RB4_f = 0;
  1785   0010D2  0E00               	movlw	0
  1786   0010D4  6E23               	movwf	_RB4_f^0,c	;volatile
  1787   0010D6                     
  1788                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 63:             RB4_ISR(0);
  1789   0010D6  0E00               	movlw	0
  1790   0010D8  EC78  F00B         	call	_RB4_ISR
  1791   0010DC                     i2l2927:
  1792                           
  1793                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 65:         if ((PORTBbits.RB4 == GPIO_L
      +                          OW) && RB4_f == 0) {
  1794   0010DC  B881               	btfsc	129,4,c	;volatile
  1795   0010DE  EF73  F008         	goto	i2u152_41
  1796   0010E2  EF75  F008         	goto	i2u152_40
  1797   0010E6                     i2u152_41:
  1798   0010E6  EF82  F008         	goto	i2l2935
  1799   0010EA                     i2u152_40:
  1800   0010EA  5023               	movf	_RB4_f^0,w,c	;volatile
  1801   0010EC  A4D8               	btfss	status,2,c
  1802   0010EE  EF7B  F008         	goto	i2u153_41
  1803   0010F2  EF7D  F008         	goto	i2u153_40
  1804   0010F6                     i2u153_41:
  1805   0010F6  EF82  F008         	goto	i2l2935
  1806   0010FA                     i2u153_40:
  1807   0010FA                     
  1808                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 66:             RB4_f = 1;
  1809   0010FA  0E01               	movlw	1
  1810   0010FC  6E23               	movwf	_RB4_f^0,c	;volatile
  1811   0010FE                     
  1812                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 67:             RB4_ISR(1);
  1813   0010FE  0E01               	movlw	1
  1814   001100  EC78  F00B         	call	_RB4_ISR
  1815   001104                     i2l2935:
  1816                           
  1817                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 70:         if ((PORTBbits.RB5 == GPIO_H
      +                          IGH) && RB5_f == 1) {
  1818   001104  AA81               	btfss	129,5,c	;volatile
  1819   001106  EF87  F008         	goto	i2u154_41
  1820   00110A  EF89  F008         	goto	i2u154_40
  1821   00110E                     i2u154_41:
  1822   00110E  EF96  F008         	goto	i2l2943
  1823   001112                     i2u154_40:
  1824   001112  0422               	decf	_RB5_f^0,w,c	;volatile
  1825   001114  A4D8               	btfss	status,2,c
  1826   001116  EF8F  F008         	goto	i2u155_41
  1827   00111A  EF91  F008         	goto	i2u155_40
  1828   00111E                     i2u155_41:
  1829   00111E  EF96  F008         	goto	i2l2943
  1830   001122                     i2u155_40:
  1831   001122                     
  1832                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 71:             RB5_f = 0;
  1833   001122  0E00               	movlw	0
  1834   001124  6E22               	movwf	_RB5_f^0,c	;volatile
  1835   001126                     
  1836                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 72:             RB5_ISR(0);
  1837   001126  0E00               	movlw	0
  1838   001128  EC6B  F00B         	call	_RB5_ISR
  1839   00112C                     i2l2943:
  1840                           
  1841                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 74:         if ((PORTBbits.RB5 == GPIO_L
      +                          OW) && RB5_f == 0) {
  1842   00112C  BA81               	btfsc	129,5,c	;volatile
  1843   00112E  EF9B  F008         	goto	i2u156_41
  1844   001132  EF9D  F008         	goto	i2u156_40
  1845   001136                     i2u156_41:
  1846   001136  EFAA  F008         	goto	i2l2951
  1847   00113A                     i2u156_40:
  1848   00113A  5022               	movf	_RB5_f^0,w,c	;volatile
  1849   00113C  A4D8               	btfss	status,2,c
  1850   00113E  EFA3  F008         	goto	i2u157_41
  1851   001142  EFA5  F008         	goto	i2u157_40
  1852   001146                     i2u157_41:
  1853   001146  EFAA  F008         	goto	i2l2951
  1854   00114A                     i2u157_40:
  1855   00114A                     
  1856                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 75:             RB5_f = 1;
  1857   00114A  0E01               	movlw	1
  1858   00114C  6E22               	movwf	_RB5_f^0,c	;volatile
  1859   00114E                     
  1860                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 76:             RB5_ISR(1);
  1861   00114E  0E01               	movlw	1
  1862   001150  EC6B  F00B         	call	_RB5_ISR
  1863   001154                     i2l2951:
  1864                           
  1865                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 79:         if ((PORTBbits.RB6 == GPIO_H
      +                          IGH) && RB6_f == 1) {
  1866   001154  AC81               	btfss	129,6,c	;volatile
  1867   001156  EFAF  F008         	goto	i2u158_41
  1868   00115A  EFB1  F008         	goto	i2u158_40
  1869   00115E                     i2u158_41:
  1870   00115E  EFBE  F008         	goto	i2l2959
  1871   001162                     i2u158_40:
  1872   001162  0421               	decf	_RB6_f^0,w,c	;volatile
  1873   001164  A4D8               	btfss	status,2,c
  1874   001166  EFB7  F008         	goto	i2u159_41
  1875   00116A  EFB9  F008         	goto	i2u159_40
  1876   00116E                     i2u159_41:
  1877   00116E  EFBE  F008         	goto	i2l2959
  1878   001172                     i2u159_40:
  1879   001172                     
  1880                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 80:             RB6_f = 0;
  1881   001172  0E00               	movlw	0
  1882   001174  6E21               	movwf	_RB6_f^0,c	;volatile
  1883   001176                     
  1884                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 81:             RB6_ISR(0);
  1885   001176  0E00               	movlw	0
  1886   001178  EC5E  F00B         	call	_RB6_ISR
  1887   00117C                     i2l2959:
  1888                           
  1889                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 83:         if ((PORTBbits.RB6 == GPIO_L
      +                          OW) && RB6_f == 0) {
  1890   00117C  BC81               	btfsc	129,6,c	;volatile
  1891   00117E  EFC3  F008         	goto	i2u160_41
  1892   001182  EFC5  F008         	goto	i2u160_40
  1893   001186                     i2u160_41:
  1894   001186  EFD2  F008         	goto	i2l2967
  1895   00118A                     i2u160_40:
  1896   00118A  5021               	movf	_RB6_f^0,w,c	;volatile
  1897   00118C  A4D8               	btfss	status,2,c
  1898   00118E  EFCB  F008         	goto	i2u161_41
  1899   001192  EFCD  F008         	goto	i2u161_40
  1900   001196                     i2u161_41:
  1901   001196  EFD2  F008         	goto	i2l2967
  1902   00119A                     i2u161_40:
  1903   00119A                     
  1904                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 84:             RB6_f = 1;
  1905   00119A  0E01               	movlw	1
  1906   00119C  6E21               	movwf	_RB6_f^0,c	;volatile
  1907   00119E                     
  1908                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 85:             RB6_ISR(1);
  1909   00119E  0E01               	movlw	1
  1910   0011A0  EC5E  F00B         	call	_RB6_ISR
  1911   0011A4                     i2l2967:
  1912                           
  1913                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 88:         if ((PORTBbits.RB7 == GPIO_H
      +                          IGH) && RB7_f == 1) {
  1914   0011A4  AE81               	btfss	129,7,c	;volatile
  1915   0011A6  EFD7  F008         	goto	i2u162_41
  1916   0011AA  EFD9  F008         	goto	i2u162_40
  1917   0011AE                     i2u162_41:
  1918   0011AE  EFE6  F008         	goto	i2l2975
  1919   0011B2                     i2u162_40:
  1920   0011B2  0420               	decf	_RB7_f^0,w,c	;volatile
  1921   0011B4  A4D8               	btfss	status,2,c
  1922   0011B6  EFDF  F008         	goto	i2u163_41
  1923   0011BA  EFE1  F008         	goto	i2u163_40
  1924   0011BE                     i2u163_41:
  1925   0011BE  EFE6  F008         	goto	i2l2975
  1926   0011C2                     i2u163_40:
  1927   0011C2                     
  1928                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 89:             RB7_f = 0;
  1929   0011C2  0E00               	movlw	0
  1930   0011C4  6E20               	movwf	_RB7_f^0,c	;volatile
  1931   0011C6                     
  1932                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 90:             RB7_ISR(0);
  1933   0011C6  0E00               	movlw	0
  1934   0011C8  EC51  F00B         	call	_RB7_ISR
  1935   0011CC                     i2l2975:
  1936                           
  1937                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 92:         if ((PORTBbits.RB7 == GPIO_L
      +                          OW) && RB7_f == 0) {
  1938   0011CC  BE81               	btfsc	129,7,c	;volatile
  1939   0011CE  EFEB  F008         	goto	i2u164_41
  1940   0011D2  EFED  F008         	goto	i2u164_40
  1941   0011D6                     i2u164_41:
  1942   0011D6  EFFA  F008         	goto	i2l823
  1943   0011DA                     i2u164_40:
  1944   0011DA  5020               	movf	_RB7_f^0,w,c	;volatile
  1945   0011DC  A4D8               	btfss	status,2,c
  1946   0011DE  EFF3  F008         	goto	i2u165_41
  1947   0011E2  EFF5  F008         	goto	i2u165_40
  1948   0011E6                     i2u165_41:
  1949   0011E6  EFFA  F008         	goto	i2l823
  1950   0011EA                     i2u165_40:
  1951   0011EA                     
  1952                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 93:             RB7_f = 1;
  1953   0011EA  0E01               	movlw	1
  1954   0011EC  6E20               	movwf	_RB7_f^0,c	;volatile
  1955   0011EE                     
  1956                           ;MCAL_LAYER/Interrupt/mcal_interrupt_manager.c: 94:             RB7_ISR(1);
  1957   0011EE  0E01               	movlw	1
  1958   0011F0  EC51  F00B         	call	_RB7_ISR
  1959   0011F4                     i2l823:
  1960   0011F4  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1961   0011F6  0011               	retfie		f
  1962   0011F8                     __end_of_Interrupt_Manager_High:
  1963                           	callstack 0
  1964                           
  1965 ;; *************** function _RB7_ISR *****************
  1966 ;; Defined at:
  1967 ;;		line 514 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  source          1    wreg     unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  source          1    0[COMRAM] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;Total ram usage:        1 bytes
  1986 ;; Hardware stack levels used: 1
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_Interrupt_Manager_High
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text13
  1995   0016A2                     __ptext13:
  1996                           	callstack 0
  1997   0016A2                     _RB7_ISR:
  1998                           	callstack 26
  1999                           
  2000                           ;incstack = 0
  2001                           ;RB7_ISR@source stored from wreg
  2002   0016A2  6E67               	movwf	RB7_ISR@source^0,c
  2003   0016A4                     
  2004                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 515:     (INTCONbits.RBIF = 1);
  2005   0016A4  80F2               	bsf	242,0,c	;volatile
  2006   0016A6                     
  2007                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 517:     if (0 == source) {
  2008   0016A6  5067               	movf	RB7_ISR@source^0,w,c
  2009   0016A8  A4D8               	btfss	status,2,c
  2010   0016AA  EF59  F00B         	goto	i2u52_41
  2011   0016AE  EF5B  F00B         	goto	i2u52_40
  2012   0016B2                     i2u52_41:
  2013   0016B2  EF5D  F00B         	goto	i2l2011
  2014   0016B6                     i2u52_40:
  2015   0016B6  EF5D  F00B         	goto	i2l771
  2016   0016BA                     i2l2011:
  2017   0016BA                     i2l771:
  2018   0016BA  0012               	return		;funcret
  2019   0016BC                     __end_of_RB7_ISR:
  2020                           	callstack 0
  2021                           
  2022 ;; *************** function _RB6_ISR *****************
  2023 ;; Defined at:
  2024 ;;		line 500 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  source          1    wreg     unsigned char 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  source          1    0[COMRAM] unsigned char 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;Total ram usage:        1 bytes
  2043 ;; Hardware stack levels used: 1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_Interrupt_Manager_High
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text14
  2052   0016BC                     __ptext14:
  2053                           	callstack 0
  2054   0016BC                     _RB6_ISR:
  2055                           	callstack 26
  2056                           
  2057                           ;incstack = 0
  2058                           ;RB6_ISR@source stored from wreg
  2059   0016BC  6E67               	movwf	RB6_ISR@source^0,c
  2060   0016BE                     
  2061                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 501:     (INTCONbits.RBIF = 1);
  2062   0016BE  80F2               	bsf	242,0,c	;volatile
  2063   0016C0                     
  2064                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 503:     if (0 == source) {
  2065   0016C0  5067               	movf	RB6_ISR@source^0,w,c
  2066   0016C2  A4D8               	btfss	status,2,c
  2067   0016C4  EF66  F00B         	goto	i2u51_41
  2068   0016C8  EF68  F00B         	goto	i2u51_40
  2069   0016CC                     i2u51_41:
  2070   0016CC  EF6A  F00B         	goto	i2l2001
  2071   0016D0                     i2u51_40:
  2072   0016D0  EF6A  F00B         	goto	i2l763
  2073   0016D4                     i2l2001:
  2074   0016D4                     i2l763:
  2075   0016D4  0012               	return		;funcret
  2076   0016D6                     __end_of_RB6_ISR:
  2077                           	callstack 0
  2078                           
  2079 ;; *************** function _RB5_ISR *****************
  2080 ;; Defined at:
  2081 ;;		line 486 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  source          1    wreg     unsigned char 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  source          1    0[COMRAM] unsigned char 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;Total ram usage:        1 bytes
  2100 ;; Hardware stack levels used: 1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_Interrupt_Manager_High
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text15
  2109   0016D6                     __ptext15:
  2110                           	callstack 0
  2111   0016D6                     _RB5_ISR:
  2112                           	callstack 26
  2113                           
  2114                           ;incstack = 0
  2115                           ;RB5_ISR@source stored from wreg
  2116   0016D6  6E67               	movwf	RB5_ISR@source^0,c
  2117   0016D8                     
  2118                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 487:     (INTCONbits.RBIF = 1);
  2119   0016D8  80F2               	bsf	242,0,c	;volatile
  2120   0016DA                     
  2121                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 489:     if (0 == source) {
  2122   0016DA  5067               	movf	RB5_ISR@source^0,w,c
  2123   0016DC  A4D8               	btfss	status,2,c
  2124   0016DE  EF73  F00B         	goto	i2u50_41
  2125   0016E2  EF75  F00B         	goto	i2u50_40
  2126   0016E6                     i2u50_41:
  2127   0016E6  EF77  F00B         	goto	i2l1991
  2128   0016EA                     i2u50_40:
  2129   0016EA  EF77  F00B         	goto	i2l755
  2130   0016EE                     i2l1991:
  2131   0016EE                     i2l755:
  2132   0016EE  0012               	return		;funcret
  2133   0016F0                     __end_of_RB5_ISR:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _RB4_ISR *****************
  2137 ;; Defined at:
  2138 ;;		line 472 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  source          1    wreg     unsigned char 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  source          1    0[COMRAM] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;Total ram usage:        1 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_Interrupt_Manager_High
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text16
  2166   0016F0                     __ptext16:
  2167                           	callstack 0
  2168   0016F0                     _RB4_ISR:
  2169                           	callstack 26
  2170                           
  2171                           ;incstack = 0
  2172                           ;RB4_ISR@source stored from wreg
  2173   0016F0  6E67               	movwf	RB4_ISR@source^0,c
  2174   0016F2                     
  2175                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 473:     (INTCONbits.RBIF = 1);
  2176   0016F2  80F2               	bsf	242,0,c	;volatile
  2177   0016F4                     
  2178                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 475:     if (0 == source) {
  2179   0016F4  5067               	movf	RB4_ISR@source^0,w,c
  2180   0016F6  A4D8               	btfss	status,2,c
  2181   0016F8  EF80  F00B         	goto	i2u49_41
  2182   0016FC  EF82  F00B         	goto	i2u49_40
  2183   001700                     i2u49_41:
  2184   001700  EF84  F00B         	goto	i2l1981
  2185   001704                     i2u49_40:
  2186   001704  EF84  F00B         	goto	i2l747
  2187   001708                     i2l1981:
  2188   001708                     i2l747:
  2189   001708  0012               	return		;funcret
  2190   00170A                     __end_of_RB4_ISR:
  2191                           	callstack 0
  2192                           
  2193 ;; *************** function _INT2_ISR *****************
  2194 ;; Defined at:
  2195 ;;		line 466 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		None
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;Total ram usage:        0 bytes
  2214 ;; Hardware stack levels used: 1
  2215 ;; This function calls:
  2216 ;;		Nothing
  2217 ;; This function is called by:
  2218 ;;		_Interrupt_Manager_High
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text17
  2223   00170A                     __ptext17:
  2224                           	callstack 0
  2225   00170A                     _INT2_ISR:
  2226                           	callstack 26
  2227   00170A                     
  2228                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 467:     (INTCON3bits.INT2IF = 0);
  2229   00170A  92F0               	bcf	240,1,c	;volatile
  2230   00170C  0012               	return		;funcret
  2231   00170E                     __end_of_INT2_ISR:
  2232                           	callstack 0
  2233                           
  2234 ;; *************** function _INT1_ISR *****************
  2235 ;; Defined at:
  2236 ;;		line 460 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		None
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used: 1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_Interrupt_Manager_High
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text18
  2264   00170E                     __ptext18:
  2265                           	callstack 0
  2266   00170E                     _INT1_ISR:
  2267                           	callstack 26
  2268   00170E                     
  2269                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 461:     (INTCON3bits.INT1IF = 0);
  2270   00170E  90F0               	bcf	240,0,c	;volatile
  2271   001710  0012               	return		;funcret
  2272   001712                     __end_of_INT1_ISR:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function _INT0_ISR *****************
  2276 ;; Defined at:
  2277 ;;		line 454 in file "MCAL_LAYER/Interrupt/mcal_external_interrupt.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		None
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_Interrupt_Manager_High
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text19
  2305   001712                     __ptext19:
  2306                           	callstack 0
  2307   001712                     _INT0_ISR:
  2308                           	callstack 26
  2309   001712                     
  2310                           ;MCAL_LAYER/Interrupt/mcal_external_interrupt.c: 455:     (INTCONbits.INT0IF = 0);
  2311   001712  92F2               	bcf	242,1,c	;volatile
  2312   001714  0012               	return		;funcret
  2313   001716                     __end_of_INT0_ISR:
  2314                           	callstack 0
  2315                           
  2316 ;; *************** function _ADC_ISR *****************
  2317 ;; Defined at:
  2318 ;;		line 291 in file "MCAL_LAYER/ADC/hal_adc.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		None
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used: 1
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_Interrupt_Manager_High
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text20
  2346   001716                     __ptext20:
  2347                           	callstack 0
  2348   001716                     _ADC_ISR:
  2349                           	callstack 26
  2350   001716                     
  2351                           ;MCAL_LAYER/ADC/hal_adc.c: 292:     (PIR1bits.ADIF = 0);
  2352   001716  9C9E               	bcf	158,6,c	;volatile
  2353   001718  0012               	return		;funcret
  2354   00171A                     __end_of_ADC_ISR:
  2355                           	callstack 0
  2356                           
  2357                           	psect	rparam
  2358   000000                     
  2359                           	psect	temp
  2360   000074                     btemp:
  2361                           	callstack 0
  2362   000074                     	ds	1
  2363   000000                     int$flags	set	btemp
  2364   000000                     wtemp8	set	btemp+1
  2365   000000                     ttemp5	set	btemp+1
  2366   000000                     ttemp6	set	btemp+4
  2367   000000                     ttemp7	set	btemp+8
  2368                           
  2369                           	psect	config
  2370                           
  2371                           ; Padding undefined space
  2372   300000                     	org	3145728
  2373   300000  FF                 	db	255
  2374                           
  2375                           ;Config register CONFIG1H @ 0x300001
  2376                           ;	Oscillator Selection bits
  2377                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  2378                           ;	Fail-Safe Clock Monitor Enable bit
  2379                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2380                           ;	Internal/External Oscillator Switchover bit
  2381                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2382   300001                     	org	3145729
  2383   300001  07                 	db	7
  2384                           
  2385                           ;Config register CONFIG2L @ 0x300002
  2386                           ;	Power-up Timer Enable bit
  2387                           ;	PWRT = OFF, PWRT disabled
  2388                           ;	Brown-out Reset Enable bits
  2389                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2390                           ;	Brown Out Reset Voltage bits
  2391                           ;	BORV = 3, Minimum setting
  2392   300002                     	org	3145730
  2393   300002  1F                 	db	31
  2394                           
  2395                           ;Config register CONFIG2H @ 0x300003
  2396                           ;	Watchdog Timer Enable bit
  2397                           ;	WDT = ON, WDT enabled
  2398                           ;	Watchdog Timer Postscale Select bits
  2399                           ;	WDTPS = 32768, 1:32768
  2400   300003                     	org	3145731
  2401   300003  1F                 	db	31
  2402                           
  2403                           ; Padding undefined space
  2404   300004                     	org	3145732
  2405   300004  FF                 	db	255
  2406                           
  2407                           ;Config register CONFIG3H @ 0x300005
  2408                           ;	CCP2 MUX bit
  2409                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2410                           ;	PORTB A/D Enable bit
  2411                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2412                           ;	Low-Power Timer1 Oscillator Enable bit
  2413                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2414                           ;	MCLR Pin Enable bit
  2415                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2416   300005                     	org	3145733
  2417   300005  81                 	db	129
  2418                           
  2419                           ;Config register CONFIG4L @ 0x300006
  2420                           ;	Stack Full/Underflow Reset Enable bit
  2421                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2422                           ;	Single-Supply ICSP Enable bit
  2423                           ;	LVP = ON, Single-Supply ICSP enabled
  2424                           ;	Extended Instruction Set Enable bit
  2425                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2426                           ;	Background Debugger Enable bit
  2427                           ;	DEBUG = 0x1, unprogrammed default
  2428   300006                     	org	3145734
  2429   300006  85                 	db	133
  2430                           
  2431                           ; Padding undefined space
  2432   300007                     	org	3145735
  2433   300007  FF                 	db	255
  2434                           
  2435                           ;Config register CONFIG5L @ 0x300008
  2436                           ;	Code Protection bit
  2437                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2438                           ;	Code Protection bit
  2439                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2440                           ;	Code Protection bit
  2441                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2442                           ;	Code Protection bit
  2443                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2444   300008                     	org	3145736
  2445   300008  0F                 	db	15
  2446                           
  2447                           ;Config register CONFIG5H @ 0x300009
  2448                           ;	Boot Block Code Protection bit
  2449                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2450                           ;	Data EEPROM Code Protection bit
  2451                           ;	CPD = OFF, Data EEPROM not code-protected
  2452   300009                     	org	3145737
  2453   300009  C0                 	db	192
  2454                           
  2455                           ;Config register CONFIG6L @ 0x30000A
  2456                           ;	Write Protection bit
  2457                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2458                           ;	Write Protection bit
  2459                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2460                           ;	Write Protection bit
  2461                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2462                           ;	Write Protection bit
  2463                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2464   30000A                     	org	3145738
  2465   30000A  0F                 	db	15
  2466                           
  2467                           ;Config register CONFIG6H @ 0x30000B
  2468                           ;	Configuration Register Write Protection bit
  2469                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2470                           ;	Boot Block Write Protection bit
  2471                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2472                           ;	Data EEPROM Write Protection bit
  2473                           ;	WRTD = OFF, Data EEPROM not write-protected
  2474   30000B                     	org	3145739
  2475   30000B  E0                 	db	224
  2476                           
  2477                           ;Config register CONFIG7L @ 0x30000C
  2478                           ;	Table Read Protection bit
  2479                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2480                           ;	Table Read Protection bit
  2481                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2482                           ;	Table Read Protection bit
  2483                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2484                           ;	Table Read Protection bit
  2485                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2486   30000C                     	org	3145740
  2487   30000C  0F                 	db	15
  2488                           
  2489                           ;Config register CONFIG7H @ 0x30000D
  2490                           ;	Boot Block Table Read Protection bit
  2491                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2492   30000D                     	org	3145741
  2493   30000D  40                 	db	64
  2494                           tosu	equ	0xFFF
  2495                           tosh	equ	0xFFE
  2496                           tosl	equ	0xFFD
  2497                           stkptr	equ	0xFFC
  2498                           pclatu	equ	0xFFB
  2499                           pclath	equ	0xFFA
  2500                           pcl	equ	0xFF9
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           prodh	equ	0xFF4
  2506                           prodl	equ	0xFF3
  2507                           indf0	equ	0xFEF
  2508                           postinc0	equ	0xFEE
  2509                           postdec0	equ	0xFED
  2510                           preinc0	equ	0xFEC
  2511                           plusw0	equ	0xFEB
  2512                           fsr0h	equ	0xFEA
  2513                           fsr0l	equ	0xFE9
  2514                           wreg	equ	0xFE8
  2515                           indf1	equ	0xFE7
  2516                           postinc1	equ	0xFE6
  2517                           postdec1	equ	0xFE5
  2518                           preinc1	equ	0xFE4
  2519                           plusw1	equ	0xFE3
  2520                           fsr1h	equ	0xFE2
  2521                           fsr1l	equ	0xFE1
  2522                           bsr	equ	0xFE0
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           postdec2	equ	0xFDD
  2526                           preinc2	equ	0xFDC
  2527                           plusw2	equ	0xFDB
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    16
    Data        63
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     13     115
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    adc_1$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_2$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_3$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_4$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Get_Conversion_Blocking@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Get_Conversion_Blocking@result	PTR unsigned short  size(1) Largest target is 2
		 -> re_1(COMRAM[2]), re_2(COMRAM[2]), re_3(COMRAM[2]), re_4(COMRAM[2]), 

    ADC_Get_Conversion_Result@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Get_Conversion_Result@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Get_Conversion_Result@result	PTR unsigned short  size(1) Largest target is 2
		 -> re_1(COMRAM[2]), re_2(COMRAM[2]), re_3(COMRAM[2]), re_4(COMRAM[2]), 

    ADC_Init@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Init@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    _ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Is_Conversion_Done@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    ADC_Is_Conversion_Done@conversion_status	PTR unsigned char  size(1) Largest target is 1
		 -> ADC_Get_Conversion_Blocking@conversion_status(COMRAM[1]), 

    ADC_Select_Channel@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    adc_select_result_format@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    adc_select_result_format@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    adc_select_voltage_ref@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    adc_select_voltage_ref@adc$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    ADC_Start_Conversion@adc	PTR const struct . size(1) Largest target is 7
		 -> adc_1(COMRAM[7]), adc_2(COMRAM[7]), adc_3(COMRAM[7]), adc_4(COMRAM[7]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    INT0_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT1_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    INT2_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    Interrupt_INTx_Clear_Flag@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Disable@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Edge_Init@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Enable@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_INTx_Pin_Init@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@obj$External_CallBack_High	PTR FTN()void  size(2) Largest target is 0

    Interrupt_RBx_Init@obj$External_CallBack_Low	PTR FTN()void  size(2) Largest target is 0

    Interrupt_Set_Interrupt_Handler@obj$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    lat_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRlllll[1]), LATB(BITBIGSFRllllh[1]), LATC(BITBIGSFRllllh[1]), LATD(BITBIGSFRllllh[1]), 
		 -> LATE(BITBIGSFRllllh[1]), 

    port_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRlllll[1]), PORTB(BITBIGSFRlllll[1]), PORTC(BITBIGSFRlllll[1]), PORTD(BITBIGSFRlllll[1]), 
		 -> PORTE(BITBIGSFRlllll[1]), 

    RB4_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB4_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB5_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB6_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_Interrupt_Handler_High	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    RB7_Interrupt_Handler_Low	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S1246$External_CallBack	PTR FTN()void  size(2) Largest target is 0

    S1279$External_CallBack_High	PTR FTN()void  size(2) Largest target is 0

    S1279$External_CallBack_Low	PTR FTN()void  size(2) Largest target is 0

    S2308$buffer	PTR unsigned char  size(2) Largest target is 0

    S2308$source	PTR const unsigned char  size(2) Largest target is 0

    S663$ADC_Interrupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    sp__memset	PTR void  size(2) Largest target is 0

    tris_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRlllll[1]), TRISB(ABS[1]), TRISC(ABS[1]), TRISD(ABS[1]), 
		 -> TRISE(ABS[1]), 

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), STR_2(CODE[3]), STR_3(CODE[3]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_ADC_Get_Conversion_Blocking
    _Application_initialize->_ADC_Init
    _ADC_Init->_adc_input_channel_port_configure
    _ADC_Get_Conversion_Blocking->_ADC_Select_Channel
    _ADC_Select_Channel->_adc_input_channel_port_configure

Critical Paths under _Interrupt_Manager_High in COMRAM

    _Interrupt_Manager_High->_RB4_ISR
    _Interrupt_Manager_High->_RB5_ISR
    _Interrupt_Manager_High->_RB6_ISR
    _Interrupt_Manager_High->_RB7_ISR

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrupt_Manager_High in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt_Manager_High in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt_Manager_High in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt_Manager_High in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt_Manager_High in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt_Manager_High in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt_Manager_High in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt_Manager_High in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Interrupt_Manager_High in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Interrupt_Manager_High in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Interrupt_Manager_High in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Interrupt_Manager_High in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Interrupt_Manager_High in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Interrupt_Manager_High in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Interrupt_Manager_High in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Interrupt_Manager_High in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2828
        _ADC_Get_Conversion_Blocking
             _Application_initialize
 ---------------------------------------------------------------------------------
 (1) _Application_initialize                               0     0      0     737
                           _ADC_Init
               _ecu_layer_initialize
 ---------------------------------------------------------------------------------
 (2) _ecu_layer_initialize                                 1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     2      1     737
                                              4 COMRAM     3     2      1
   _adc_input_channel_port_configure
           _adc_select_result_format
             _adc_select_voltage_ref
 ---------------------------------------------------------------------------------
 (3) _adc_select_voltage_ref                               1     0      1     120
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (3) _adc_select_result_format                             1     0      1      98
                                              1 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _ADC_Get_Conversion_Blocking                          5     2      3    2091
                                              8 COMRAM     5     2      3
          _ADC_Get_Conversion_Result
             _ADC_Is_Conversion_Done
                 _ADC_Select_Channel
               _ADC_Start_Conversion
 ---------------------------------------------------------------------------------
 (2) _ADC_Start_Conversion                                 2     1      1     122
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC_Select_Channel                                   4     2      2     257
                                              4 COMRAM     4     2      2
   _adc_input_channel_port_configure
 ---------------------------------------------------------------------------------
 (3) _adc_input_channel_port_configure                     3     3      0      15
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Is_Conversion_Done                               3     1      2     242
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Get_Conversion_Result                            5     3      2     330
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupt_Manager_High                               0     0      0     120
                            _ADC_ISR
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                            _RB4_ISR
                            _RB5_ISR
                            _RB6_ISR
                            _RB7_ISR
 ---------------------------------------------------------------------------------
 (5) _RB7_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB6_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB5_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _RB4_ISR                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _INT2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _INT0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Get_Conversion_Blocking
     _ADC_Get_Conversion_Result
     _ADC_Is_Conversion_Done
     _ADC_Select_Channel
       _adc_input_channel_port_configure
     _ADC_Start_Conversion
   _Application_initialize
     _ADC_Init
       _adc_input_channel_port_configure
       _adc_select_result_format
       _adc_select_voltage_ref
     _ecu_layer_initialize

 _Interrupt_Manager_High (ROOT)
   _ADC_ISR
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _RB4_ISR
   _RB5_ISR
   _RB6_ISR
   _RB7_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      44        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      D      73       1       91.3%
BITBIGSFRhhll       2B      0       0      38        0.0%
BITBIGSFRllhh       15      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      37        0.0%
BITBIGSFRllhll       7      0       0      40        0.0%
BITBIGSFRlllhh       6      0       0      41        0.0%
BITBIGSFRllllh       4      0       0      42        0.0%
BITBIGSFRlllll       4      0       0      43        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      12        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Feb 18 15:00:03 2024

                ADC_Get_Conversion_Result@adc 0068                  ADC_Get_Conversion_Result@ret 006C  
                     ?_Interrupt_Manager_High 0067                                           l320 171A  
                                         l420 167E                                           l415 12CE  
                                         l431 157C                                           l351 13A0  
                                         l424 1554                                           l433 1580  
                                         l353 142A                                           l418 167C  
                                         l363 15F8                                           l428 1574  
                                         l366 169C                                           l375 153A  
                                         l368 16A0                                           l393 147E  
                                         l386 1382                                           l396 149C  
                                         l860 165C                                           l854 14A2  
                     ?_ADC_Is_Conversion_Done 0068                               __end_of_ADC_ISR 171A  
                                         _ret 001F                                           wreg 0FE8  
                             __end_of_RB4_ISR 170A                               __end_of_RB5_ISR 16F0  
                             __end_of_RB6_ISR 16D6                               __end_of_RB7_ISR 16BC  
                                        l3001 13A2                                          l3011 1416  
                                        l3003 13F4                                          l3021 15C2  
                                        l3013 1418                                          l3005 1404  
                                        l3023 15D6                                          l3015 1426  
                                        l3007 140C                                          l3041 14F2  
                                        l3105 1260                                          l3025 15DE  
                                        l3033 1680                                          l3009 1414  
                                        l3017 1428                                          l3043 1506  
                                        l3027 15F0                                          l3035 1694  
                                        l3061 1314                                          l3053 12D0  
                                        l3045 1516                                          l3029 15F6  
                                        l3037 169E                                          l3063 133A  
                                        l3055 12E4                                          l3047 151E  
                                        l1551 11FE                                          l3065 1352  
                                        l3057 12F4                                          l3049 1538  
                                        l1561 121C                                          l1553 1204  
                                        l3081 1470                                          l3073 142C  
                                        l3059 12FC                                          l1571 123A  
                                        l1563 1222                                          l1555 120A  
                                        l3083 148C                                          l3075 1440  
                                        l3091 1634                                          l3069 1380  
                                        l1573 1240                                          l1565 1228  
                                        l1557 1210                                          l1549 11FA  
                                        l3085 149A                                          l3077 1450  
                                        l3093 163E                                          l1575 1246  
                                        l1567 122E                                          l1559 1216  
                                        l3079 1458                                          l3095 1648  
                                        l1569 1234                                          l1577 124C  
                                        l3097 1652                                          l3089 1630  
                                        l3099 149E                                          l1697 171A  
                                        l2991 1676                                          l2993 153C  
                                        l2995 155C                                          l2989 165E  
                                        l2997 1384                                          l2999 1398  
                                        STR_1 1011                                          _LATA 0F89  
                                        _LATB 0F8A                                          _LATC 0F8B  
                                        _LATD 0F8C                                          _LATE 0F8D  
                                        u1700 15D6                                          u1701 15D2  
                                        u1710 1694                                          u1711 1690  
                                        u1720 1506                                          u1800 1440  
                                        u1721 1502                                          u1801 143C  
                                        u1730 1516                                          u1810 1450  
                                        u1731 1512                                          u1811 144C  
                                        u1740 1534                                          u1820 148C  
                                        u1660 1676                                          u1741 152E  
                                        u1821 1488                                          u1661 1672  
                                        u1750 1536                                          u1670 1554  
                                        u1671 1550                                          u1760 12E4  
                                        u1680 1574                                          u1761 12E0  
                                        u1681 1570                                          u1770 12F4  
                                        u1690 1398                                          u1771 12F0  
                                        u1691 1394                                          u1780 1314  
                                        u1781 1310                                          u1790 1352  
                                        u1791 134E                                          _re_1 0065  
                                        _re_2 0063                                          _re_3 0061  
                                        _re_4 005F                                          _main 149E  
                                        fsr2h 0FDA                                          indf2 0FDF  
                                        fsr1l 0FE1                                          fsr2l 0FD9  
                                        btemp 0074                              __end_of_ADC_Init 142C  
                                        start 000E                __end_of_Interrupt_Manager_High 11F8  
                                ___param_bank 0000                    __end_of_ADC_Select_Channel 15FA  
     ADC_Is_Conversion_Done@conversion_status 0069                              __end_of_INT0_ISR 1716  
                            __end_of_INT1_ISR 1712                              __end_of_INT2_ISR 170E  
              __end_of_ADC_Is_Conversion_Done 153C                                 Relay_on@F3485 0059  
                                       ?_main 0067                                         _EEADR 0FA9  
                                       _RB4_f 0023                                         _RB5_f 0022  
                                       _RB6_f 0021                                         i2l437 1718  
                                       _RB7_f 0020                                         i2l731 1714  
                                       i2l735 1710                                         i2l823 11F4  
                                       i2l739 170C                                         i2l747 1708  
                                       i2l755 16EE                                         i2l763 16D4  
                                       i2l771 16BA                                         _PORTA 0F80  
                                       _PORTB 0F81                                         _PORTC 0F82  
                                       _PORTD 0F83                                         _PORTE 0F84  
                                       _TRISA 0F92                                         _TRISB 0F93  
                                       _TRISC 0F94                                         _TRISD 0F95  
                                       _TRISE 0F96                                         _adc_1 0039  
                                       _adc_2 0032                                         _adc_3 002B  
                                       _adc_4 0024                          _ADC_Start_Conversion 1680  
                                       tablat 0FF5                                         ttemp5 0075  
                                       ttemp6 0078                                         ttemp7 007C  
                                       status 0FD8                                         wtemp8 0075  
                             __initialization 15FA                     ADC_Is_Conversion_Done@adc 0068  
                   ADC_Is_Conversion_Done@ret 006A                                  __end_of_main 14F2  
                                   ??_ADC_ISR 0067                                 _lat_registers 000B  
                                      ??_main 0074                                 __activetblptr 0003  
                            led_turn_on@F3487 005D                                     ??_RB4_ISR 0067  
                                   ??_RB5_ISR 0067                                     ??_RB6_ISR 0067  
                                   ??_RB7_ISR 0067                     ?_adc_select_result_format 0068  
                       ?_ADC_Start_Conversion 0068                                        _ADRESH 0FC4  
                                      _EEADRH 0FAA                                        _ADRESL 0FC3  
                                      _EEDATA 0FA8                                        _EECON2 0FA7  
                                      i2l2001 16D4                                        i2l2011 16BA  
                                      i2l2005 16A4                                        i2l2007 16A6  
                                      i2l1923 1716                                        i2l2901 1054  
                                      i2l2911 1086                                        i2l2903 1058  
                                      i2l2921 10C2                                        i2l2913 1094  
                                      i2l2905 1066                                        i2l1963 1712  
                                      i2l1971 170A                                        i2l2931 10FA  
                                      i2l2923 10D2                                        i2l2915 1098  
                                      i2l2907 1074                                        i2l1981 1708  
                                      i2l2941 1126                                        i2l2933 10FE  
                                      i2l2925 10D6                                        i2l2917 10A6  
                                      i2l2909 1078                                        i2l1967 170E  
                                      i2l1975 16F2                                        i2l1991 16EE  
                                      i2l2951 1154                                        i2l2943 112C  
                                      i2l2935 1104                                        i2l2927 10DC  
                                      i2l2919 10B4                                        i2l1977 16F4  
                                      i2l1985 16D8                                        i2l2961 118A  
                                      i2l2953 1162                                        i2l2945 113A  
                                      i2l2937 1112                                        i2l2929 10EA  
                                      i2l1987 16DA                                        i2l1995 16BE  
                                      i2l2971 11C2                                        i2l2963 119A  
                                      i2l2955 1172                                        i2l2947 114A  
                                      i2l2939 1122                                        i2l2891 1018  
                                      i2l1997 16C0                                        i2l2981 11EE  
                                      i2l2973 11C6                                        i2l2965 119E  
                                      i2l2957 1176                                        i2l2949 114E  
                                      i2l2893 1026                                        i2l2975 11CC  
                                      i2l2967 11A4                                        i2l2959 117C  
                                      i2l2895 1034                                        i2l2977 11DA  
                                      i2l2969 11B2                                        i2l2897 1038  
                                      i2l2979 11EA                                        i2l2899 1046  
                              Relay_off@F3490 0058                       ?_Application_initialize 0067  
                                      clear_0 1620                                        isa$std 0001  
                                __pdataCOMRAM 0001                                     ?_ADC_Init 006B  
                                __mediumconst 0000                                        tblptrh 0FF7  
                                      tblptrl 0FF6                                        tblptru 0FF8  
         __end_of_ADC_Get_Conversion_Blocking 149E                   _ADC_Get_Conversion_Blocking 142C  
                     ADC_Start_Conversion@adc 0068                       ADC_Start_Conversion@ret 0069  
                                  __accesstop 0080                       __end_of__initialization 1626  
                                   ?_INT0_ISR 0067                                     ?_INT1_ISR 0067  
                                   ?_INT2_ISR 0067                      ??_adc_select_voltage_ref 0069  
               ??_ADC_Get_Conversion_Blocking 0072                                 ___rparam_used 0001  
                              __pcstackCOMRAM 0067                __end_of_Application_initialize 165E  
                               RB4_ISR@source 0067                    _RB6_Interrupt_Handler_High 0046  
                                  ??_ADC_Init 006C                        ??_ADC_Start_Conversion 0069  
                  ?_ADC_Get_Conversion_Result 0068                                 RB5_ISR@source 0067  
                   _RB5_Interrupt_Handler_Low 0048                                    ??_INT0_ISR 0067  
                                  ??_INT1_ISR 0067                                    ??_INT2_ISR 0067  
                      _INT2_Interrupt_Handler 0050                                 RB6_ISR@source 0067  
                           led_turn_off@F3492 005C                   adc_select_result_format@adc 0068  
                                     _ADC_ISR 1716                                       _RB4_ISR 16F0  
                                     _RB5_ISR 16D6                                       _RB6_ISR 16BC  
                                     _RB7_ISR 16A2                            _ADC_Select_Channel 15C2  
                                     i2u50_40 16EA                                       i2u50_41 16E6  
                                     i2u51_40 16D0                                       i2u51_41 16CC  
                                     i2u52_40 16B6                                       i2u52_41 16B2  
                                     i2u49_40 1704                                       i2u49_41 1700  
                               RB7_ISR@source 0067             __end_of_ADC_Get_Conversion_Result 1384  
                         ?_ADC_Select_Channel 006B                                    _btn_values 1001  
                              _tris_registers 0015                                       __Hparam 0000  
                                     __Lparam 0000                          ??_ADC_Select_Channel 006D  
                                __psmallconst 1000                                       __pcinit 15FA  
                                     __ramtop 1000                                       __ptext0 149E  
                                     __ptext1 1630                                       __ptext2 171A  
                                     __ptext3 1384                                       __ptext4 153C  
                                     __ptext5 165E                                       __ptext6 142C  
                                     __ptext7 1680                                       __ptext8 15C2  
                                     __ptext9 11F8                                __pintcode_body 1016  
                        end_of_initialization 1626  ADC_Get_Conversion_Blocking@conversion_status 0072  
                                     int_func 1016                                       postdec1 0FE5  
                                     postdec2 0FDD                                       postinc0 0FEE  
                                     postinc2 0FDE                                     _PORTBbits 0F81  
                      _adc_select_voltage_ref 153C                     ADC_Select_Channel@channel 006C  
                    ??_Interrupt_Manager_High 0068                      ??_ADC_Is_Conversion_Done 006A  
                               __pidataCOMRAM 1582                      _adc_select_result_format 165E  
     adc_input_channel_port_configure@channel 006A                           start_initialization 15FA  
                 ??_ADC_Get_Conversion_Result 006A                                      ?_ADC_ISR 0067  
                  _RB5_Interrupt_Handler_High 004A                  __end_of_ecu_layer_initialize 171C  
                                    ?_RB4_ISR 0067                                      ?_RB5_ISR 0067  
                                    ?_RB6_ISR 0067                                      ?_RB7_ISR 0067  
                                 __pbssCOMRAM 0040                     _RB6_Interrupt_Handler_Low 0044  
                      _INT0_Interrupt_Handler 0054                ADC_Get_Conversion_Blocking@adc 006F  
              ADC_Get_Conversion_Blocking@ret 0073                         Relay_initialize@F3480 005A  
                      __ADC_Interrupt_Handler 0056                     _ADC_Get_Conversion_Result 12D0  
                                   __pintcode 0008      __end_of_adc_input_channel_port_configure 12D0  
          ??_adc_input_channel_port_configure 0068             ?_adc_input_channel_port_configure 0067  
            _adc_input_channel_port_configure 11F8             ADC_Get_Conversion_Blocking@result 0071  
                   adc_select_voltage_ref@adc 0068                                   __smallconst 1000  
                                    _ADC_Init 1384                                   ADC_Init@adc 006B  
                                 ADC_Init@ret 006D                                      _INT0_ISR 1712  
                                    _INT1_ISR 170E                                      _INT2_ISR 170A  
                    ??_Application_initialize 006E                                      _PIE1bits 0F9D  
                                    i2u140_40 1026                                      i2u140_41 1022  
                                    i2u141_40 1034                                      i2u141_41 1030  
                                    i2u150_40 10C2                                      i2u142_40 1046  
                                    i2u150_41 10BE                                      i2u142_41 1042  
                                    i2u151_40 10D2                                      i2u143_40 1054  
                                    i2u151_41 10CE                                      i2u143_41 1050  
                                    i2u160_40 118A                                      i2u152_40 10EA  
                                    i2u144_40 1066                                      i2u160_41 1186  
                                    i2u152_41 10E6                                      i2u144_41 1062  
                                    i2u161_40 119A                                      i2u153_40 10FA  
                                    i2u145_40 1074                                      i2u161_41 1196  
                                    i2u153_41 10F6                                      i2u145_41 1070  
                                    i2u162_40 11B2                                      i2u154_40 1112  
                                    i2u146_40 1086                                      i2u162_41 11AE  
                                    i2u154_41 110E                                      i2u146_41 1082  
                                    i2u163_40 11C2                                      i2u155_40 1122  
                                    i2u147_40 1094                                      i2u163_41 11BE  
                                    i2u155_41 111E                                      i2u147_41 1090  
                                    i2u164_40 11DA                                      i2u156_40 113A  
                                    i2u148_40 10A6                                      i2u164_41 11D6  
                                    i2u156_41 1136                                      i2u148_41 10A2  
                                    i2u165_40 11EA                                      i2u157_40 114A  
                                    i2u149_40 10B4                                      i2u165_41 11E6  
                                    i2u157_41 1146                                      i2u149_41 10B0  
                                    i2u158_40 1162                                      i2u158_41 115E  
                                    i2u159_40 1172                                      i2u159_41 116E  
                                    _PIR1bits 0F9E                       ?_adc_select_voltage_ref 0068  
                      _Interrupt_Manager_High 0008                                    _ADCON0bits 0FC2  
                                  _ADCON1bits 0FC1                                    _ADCON2bits 0FC0  
                      _ADC_Is_Conversion_Done 14F2                  ?_ADC_Get_Conversion_Blocking 006F  
                                 _INTCON2bits 0FF1                                   _INTCON3bits 0FF0  
                                   copy_data0 160E                          _ecu_layer_initialize 171A  
                                  _EECON1bits 0FA6                                      __Hrparam 0000  
                  ??_adc_select_result_format 0069                                      __Lrparam 0000  
              __end_of_adc_select_voltage_ref 1582                            __end_of_btn_values 1011  
                          led_intialize@F3482 005E                                      __ptext10 14F2  
                                    __ptext11 12D0                                      __ptext20 1716  
                                    __ptext13 16A2                                      __ptext14 16BC  
                                    __ptext15 16D6                                      __ptext16 16F0  
                                    __ptext17 170A                                      __ptext18 170E  
                                    __ptext19 1712                         ?_ecu_layer_initialize 0067  
                                    isa$xinst 0000                                      int$flags 0074  
                                  _INTCONbits 0FF2                                      intlevel2 0000  
          ADC_Get_Conversion_Blocking@channel 0070                        led_toggle_status@F3497 005B  
                       ADC_Select_Channel@adc 006B                  __end_of_ADC_Start_Conversion 16A2  
                       ADC_Select_Channel@ret 006E                    _RB4_Interrupt_Handler_High 004E  
                      _Application_initialize 1630                    _RB7_Interrupt_Handler_High 0042  
                              _port_registers 0001                     _RB4_Interrupt_Handler_Low 004C  
                   _RB7_Interrupt_Handler_Low 0040                        ??_ecu_layer_initialize 0068  
             ADC_Get_Conversion_Result@result 0069                        _INT1_Interrupt_Handler 0052  
            __end_of_adc_select_result_format 1680  
